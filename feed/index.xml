<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Noncombatant</title>
    <link>https://noncombatant.org/feed/</link>
    <description>A blog about software engineering, music, and feelings</description>
    <managingEditor>chris@noncombatant.org (Chris Palmer)</managingEditor>
    <pubDate>Sat, 24 Jan 2004 00:00:00 +0000</pubDate>
    <lastBuildDate>Sun, 06 Oct 2024 18:59:20 -0700</lastBuildDate>
    <item>
      <title>More Fun With The Known Exploited Vulnerabilities Catalog</title>
      <link>https://noncombatant.org/2023/12/29/more-fun-with-kev/index.content</link>
      <description>&lt;h1&gt;More Fun With The Known Exploited Vulnerabilities Catalog&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;29 December 2023&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Happily, &lt;a&#xA;href=&#34;https://cwe.mitre.org/top25/archive/2023/2023_kev_insights.html&#34;&gt;MITRE has&#xA;analyzed and characterized the bugs in the Known Exploited Vulnerabilities (KEV)&#xA;Catalog of 2023&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;In 2021, the &lt;a&#xA;href=&#34;https://www.dhs.gov/cisa/cybersecurity-division&#34;&gt;Cybersecurity and&#xA;Infrastructure Security Agency (CISA)&lt;/a&gt;&#xA;began publishing the ‚Äú&lt;a&#xA;href=&#34;https://www.cisa.gov/known-exploited-vulnerabilities-catalog&#34;&gt;Known&#xA;Exploited Vulnerabilities (KEV) Catalog&lt;/a&gt;.‚Äù Entries in this catalog are&#xA;vulnerabilities that have been reported through the &lt;a&#xA;href=&#34;https://www.cve.org/&#34;&gt;Common Vulnerabilities and Exposures (CVE¬Æ)&lt;/a&gt;&#xA;program and are observed to be (or have been) actively exploited.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I think this part in particular is important for software engineers and&#xA;management to be aware of:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&lt;p&gt;CISA recommends that organizations monitor the KEV catalog and&#xA;use its content to help prioritize remediation activities in their systems to&#xA;reduce the likelihood of compromise.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Last year I did &lt;a href=&#34;/2022/04/22/itw-taxonomy/&#34;&gt;a similar thing&lt;/a&gt; (see&#xA;also &lt;a&#xA;href=&#34;https://docs.google.com/spreadsheets/d/1JeN3F8EG6A_ckb7PDCHIuAocR8W-6UEu9kKoctJaF08/edit#gid=1509787727&#34;&gt;the&#xA;spreadsheet&lt;/a&gt;), with a substantially different classification system but with&#xA;essentially the same outcome.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hand-waving away the differences in the bug classification for a moment, we&#xA;see that MITRE got a similar result as I did: they got 46% memory unsafety (with&#xA;use-after-free (UAF) leading), while my (incomplete) result was 40% memory&#xA;unsafety. So we‚Äôre in the same ballpark, which is nice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Of the various kinds of memory unsafety, why should UAF be so prominent in&#xA;known exploitation in 2023? My take is that for arbitrarily complex object&#xA;graphs, &lt;a href=&#34;/2023/05/29/complexities-of-allocation/&#34;&gt;nothing but&#xA;heap-walking garbage collection is reliable for achieving temporal safety&lt;/a&gt;.&#xA;(GC; as opposed to less expensive lifetime management approaches like reference&#xA;counting, arena allocation, and so on.) Temporal safety is much harder in&#xA;general to fix efficiently than is spatial unsafety.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Moreover, browsers ‚Äî which by definition must have complex object graphs (due&#xA;to for example the HTML DOM, JavaScript, and cross-process IPC with entangled&#xA;object lifetimes) ‚Äî¬†are naturally a big focus of exploit developers‚Äô attention.&#xA;For efficiency reasons, browsers tend not to use GC for much of the browser‚Äôs&#xA;own internals. I think that accounts for the prominence of UAF in the 2023&#xA;catalog.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let‚Äôs consider MITRE‚Äôs classification system, though.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Taxonomic Tangles&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;At its core, I find &lt;a href=&#34;https://cwe.mitre.org/&#34;&gt;the Common Weaknesses&#xA;Enumeration taxonomy&lt;/a&gt; (CWE) to be trying for more precision than we can get&#xA;or even need, and that it obscures more than it enlightens. (&lt;a&#xA;href=&#34;/2022/07/10/fraught-vdbs/&#34;&gt;I find the same is true of the Common&#xA;Vulnerability Scoring System&lt;/a&gt; (CVSS).)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, consider the 2nd- and 3rd-most prevalent bug classes, &lt;a&#xA;href=&#34;https://cwe.mitre.org/data/definitions/122.html&#34;&gt;CWE-122 heap-based buffer&#xA;overflow&lt;/a&gt; and &lt;a&#xA;href=&#34;https://cwe.mitre.org/data/definitions/787.html&#34;&gt;CWE-787 out-of-bounds&#xA;write&lt;/a&gt;. It‚Äôs not immediately clear what the important differences between&#xA;these 2 taxa are. After reading their definitions, I find it even less clear.&#xA;Were the heap-overflows all reads, not writes? Were the OOB writes all on the&#xA;stack?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At the high level of analysis we are doing here ‚Äî that is, helping managers&#xA;and engineers allocate their time and attention most effectively ‚Äî¬†the read vs.&#xA;write distinction matters, but I‚Äôm not sure the heap vs. stack (vs. &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/.bss&#34;&gt;BSS&lt;/a&gt;) part is the biggest deal. It&#xA;matters to exploit developers, but the solutions look similar and have similar&#xA;costs to develop.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is also a &lt;a&#xA;href=&#34;https://cwe.mitre.org/data/definitions/788.html&#34;&gt;CWE-788 access of memory&#xA;location after end of buffer&lt;/a&gt; taxon. Where does that fit in?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is important, because it might be that the 2nd- and 3rd-most significant&#xA;categories actually outrank UAF, if you treat them as essentially the same: as&#xA;spatial unsafety. That might significantly impact an engineering team‚Äôs&#xA;cost/benefit analysis: solving temporal safety is very hard (expensive), while&#xA;solving spatial safety is typically much easier (cheaper). Consider &lt;a&#xA;href=&#34;https://github.com/abseil/abseil-cpp/blob/lts_2023_08_02/absl/container/inlined_vector.h#L363&#34;&gt;a&#xA;C++ &lt;code&gt;vector&lt;/code&gt; type&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;// `InlinedVector::operator[](...)`&#xA;//&#xA;// Returns a `reference` to the `i`th element of the inlined vector.&#xA;reference operator[](size_type i) ABSL_ATTRIBUTE_LIFETIME_BOUND {&#xA;    &lt;b&gt;ABSL_HARDENING_ASSERT(i &amp;lt; size());&lt;/b&gt;&#xA;    return data()[i];&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the biggest security problem of 2023 can be solved by sprinkling 1 line of&#xA;code in the right places in core libraries, that‚Äôs a very different story than&#xA;if the biggest problem requires fancy allocation and deallocation strategies, as&#xA;solving UAF typically does. Allocation and deallocation necessarily have a much&#xA;greater impact on software efficiency and development cost than does the spatial&#xA;safety fix above.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Similarly, the 4th-biggest problem of 2023 in MITRE‚Äôs analysis is &lt;a&#xA;href=&#34;https://cwe.mitre.org/data/definitions/20.html&#34;&gt;CWE-20 improper input&#xA;validation&lt;/a&gt;. As defined, that could be a key contributing factor to all of&#xA;the other top 9 problems ‚Äî¬†and often is. (That&#xA;&lt;code&gt;ABSL_HARDENING_ASSERT&lt;/code&gt; above is proper input validation, for&#xA;example.)&lt;/p&gt;&#xA;    &#xA;&lt;p&gt;Along the same lines, type confusion (#8) could lead to spatial unsafety,&#xA;could be an exploitable outcome of UAF, and could be part of the exploitation of&#xA;deserialization of untrusted data (#6).&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Keep Calm And Engineer On&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Although CWE is Kind Of A Lot, MITRE‚Äôs analysis is, at a high level, correct&#xA;and useful in directing our work:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&#xA;&lt;li&gt;memory unsafety is the biggest problem&#xA;(#1, #2, #3, and at least some of #4 and #8)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;the next biggest class of problem is what I called &lt;code&gt;eval&lt;/code&gt; bugs&#xA;(#5, #6, possibly #8)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;after that, it‚Äôs all about what I called logic and configuration bugs (#7,&#xA;#9, #10)&lt;/li&gt;&#xA;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Our goal should be to get things to where logic and (rarely) configration&#xA;bugs are our biggest problems. To get there, we gotta hammer on memory unsafety&#xA;and &lt;code&gt;eval&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, if spatial unsafety really is the current biggest problem, that is&#xA;great news. Time to go write a bunch of 1-liners, and &lt;a&#xA;href=&#34;https://research.swtch.com/testing&#34;&gt;write tests&lt;/a&gt;! üôÇ&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And, as I am reminded, turn all those pointers into &lt;code&gt;span&lt;/code&gt;s.&#xA;üòâ&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2023/12/29/more-fun-with-kev/index.html</guid>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Comments On Comments</title>
      <link>https://noncombatant.org/2023/08/27/comments/index.content</link>
      <description>&lt;h1&gt;Comments On Comments&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;27 August 2023&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Programmers sometimes argue about whether comments are good, or bad, or bad&#xA;&#x9;but necessary, or better than no comments, and so on. It‚Äôs one of those debates&#xA;&#x9;where everyone is right part of the time, and nobody really convinces anybody,&#xA;&#x9;and then we do it again next month.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Maybe a year or so ago, some colleagues and I were going around this&#xA;&#x9;merry-go-round again, and Drew Fisher actually shed some light on the discussion&#xA;&#x9;that I hadn‚Äôt seen before. He said, ‚ÄúComments should explain why, not what.‚Äù I&#xA;&#x9;realized it‚Äôs the &lt;i&gt;what&lt;/i&gt; comments that I dislike ‚Äî¬†they are redundant at&#xA;&#x9;best, and contradict the actual code at worst (which happens frequently, in my&#xA;&#x9;experience). It‚Äôs the &lt;i&gt;why&lt;/i&gt; comments that I like, and I bet most of us&#xA;&#x9;do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There seem to be at least 3 kinds of comments in software code:&lt;/p&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;&#x9;&lt;dt&gt;&lt;i&gt;should&lt;/i&gt; comments&lt;/dt&gt;&#xA;&#x9;&lt;dd&gt;that talk about what the code should do, or&#xA;&#x9;&#x9;what callers should do;&lt;/dd&gt;&#xA;&#xA;&#x9;&lt;dt&gt;&lt;i&gt;what&lt;/i&gt; comments&lt;/dt&gt;&#xA;&#x9;&lt;dd&gt;that talk about what code does; and&lt;/dd&gt;&#xA;&#xA;&#x9;&lt;dt&gt;&lt;i&gt;why&lt;/i&gt; comments&lt;/dt&gt;&#xA;&#x9;&lt;dd&gt;that explain why the code does what it does, or&#xA;&#x9;&#x9;why or when callers should call it.&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;p&gt;The state of comments in many codebases is not ideal. Often, we can and&#xA;&#x9;should&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#x9;&lt;li&gt;replace &lt;i&gt;should&lt;/i&gt; comments with code that checks;&lt;/li&gt;&#xA;&#x9;&lt;li&gt;replace &lt;i&gt;what&lt;/i&gt; comments with meaningful identifiers; and&lt;/li&gt;&#xA;&#x9;&lt;li&gt;explain &lt;i&gt;why&lt;/i&gt; more often and more thoroughly.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Code examples in this post are in Go, since I work in a Go shop these&#xA;&#x9;days.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Replace Should Comments With Code&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Here‚Äôs an example of a &lt;i&gt;should&lt;/i&gt; comment (that also does not explain&#xA;&#x9;why):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;// RunCommand runs command with the correct arguments for our application.&#xA;//&#xA;// The command should be one of &#34;pumpkin&#34;, &#34;noodle&#34;, or &#34;tootle&#34;.&#xA;func RunCommand(command string) error {&#xA;&#x9;cmd := exec.Command(command, &#34;woop&#34;, &#34;boing&#34;)&#xA;&#x9;cmd.Stdout = os.Stdout&#xA;&#x9;cmd.Stderr = os.Stderr&#xA;&#x9;return cmd.Run()&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;command&lt;/code&gt; argument is a shell command, so we can imagine that&#xA;&#x9;the &lt;i&gt;why&lt;/i&gt; is that we need to restrict the commands to 1 of a few known-safe&#xA;&#x9;commands ‚Äî¬†we don‚Äôt want to create a shell injection vulnerability! But it‚Äôs not&#xA;&#x9;great to make the reader imagine or guess. We should tell them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This code enforces the should and avoids the vulnerability ‚Äî¬†it‚Äôs safe even&#xA;&#x9;if the authors of callers didn‚Äôt read the comment:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;var SafeCommands = []string{&#xA;&#x9;&#34;pumpkin&#34;,&#xA;&#x9;&#34;noodle&#34;,&#xA;&#x9;&#34;tootle&#34;,&#xA;}&#xA;&#xA;// RunCommand runs command (which must be one of the SafeCommands) with the&#xA;// correct arguments for our application.&#xA;func RunCommand(command string) error {&#xA;&#x9;if !slices.Contains(SafeCommands, command) {&#xA;&#x9;&#x9;return fmt.Errorf(&#34;%q is not in SafeCommands&#34;, command)&#xA;&#x9;}&#xA;&#x9;cmd := exec.Command(command, &#34;woop&#34;, &#34;boing&#34;)&#xA;&#x9;cmd.Stdout = os.Stdout&#xA;&#x9;cmd.Stderr = os.Stderr&#xA;&#x9;return cmd.Run()&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Explaining why commands must be safe is a good idea, too:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;// SafeCommands limits the commands that RunCommand will run. This limit is&#xA;// necessary because we must prevent shell injection vulnerabilities and&#xA;// because even without injection, some commands are dangerous to run. Before&#xA;// you change this list, get approval from the SREs.&#xA;var SafeCommands = []string{&#xA;&#x9;&#34;pumpkin&#34;,&#xA;&#x9;&#34;noodle&#34;,&#xA;&#x9;&#34;tootle&#34;,&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This is now pretty good: we‚Äôve replaced a should comment with an assertion&#xA;&#x9;that stops bad things from happening, and we explain why it‚Äôs necessary to stop&#xA;&#x9;bad things and why commands can be bad.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Personally, I‚Äôm still not entirely satisfied with this for 2 reasons:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&#xA;&#x9;&lt;li&gt;I‚Äôd like for attempted invocations of unsafe commands to fail early, at&#xA;&#x9;&#x9;compile time rather than at run time.&lt;/li&gt;&#xA;&#xA;&#x9;&lt;li&gt;The comments are duplicative, and will need to be updated if the names&#xA;&#x9;&#x9;&lt;code&gt;RunCommand&lt;/code&gt; or &lt;code&gt;SafeCommands&lt;/code&gt; change. People don‚Äôt always&#xA;&#x9;&#x9;remember to do this when making changes, and then the comments refer to things&#xA;&#x9;&#x9;that no longer exist.&#xA;&#x9;&lt;/li&gt;&#xA;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;This code, which creates a type that callers outside the current package&#xA;&#x9;can‚Äôt construct a meaningful instance of, gets closer to that ideal:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;// SafeCommands limits the commands that RunCommand will run. This limit is&#xA;// necessary because we must prevent shell injection vulnerabilities and&#xA;// because even without injection, some commands are dangerous to run.&#xA;type SafeCommand struct {&#xA;&#x9;command string&#xA;}&#xA;&#xA;// Before you change or add to these SafeCommands, get approval from the SREs.&#xA;var Pumpkin SafeCommand = SafeCommand{command: &#34;pumpkin&#34;}&#xA;var Noodle SafeCommand = SafeCommand{command: &#34;noodle&#34;}&#xA;var Tootle SafeCommand = SafeCommand{command: &#34;tootle&#34;}&#xA;&#xA;// RunCommand runs command with the correct arguments for our application.&#xA;func RunCommand(command SafeCommand) error {&#xA;&#x9;cmd := exec.Command(command.command, &#34;woop&#34;, &#34;boing&#34;)&#xA;&#x9;cmd.Stdout = os.Stdout&#xA;&#x9;cmd.Stderr = os.Stderr&#xA;&#x9;return cmd.Run()&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Callers outside this package cannot construct a meaningful, non-zero instance&#xA;&#x9;of &lt;code&gt;SafeCommand&lt;/code&gt; because all 1 of its fields, &lt;code&gt;command&lt;/code&gt;,&#xA;&#x9;begins with a lower-case letter. In Go, identifiers that begin with lower-case&#xA;&#x9;letters are visible only from inside the package.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that I removed the assertion &lt;code&gt;slices.Contains(SafeCommands,&#xA;command)&lt;/code&gt;. Now we use the &lt;code&gt;SafeCommand&lt;/code&gt; type to enforce that&#xA;&#x9;commands are safe.&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;Update 28 August 2023: Jacob Hoffman-Andrews pointed out that we could&#xA;&#x9;even make the type private, by naming it &lt;code&gt;safeCommand&lt;/code&gt;. But having a&#xA;&#x9;public function that takes a private type feels weird to me. I slightly prefer&#xA;&#x9;having the zero-value of &lt;code&gt;SafeCommand&lt;/code&gt; be meaningless and hence&#xA;&#x9;safe.&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;From inside the package, it is still possible to create an arbitrary&#xA;&#x9;&lt;code&gt;SafeCommand&lt;/code&gt;. Depending on the situation, dynamic safety checking&#xA;&#x9;may also still be necessary. Even if it is, I like the inherent&#xA;&#x9;documentation-like quality of the new type name and the named global instances.&#xA;&#x9;If you create a minimal package such that all callers are outside the package,&#xA;&#x9;you may be able to leave the dynamic check out.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This way of doing things is a bit outside the Go cultural norm, but I hope&#xA;&#x9;it‚Äôs not too far outside.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Replace What Comments With Names&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Type names, variable names, function names, and so on (identifiers) are all&#xA;&#x9;documentation. Many or most what comments are obviated by carefully chosen,&#xA;&#x9;meaningful identifiers. This is the Javadoc problem: Most Javadoc tediously&#xA;&#x9;repeats information that is already present in the identifiers themselves.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What comments are the most likely to get out of sync with the actual code,&#xA;&#x9;which is often worse than not having comments at all. Readers easily get&#xA;&#x9;confused as to whether the comment or the code is correct, especially in the&#xA;&#x9;absence of tests.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I often see long functions broken up into sections headed with what comments.&#xA;&#x9;It‚Äôs often better to replace the sections with calls to smaller (usually)&#xA;&#x9;private functions that do the job, and whose names do the work of the what&#xA;&#x9;comment.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Code full of what comments, like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;func DownloadAndVerifyThing(path string) error {&#xA;&#x9;// Build the URL for the thing&#xA;&#x9;...&#xA;&#xA;&#x9;// Fetch the URL&#xA;&#x9;...&#xA;&#xA;&#x9;// Now verify the file&#xA;&#x9;...&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;can become:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;func DownloadAndVerifyThing(path string) error {&#xA;&#x9;url := buildURL(path)&#xA;&#x9;pathname, err := fetchURL(url)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return error&#xA;&#x9;}&#xA;&#x9;return verifyFile(pathname)&#xA;}&#xA;&#xA;func buildURL(path string) *URL {&#xA;&#x9;return &amp;amp;URL{&#xA;&#x9;&#x9;...&#xA;&#x9;}&#xA;}&#xA;&#xA;func fetchURL(u *URL) (string, error) {&#xA;&#x9;...&#xA;}&#xA;&#xA;func verifyFile(pathname string) error {&#xA;&#x9;...&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, &lt;code&gt;DownloadAndVerifyThing&lt;/code&gt; is shorter, contains less state, and&#xA;&#x9;is more obviously a composition of several tasks.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Explain Why Thoroughly&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Depending on the situation, there may be many questions starting with ‚ÄúWhy?‚Äù&#xA;&#x9;that the reader of your code might have. Try to anticipate and answer them. Here&#xA;&#x9;are some ideas:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#x9;&lt;li&gt;Why is it necessary?&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Why is it implemented this way and not in some other way?&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Why is it so complicated? Are all these special cases/fancy&#xA;&#x9;&#x9;algorithms/complex data structures necessary?&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Why is it so simple? Don‚Äôt we need high efficiency/to handle more error&#xA;&#x9;&#x9;conditions/to be more generic/et c.?&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Why is it here and not somewhere else?&lt;/li&gt;&#xA;&#x9;&lt;li&gt;Why is it important to fix/refactor/change/not change?&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
      <author>Chris Palmer</author>
      <guid>2023/08/27/comments/index.html</guid>
      <pubDate>Sun, 27 Aug 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Ergonomics, Resource Lifetimes, And Object Graphs</title>
      <link>https://noncombatant.org/2023/05/29/complexities-of-allocation/index.content</link>
      <description>&lt;h1&gt;Ergonomics, Resource Lifetimes, And Object Graphs&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;29 May 2023&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is a smol thought on how resource acquisition and release strategies&#xA;affect the ergonomics of object lifetimes and the complexity of object graphs.&#xA;&lt;i&gt;Resource&lt;/i&gt; generally means any or all of: memory, objects, files, locks,&#xA;sockets, et c.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Whenever a program requires complex object graphs, complex lifetimes, or&#xA;deterministic release of resources, but the language does not make those things&#xA;ergonomic to express, bugs will inevitably ensue. Examples include (but are not&#xA;limited to) trying to manage cyclic graphs with &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization&#34;&gt;RAII&lt;/a&gt;&#xA;(e.g. classic HTML DOM and JavaScript binding implementations); any language&#xA;with explicit release (e.g. any C program that allocates on the heap, opens&#xA;files, or holds locks); and programs for which deterministic resource release is&#xA;critical to correctness but when automatic release is non-deterministic (e.g.&#xA;Java‚Äôs &lt;code&gt;finalize&lt;/code&gt;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The kinds of bugs you might ‚Äòenjoy‚Äô if your language cannot ergonomically&#xA;express the relationships between your resources vary according to the kinds of&#xA;resources you need to acquire and release. Examples:&lt;/p&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;&lt;dt&gt;memory&lt;/dt&gt; &lt;dd&gt;Space inefficiency; use-after-free bugs&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;locks&lt;/dt&gt; &lt;dd&gt;Deadlocks; time inefficiency (holding a lock too long);&#xA;forgetting to release a lock&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;files and handles&lt;/dt&gt; &lt;dd&gt;File descriptor and handle exhaustion due to&#xA;keeping them open too long; data loss due to failing to synchronize a write&#xA;before program exit&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://noncombatant.org/2016/01/30/everyone-needs-secure-usability/&#34;&gt;Everyone&#xA;needs secure usability&lt;/a&gt;, if we hope to consistently produce correct and safe&#xA;software.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For simple examples of what I mean by these strategies (except for GC, which&#xA;hopefully everyone is familiar with from experience in Go, Python, Java, et c.;&#xA;and global static analysis, which you can read about &lt;a&#xA;href=&#34;https://doc.rust-lang.org/1.8.0/book/references-and-borrowing.html&#34;&gt;as it&#xA;is used in Rust&lt;/a&gt;), see &lt;a href=&#34;examples.cc&#34;&gt;examples.cc&lt;/a&gt;. These examples&#xA;use memory as the resource, but keep in mind the same idea applies to other&#xA;kinds of resources.&lt;/p&gt;&#xA;&#xA;&lt;table&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;th&gt;Allocation Strategy&lt;/th&gt;&#xA;&lt;th&gt;Brief Characterization&lt;/th&gt;&#xA;&lt;th&gt;Ergonomic For Lifetimes&lt;/th&gt;&#xA;&lt;th&gt;Ergonomic for Object Graph Complexities&lt;/th&gt;&#xA;&lt;th&gt;Guarantee Of Resource Release&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;caller acquires, caller releases implicitly&lt;/td&gt;&#xA;&lt;td&gt;Static or stack storage, released on termination or &lt;code&gt;return&lt;/code&gt;&#xA;(respectively)&lt;/td&gt;&#xA;&lt;td&gt;static, stack-local&lt;/td&gt;&#xA;&lt;td&gt;plain old data (no references); or possible references to objects of same or&#xA;longer lifetimes&lt;/td&gt;&#xA;&lt;td&gt;typically deterministic&lt;sup&gt;‚Ä†&lt;/sup&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;caller acquires, caller releases explicitly&lt;/td&gt;&#xA;&lt;td&gt;Heap or other external resource released with an explicit call&#xA;(&lt;code&gt;free&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;, et c.)&lt;/td&gt;&#xA;&lt;td&gt;not ergonomic&lt;sup&gt;Ôºä&lt;/sup&gt;&lt;/td&gt;&#xA;&lt;td&gt;not ergonomic&lt;/td&gt;&#xA;&lt;td&gt;deterministic; subject to programmer error&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;callee acquires, caller releases implicitly&lt;/td&gt;&#xA;&lt;td&gt;Types (e.g. &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;vector&lt;/code&gt;, &lt;a&#xA;href=&#34;https://en.cppreference.com/w/cpp/thread/scoped_lock&#34;&gt;&lt;code&gt;scoped_lock&lt;/code&gt;&lt;/a&gt;,&#xA;et c.) that manage resources internally and release them in their destructors,&#xA;which are implicitly called at the end of the scope&lt;/td&gt;&#xA;&lt;td&gt;static, stack-local&lt;/td&gt;&#xA;&lt;td&gt;acyclic graph; possible references to objects of same or longer&#xA;lifetimes&lt;/td&gt;&#xA;&lt;td&gt;typically deterministic&lt;sup&gt;‚Ä†&lt;/sup&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;callee acquires, caller releases explicitly&lt;/td&gt;&#xA;&lt;td&gt;Functions and types that wrap resource acquisition but still require&#xA;explicit release, e.g. &lt;code&gt;asprintf&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt;, &lt;a&#xA;href=&#34;https://www.gnu.org/software/libc/manual/html_node/Controlling-Buffering.html#index-setvbuf&#34;&gt;&lt;code&gt;setvbuf&lt;/code&gt;&lt;/a&gt;,&#xA;&lt;code&gt;open&lt;/code&gt;/&lt;code&gt;close&lt;/code&gt;, et c.&lt;/td&gt;&#xA;&lt;td&gt;not ergonomic&lt;sup&gt;Ôºä&lt;/sup&gt;&lt;/td&gt;&#xA;&lt;td&gt;not ergonomic&lt;/td&gt;&#xA;&lt;td&gt;deterministic&lt;sup&gt;‚Ä°&lt;/sup&gt;; subject to programmer error&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;anyone acquires, anyone releases when ref count is 0&lt;/td&gt;&#xA;&lt;td&gt;Reference-counting smart pointers, like &lt;code&gt;shared_ptr&lt;/code&gt;, &lt;a&#xA;href=&#34;https://doc.rust-lang.org/std/rc/struct.Rc.html&#34;&gt;&lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt;, and&#xA;&lt;a&#xA;href=&#34;https://doc.rust-lang.org/std/sync/struct.Arc.html&#34;&gt;&lt;code&gt;Arc&lt;/code&gt;&lt;/a&gt;.&lt;/td&gt;&#xA;&lt;td&gt;any&lt;/td&gt;&#xA;&lt;td&gt;acyclic graph; possible references to objects of same or longer&#xA;lifetimes&lt;/td&gt;&#xA;&lt;td&gt;typically deterministic when thread-local; subject to leaks via cyclic&#xA;references&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;anyone acquires, global garbage collection&lt;/td&gt;&#xA;&lt;td&gt;Languages with a garbage collector in its runtime, such as Lisp, JavaScript,&#xA;Python, Go, et c.&lt;/td&gt;&#xA;&lt;td&gt;any&lt;/td&gt;&#xA;&lt;td&gt;arbitrary graph of objects of arbitrary lifetimes&lt;/td&gt;&#xA;&lt;td&gt;non-deterministic; subject to leaks if program terminates before collection&#xA;completes&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;anyone acquires, global static analysis ensures implicit release&lt;/td&gt;&#xA;&lt;td&gt;Languages that statically analyze explicit and/or deduced lifetime&#xA;annotations that become part of an object‚Äôs type (see e.g. &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Substructural_type_system#Linear_type_systems&#34;&gt;linear&#xA;typing&lt;/a&gt;).&lt;/td&gt;&#xA;&lt;td&gt;inversely proportional to the complexity of entangled lifetimes&lt;/td&gt;&#xA;&lt;td&gt;arbitrary graph of objects with references to objects of same or longer&#xA;lifetimes&lt;/td&gt;&#xA;&lt;td&gt;typically deterministic when thread-local&lt;sup&gt;‚Ä†&lt;/sup&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;small&gt;&#xA;&#xA;&lt;p&gt;‚Ä† Although one can imagine implicit but non-deterministic release, I don‚Äôt&#xA;know of a language that has it in a static or stack-local context (but see GC).&#xA;RAII is the generalized form of these strategies.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;‚Ä° Go‚Äôs &lt;code&gt;defer&lt;/code&gt; is a special case: an explicit expression of&#xA;non-deterministic release.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Ôºä Arena acquisition and release (when resources acquired during a given&#xA;epoch are released together) can ease the difficulty that arises when objects of&#xA;different lifetimes become entangled in a graph. The costs are that resource&#xA;release within an arena might not be deterministic, and that some resources may&#xA;have longer lifetimes than strictly necessary.&lt;/p&gt;&#xA;&#xA;&lt;/small&gt;&#xA;&#xA;&lt;aside&gt;&#xA;&#xA;&lt;p&gt;Thanks to David Adrian and Jon Callas for reading earlier drafts of this post&#xA;and nudging me to make it less unclear. If it‚Äôs still too gnomic, drop me a&#xA;line. ‚ò∫Ô∏è&lt;/p&gt;&#xA;&#xA;&lt;/aside&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2023/05/29/complexities-of-allocation/index.html</guid>
      <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Protel, SOS, And The DMS-100</title>
      <link>https://noncombatant.org/2023/05/21/protel-sos-dsm-100/index.content</link>
      <description>&lt;h1&gt;Protel, SOS, And The DMS-100&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;21 May 2023&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Protel&#34;&gt;Protel&lt;/a&gt;, the The PRocedure&#xA;   Oriented Type Enforcing Language, and the operating system SOS (for the Digital&#xA;   Multiplex Switch, DMS-100) that was built with it, give us an interesting&#xA;   snapshot of the early history of software engineering (as opposed to&#xA;   programming, and as opposed to computing science: programming integrated over&#xA;   time). Naturally, my focus is on the safety affordances of the language, but the&#xA;   Nortel engineers had a whole lot of modern design going on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The language was in use starting in 1975, so it‚Äôs almost as old as C, and&#xA;   also used for systems programming. It‚Äôs a familiar ALGOL derivative. The&#xA;   official papers I could find (so far) are short and serve only to tantalize:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;   &lt;li&gt;&lt;a href=&#34;https://ieeexplore.ieee.org/document/762490&#34;&gt;Protel: a high level&#xA;         language for telephony&lt;/a&gt; by Foxall, Joliat, Kamel, and Miceli, 1979&lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.5555/800078.802525&#34;&gt;Experience With A&#xA;         Modular Typed Language: Protel&lt;/a&gt; by Cashin, Joliat, Kamel, and Lasker (&lt;a&#xA;         href=&#34;cashin-experience-with-protel.pdf&#34;&gt;local copy&lt;/a&gt;), 1981&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I also found some useful reminiscences from a former Nortel engineer, Frazer&#xA;   Clement:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;   &lt;li&gt;&lt;a href=&#34;https://messagepassing.blogspot.com/2009/04/protel-i.html&#34;&gt;Protel&#xA;         I&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&lt;a href=&#34;https://messagepassing.blogspot.com/2009/04/protel-ii.html&#34;&gt;Protel&#xA;         II&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&lt;a href=&#34;https://messagepassing.blogspot.com/2008/12/what-is-sos.html&#34;&gt;What&#xA;         Is SOS?&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&lt;a href=&#34;https://messagepassing.blogspot.com/2009/01/what-is-sos-part-ii.html&#34;&gt;What&#xA;         Is SOS? Part II&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&lt;a href=&#34;https://messagepassing.blogspot.com/2009/03/what-is-sos-part-iii.html&#34;&gt;What&#xA;         Is SOS? Part III&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;There are more (offline, sadly) citations at &lt;a href=&#34;https://museum.eecs.yorku.ca/collections/show/18&#34;&gt;The York&#xA;      University&#xA;      Computer Museum&lt;/a&gt;. Searching the web for some of the citations can get you&#xA;   closer, but the holy grails that I haven‚Äôt found yet are H. Johnson, ‚ÄúPROTEL: A&#xA;   programming Language for Large Real-Time Applications‚Äù (1984); and &lt;i&gt;Protel&#xA;      Technical Notes, BNR, Language Development Group&lt;/i&gt;; issues: vol. 1, nr. 1 ‚Äì 7,&#xA;   1980.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The broad view these sources provide of Protel and SOS is of a type-checked&#xA;   and spatially memory-safe systems programming language, compiled into&#xA;   dynamically linkable and swappable shared objects, which all run as real-time,&#xA;   pre-emptively scheduled threads in a single shared address space.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The systems ran with volatile storage as their primary storage, rather than&#xA;   treating volatile storage as a fast cache for non-volatile storage. Instead,&#xA;   production systems had redundant power supplies and battery-backed power, and&#xA;   used an explicit delineation of memory types for reliability and recovery.&#xA;   Certain memories were explicitly temporary, while others would be restored from&#xA;   disk or tape only in escalated outages. See &lt;a&#xA;      href=&#34;https://messagepassing.blogspot.com/2008/12/what-is-sos.html&#34;&gt;Clement,&#xA;      especially ‚ÄúMultiple memory types‚Äù&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Protel‚Äôs type system was somewhat richer than C; from Foxall, et al.:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;   &lt;pre&gt;&#xA;TYPE digit-value, terminal-id {0 TO 9}&#xA;    status_condition {busy, idle, blocked, ready},&#xA;    out_of_service BOOL,&#xA;    protocol_ptr PTR TO status_condition;&#xA;&#xA;TYPE digit_register TABLE [0 TO 19] OF digit_value,&#xA;    special_feature SET {abbreviated_dial, add_on,&#xA;                  call_transfer, do_not_disturb},&#xA;    time_interval&#xA;       STRUCT&#xA;          amount {0 TO 255},&#xA;          unit {ten_ms, secs, mins, hours}&#xA;       ENDSTRUCT;&#xA;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I find ranged integers notable; &lt;a href=&#34;https://github.com/google/integers/blob/main/ranged.h&#34;&gt;even now, we have&#xA;      to roll our own&lt;/a&gt;, but I suspect their ergonomic definition could have&#xA;   prevented many bugs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Foxall, et al. describe descriptors:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;A descriptor consists of two parts: a descriptor part and a table&#xA;   part. The descriptor part contains the table element count, the size of these&#xA;   elements, and a pointer to the base of the table part. The table part contains&#xA;   the elements of the current array. At execution time a descriptor may be made to&#xA;   point at any table of the correct type. This results in modification of the&#xA;   element count and pointer fields of the descriptor part.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The area type seems to provide a form of abstract class inheritance via&#xA;   C-&lt;code&gt;union&lt;/code&gt;-like structured type punning:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;   &lt;pre&gt;&#xA;TYPE daddy AREA (6 * byte-width)&#xA;   i integer&#xA;ENDAREA;&#xA;&#xA;TYPE son AREA REFINES daddy&#xA;   t TABLE [0 TO 15] OF BOOL&#xA;ENDAREA;&#xA;&#xA;TYPE daughter AREA REFINES daddy&#xA;   j integer,&#xA;   k BOOL&#xA;ENDAREA;&#xA;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I don‚Äôt see discussion of down-casting safety with areas, though. As for C&#xA;   &lt;code&gt;union&lt;/code&gt;s and C++ without RTTI, areas may be unsafe.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Protel also had function types:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;   &lt;pre&gt;&#xA;TYPE get_channel PROC (terminal terminal_id)&#xA;     RETURNS integer;&#xA;TYPE transfer PROC (REF t time_interval,&#xA;     UPDATES feature_table DESC OF BOOL);&#xA;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h2&gt;Early Modern Engineering&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Although that method of operation is different from what we use now, we can&#xA;   see from these sources that Protel, SOS, and the DMS-100 embodied very early&#xA;   forms of what we now consider a baseline for modern software engineering and&#xA;   site reliability engineering culture. Some examples:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;A complete suite of language support tooling (the Protel Library System, PLS&#xA;         and PLS-II), including &lt;a href=&#34;https://en.wikipedia.org/wiki/Source_Code_Control_System&#34;&gt;a source code&#xA;            control system (SCCS)&lt;/a&gt;/software configuration management system (SCM). From&#xA;         Cashin, et al.:&lt;/p&gt;&#xA;&#xA;      &lt;blockquote&gt;In a production environment, however, the need for parallel support&#xA;         of both old and new software is a fact of life. Therefore, a successor, PLS-II,&#xA;         was designed to simplify the handling of multiple versions of both source code&#xA;         and system structure. A tool called source manager, similar in spirit to SCCS&#xA;         [DHM 78], is used to simplify maintenance and reduce storage for nearly&#xA;         identical source versions. Compatible lineups of system versions are maintained&#xA;         in the PLS database which refers to the named issues kept by source&#xA;         manager.&lt;/blockquote&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;Recognition of interfaces as executable, enforceable documentation and&#xA;         automated discovery of dependencies at compile- and run-time (Cashin, et al.,&#xA;         ‚ÄúInterfaces as Documentation‚Äù).&lt;/p&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;Technical structures aligned with social structures (‚ÄúModularity as a&#xA;         Project Manager‚Äôs Tool‚Äù, Cashin et al.). This is perhaps more arguable and more&#xA;         fluid, now.&lt;/p&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;Recognition of the need to ‚Äòshift bugs left‚Äô, preferably discovering them&#xA;         during type-checking (Cashin, et al.):&lt;/p&gt;&#xA;&#xA;      &lt;blockquote&gt;By performing strict type checking on intermodule references, we&#xA;         have found that many of the errors which, in other languages, would have been&#xA;         detected at run time are flagged by the compiler. This permits easy repair early&#xA;         in the development process when bugs can be fixed cheaply.&lt;/blockquote&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;The familiar pain of long compilation times, exacerbated by thorough&#xA;         type checking, in section ‚ÄúBuilding Systems‚Äù, Cashin et al. But: ‚ÄúWe feel that&#xA;         the difficulty inherent in this process is preferable to the mammoth debugging&#xA;         sessions which are required when analogous changes are made to programs written&#xA;         in more loosely typed languages.‚Äù&#xA;      &lt;/p&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;Access control enforced by the type system (as seen in the JVM and the .NET&#xA;         CLR, for example) (Cashin, et al.):&lt;/p&gt;&#xA;&#xA;      &lt;blockquote&gt;We have found multiple interfaces to be an extremely useful concept.&#xA;         They allow the separation of module functions by user. Thus, functions intended&#xA;         for general users may be separated from those intended for more ‚Äòprivileged‚Äô&#xA;         users. For example, a file system may have a general user interface which&#xA;         supports operations such as &lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;CLOSE&lt;/code&gt;,&#xA;         &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt;. A second, more privileged, interface may&#xA;         support operations which are only used by maintenance and audit&#xA;         software.&#xA;      &lt;/blockquote&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;Dynamic configuration via function pointers (which Cashin, et al. call&#xA;         ‚Äúprocedure variables‚Äù; see ‚ÄúModularity&#xA;         as a Tool for Flexible Configuration‚Äù). This includes the possibility of&#xA;         selecting implementations at run-time:&lt;/p&gt;&#xA;&#xA;      &lt;blockquote&gt;Since interface specifications allow a clear distinction between&#xA;         what a module provides and how it provides it, it is possible to design a single&#xA;         interface and several implementations for the same module. Any of these&#xA;         implementations can then be used transparently in different system&#xA;         configurations.&lt;/blockquote&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;Recognition of the complexity of dependency management, even in purely&#xA;         1st-party codebases (see ‚ÄúType Transitivity‚Äù in Cashin, et al.).&lt;/p&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;An early form of &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;.&#xA;         From ‚ÄúConfiguration Control‚Äù in Cashin, et al.:&lt;/p&gt;&#xA;&#xA;      &lt;blockquote&gt;A version code consists of two parts: A major number that is&#xA;         incremented when non-upwards compatible changes are made and a minor number&#xA;         incremented when upwards compatible changes are made. Many, but by no means all,&#xA;         interface changes are upwards compatible. The check used for consistency is as&#xA;         follows: when a module is loaded, the major number of each module in its&#xA;         &lt;code&gt;USES&lt;/code&gt; list is compared with that of the version of the module&#xA;         already existing in the system. If they are not equal, the configuration is&#xA;         inconsistent. If they are, then compare the minor numbers. If the minor number&#xA;         in the &lt;code&gt;USES&lt;/code&gt; list is greater than that of an existing module then it&#xA;         is possible that the module to be loaded relies on features not yet implemented&#xA;         in the existing module and the configuration is inconsistent.&#xA;      &lt;/blockquote&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;Early understanding of &lt;a href=&#34;https://www.hyrumslaw.com/&#34;&gt;Hyrum‚Äôs&#xA;            Law&lt;/a&gt;. From Cashin, et al.: ‚ÄúAlthough implementation sections are hidden from&#xA;         the outside world, there is a fundamental problem in ensuring that an&#xA;         implementation change has not altered the semantics of the interface, even when&#xA;         there is no direct change to the interface itself. The detailed implications of&#xA;         changes to all users requires careful consideration which is not encouraged by&#xA;         the knowledge that most changes really are well hidden and do not compromise&#xA;         system integrity.‚Äù&lt;/p&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;The &lt;code&gt;DESC&lt;/code&gt; (‚Äúdescriptor‚Äù) type was what we now call&#xA;         &lt;code&gt;span&lt;/code&gt; or &lt;code&gt;slice&lt;/code&gt;: A pointer to a (sub-)region of&#xA;         elements, together with the number of elements in that (sub-)region. This&#xA;         provided spatial safety ‚Äî¬†the bounds were checked. They also recognized that&#xA;         built-in mechanisms for safety can yield efficiency improvements. From&#xA;         Clement:&#xA;      &lt;/p&gt;&#xA;&#xA;      &lt;blockquote&gt;A Protel &lt;code&gt;DESC&lt;/code&gt;riptor is used to refer to a range of&#xA;         elements in an array of &amp;lt;type&amp;gt;. It is used in the same way [as] an array ‚Äî&#xA;         with a subs[c]ript as an lvalue or rvalue to an expression (though the usual&#xA;         meaning of those terms is confused by &lt;a href=&#34;https://en.wikipedia.org/wiki/Protel#GAZINTA&#34;&gt;the Gozinta&#xA;            operator&lt;/a&gt;!).&#xA;         The compiler is aware of the of the slice being &lt;code&gt;DESC&lt;/code&gt;ribed, and by&#xA;         inference the size of the elements. In the storage allocated to the&#xA;         &lt;code&gt;DESC&lt;/code&gt; itself, it stores a pointer to the zeroth element and an&#xA;         upperbound in terms of elements. In this way it can provide bounds checking on&#xA;         accesses through the &lt;code&gt;DESC&lt;/code&gt;. When an out-of-bounds exception is hit,&#xA;         the actual upperbound and the supplied subscript are available in the exception&#xA;         report, often allowing debugging straight from the trace. The array slice&#xA;         abstraction can be a nice way to deal with zero-copy in a protocol&#xA;         stack.&#xA;      &lt;/blockquote&gt;&#xA;&#xA;      &lt;p&gt;Thus it would seem that Canadian telecommunications systems programming&#xA;         language designers were, as usual, more polite than their cousins a little to&#xA;         the south.&lt;/p&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;   &lt;li&gt;&#xA;      &lt;p&gt;An A/B update scheme not entirely unlike what we now use in e.g. Android&#xA;         and ChromiumOS; see &lt;a href=&#34;https://messagepassing.blogspot.com/2009/03/what-is-sos-part-iii.html&#34;&gt;the&#xA;            ‚ÄúOne Night(mare) Process‚Äù in Clement&lt;/a&gt;.&lt;/p&gt;&#xA;   &lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;Musings&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I used to think (&lt;a href=&#34;https://en.wikipedia.org/wiki/Singularity_(operating_system)#Security_design&#34;&gt;and&#xA;      so did the designers of Microsoft‚Äôs Singularity operating system&lt;/a&gt;, so at&#xA;   least I was in good company) that language safety could obviate protected memory&#xA;   (as mediated by a privileged supervisor). Clearly, the SOS designers were hoping&#xA;   for that, too, and like the Singularity designers they really wanted to get rid&#xA;   of the overhead of context switching and virtual memory. (The overhead is&#xA;   amazingly high! We‚Äôve just come to accept it as normal, which really &lt;a&#xA;      href=&#34;https://alexgaynor.net/2019/apr/21/modern-c++-wont-save-us/&#34;&gt;puts&#xA;      micro-performance concerns into perspective&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Similarly, &lt;a href=&#34;https://www.usenix.org/conference/enigma2021/presentation/palmer&#34;&gt;it‚Äôs&#xA;      obvious (even to me) now&lt;/a&gt; that memory protection alone can never suffice:&#xA;   untrustworthy programs can call and corrupt a program even from outside its&#xA;   protection zone (and even, of course, from other machines entirely). Add to that&#xA;   side-channels and the practical difficulty of maximally reducing the privilege&#xA;   of programs in real-world systems, and you have a recipe for sadness.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Having no memory protection does make language safety paramount ‚Äî¬†clearly, we&#xA;   must have at least one of language safety and protected memory. But we also know&#xA;   that there will always be unavoidable zones of language un-safety, even if they&#xA;   are few and small. (Although it‚Äôs worth noting that, according to Foxall, et&#xA;   al., ‚ÄúFurthermore, it was decided that PROTEL should be the only implementation&#xA;   language ‚Äî no assembly language was provided for DMS-100.‚Äù) In the end, even&#xA;   Singularity had to provide virtual memory protection. I do think, though, that&#xA;   strong language safety provides trustworthiness that can allow us to reduce the&#xA;   proliferation of memory protected address spaces, and hence to regain some&#xA;   efficiency.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here‚Äôs a simple example of scripting in the DMS-100 shell ‚Äî¬†it was still in&#xA;   use at least as late as 2012:&lt;/p&gt;&#xA;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6r151EuVlfQ&#34; title=&#34;YouTube video player&#34;&#xA;   frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay;&#xA;clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;p&gt;And, finally, your moment of Zen (Cashin, et al.):&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;Rather than increasing complexity by allowing module nesting as in&#xA;   ADA, our experience leads us to believe that even our current structure may be&#xA;   more complex than necessary. Instead, it may be sufficient to have a structure&#xA;   consisting of a linear chain of interface sections and a single implementation&#xA;   section. This would increase the efficiency of the support system since symbolic&#xA;   information would no longer need to be placed in implementation section object&#xA;   files thus eliminating the need for a linker.&lt;/blockquote&gt;</description>
      <author>Chris Palmer</author>
      <guid>2023/05/21/protel-sos-dsm-100/index.html</guid>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>size_t Is Not int</title>
      <link>https://noncombatant.org/2023/02/12/int-size-t/index.content</link>
      <description>&lt;h1&gt;&lt;code&gt;size_t&lt;/code&gt; Is Not &lt;code&gt;int&lt;/code&gt;&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;12 February 2023&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Update, 13 February:&lt;/b&gt; I made an amusing and instructive error, detailed&#xA;  below!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Many C and C++ programmers write code as if they believe that&#xA;  &lt;code&gt;size_t&lt;/code&gt; is a &lt;code&gt;typedef&lt;/code&gt; for, or otherwise equivalent to,&#xA;  &lt;code&gt;signed int&lt;/code&gt;. Such code is unnecessarily buggy and unsafe, because&#xA;  that belief is not true. It never could have been true, and never has been. Yet&#xA;  classes of bugs are pervasive because the false belief persists.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Definitions&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Let‚Äôs look at the first real C standard, C89. (Well, &lt;a href=&#34;https://port70.net/~nsz/c/c89/c89-draft.html&#34;&gt;a copy of&#xA;    the draft&lt;/a&gt;,&#xA;  since that‚Äôs all we can get for free.) Modern C and C++ standards documents&#xA;  state matters somewhat more completely (and sometimes more clearly), but I want&#xA;  to show that the distinction between &lt;code&gt;size_t&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt;&#xA;  goes back 2 generations. In any case it is fair to say that code written after&#xA;  1989 must show awareness of this crucial distinction.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://port70.net/~nsz/c/c89/c89-draft.html#4.1.5&#34;&gt;Section&#xA;    4.1.5&lt;/a&gt; defines the type &lt;code&gt;size_t&lt;/code&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&lt;code&gt;size_t&lt;/code&gt;[,] which is the unsigned integral type of the&#xA;  result of the &lt;code&gt;sizeof&lt;/code&gt; operator;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://port70.net/~nsz/c/c89/c89-draft.html#3.3.3.4&#34;&gt;Section&#xA;    3.3.3.4, The &lt;code&gt;sizeof&lt;/code&gt; operator&lt;/a&gt;, explains what &lt;code&gt;sizeof&lt;/code&gt;&#xA;  is all about:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;  &lt;p&gt;The &lt;code&gt;sizeof&lt;/code&gt; operator yields the size (in bytes) of its operand,&#xA;    which may be an expression or the parenthesized name of a type. The size is&#xA;    determined from the type of the operand, which is not itself evaluated. The&#xA;    result is an integer constant.&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;[...] When applied to an operand that has array type, the result is the total&#xA;    number of bytes in the array. When applied to an operand that has structure or&#xA;    union type, the result is the total number of bytes in such an object, including&#xA;    internal and trailing padding.&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;The value of the result is implementation-defined, and its type (an unsigned&#xA;    integral type) is &lt;code&gt;size_t&lt;/code&gt; defined in the &amp;lt;stddef.h&amp;gt;&#xA;    header.&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;[...] A principal use of the &lt;code&gt;sizeof&lt;/code&gt; operator is in communication&#xA;    with routines such as storage allocators and I/O systems. A storage-allocation&#xA;    function might accept a size (in bytes) of an object to allocate and return a&#xA;    pointer to void. For example:&lt;/p&gt;&#xA;&#xA;  &lt;pre&gt;&#xA;extern void *alloc();&#xA;double *dp = alloc(sizeof *dp);&#xA;&lt;/pre&gt;&#xA;&#xA;  &lt;p&gt;[...] Another use of the &lt;code&gt;sizeof&lt;/code&gt; operator is to compute the&#xA;    number of members in an array:&lt;/p&gt;&#xA;&#xA;  &lt;pre&gt;&#xA;sizeof array / sizeof array[0]&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In the example, &lt;code&gt;alloc&lt;/code&gt; is a hypothetical memory allocation&#xA;  function, but we find also that C89‚Äôs actual allocation functions,&#xA;  &lt;code&gt;calloc&lt;/code&gt;, &lt;code&gt;malloc&lt;/code&gt;, and &lt;code&gt;realloc&lt;/code&gt;, also use&#xA;  &lt;code&gt;size_t&lt;/code&gt; for their size arguments&lt;a id=&#34;fn1_back&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn1&#34;&gt;‚ë†&lt;/a&gt;. For example, from &lt;a&#xA;    href=&#34;https://port70.net/~nsz/c/c89/c89-draft.html#4.10.3.3&#34;&gt;section&#xA;    4.10.3.3&lt;/a&gt;:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;pre&gt;&#xA;void *malloc(size_t size);&#xA;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;and similarly, &lt;a href=&#34;https://port70.net/~nsz/c/c89/c89-draft.html#4.10.3.1&#34;&gt;&lt;code&gt;calloc&lt;/code&gt;&#xA;    is defined as&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;pre&gt;&#xA;void *calloc(size_t nmemb, size_t size);&#xA;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Although &lt;a href=&#34;https://port70.net/~nsz/c/c89/c89-draft.html#3.3.2.1&#34;&gt;section 3.3.2.1,&#xA;    Array subscripting&lt;/a&gt;, says only vaguely that a subscript of an array ‚Äúshall&#xA;  have integral type‚Äù, we know from the above that that integral type must&#xA;  ultimately be &lt;code&gt;size_t&lt;/code&gt;. This is for 2 reasons.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, &lt;code&gt;size_t&lt;/code&gt; must be an unsigned integral value with the width&#xA;  of a machine word, so that it can be possible for a C program to index any&#xA;  position in the machine‚Äôs address space. (See &lt;a href=&#34;#practical-implications&#34;&gt;Practical Implications&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Second, since it‚Äôs unsigned, &lt;code&gt;size_t&lt;/code&gt; may have twice (or more) the&#xA;  positive range of a &lt;code&gt;signed int&lt;/code&gt;. So if the subscript type were&#xA;  &lt;code&gt;signed int&lt;/code&gt;, it might be possible to allocate (using&#xA;  &lt;code&gt;size_t&lt;/code&gt;) an array with more elements than can be indexed (using&#xA;  &lt;code&gt;int&lt;/code&gt;).&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Therefore, we must conclude that &lt;code&gt;size_t&lt;/code&gt; is the only correct&#xA;    type for all sizes, lengths, object counts, and indices/subscripts.&lt;/b&gt; C89 and&#xA;  its standard library use it pervasively for these purposes; not just in&#xA;  allocation functions but in functions like &lt;code&gt;strlen&lt;/code&gt;,&#xA;  &lt;code&gt;memset&lt;/code&gt;, &lt;code&gt;memcpy&lt;/code&gt; ‚Äî¬†&lt;a href=&#34;https://port70.net/~nsz/c/c89/c89-draft.html#A.3.12&#34;&gt;all those old&#xA;    friends&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;a id=&#34;practical-implications&#34;&gt;&lt;/a&gt;&#xA;&lt;h2&gt;Practical Implications&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I have a 64-bit machine with 32 GiB of memory. On this system,&#xA;  &lt;code&gt;int&lt;/code&gt; is 32 bits and &lt;code&gt;size_t&lt;/code&gt; is 64. Using C++ to get&#xA;  access to &lt;code&gt;std::is_signed&lt;/code&gt;, we see:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;% &lt;b&gt;cat &lt;a href=&#34;types.cc&#34;&gt;types.cc&lt;/a&gt;&lt;/b&gt;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;limits&amp;gt;&#xA;#include &amp;lt;type_traits&amp;gt;&#xA;&#xA;using namespace std;&#xA;&#xA;int main() {&#xA;  constexpr bool is_int_signed = is_signed&amp;lt;int&amp;gt;::value;&#xA;  printf(&#34;sizeof(int): %zu; signed: %d\n&#34;, sizeof(int), is_int_signed);&#xA;  printf(&#34;largest int value: %d\n&#34;, numeric_limits&amp;lt;int&amp;gt;::max());&#xA;&#xA;  constexpr bool is_uint_signed = is_signed&amp;lt;unsigned&amp;gt;::value;&#xA;  printf(&#34;sizeof(unsigned): %zu; signed: %d\n&#34;, sizeof(unsigned), is_uint_signed);&#xA;  printf(&#34;largest unsigned value: %u\n&#34;, numeric_limits&amp;lt;unsigned&amp;gt;::max());&#xA;&#xA;  constexpr bool is_size_t_signed = is_signed&amp;lt;size_t&amp;gt;::value;&#xA;  printf(&#34;sizeof(size_t): %zu; signed: %d\n&#34;, sizeof(size_t), is_size_t_signed);&#xA;  printf(&#34;largest size_t value: %zu\n&#34;, numeric_limits&amp;lt;size_t&amp;gt;::max());&#xA;}&#xA;% &lt;b&gt;make types &amp;&amp; ./types&lt;/b&gt;&#xA;clang++ -Weverything -Werror -std=c++20 types.cc -o types&#xA;sizeof(int): 4; signed: 1&#xA;largest int value: 2147483647&#xA;sizeof(unsigned): 4; signed: 0&#xA;largest unsigned value: 4294967295&#xA;sizeof(size_t): 8; signed: 0&#xA;largest size_t value: 18446744073709551615&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As you can see, if &lt;code&gt;malloc&lt;/code&gt; and friends took &lt;code&gt;int&lt;/code&gt;&#xA;  arguments, it would be possible to allocate only 2 GiB (2,147,483,647 bytes).&#xA;  Even if these functions took &lt;code&gt;unsigned int&lt;/code&gt; arguments, it would be&#xA;  possible to allocate only 4 GiB (4,294,967,295 bytes). For my fancy modern&#xA;  machine, these would be unacceptable limitations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On a 32-bit machine, which can only address 4 GiB, &lt;code&gt;size_t&lt;/code&gt; is&#xA;  indeed equivalent to &lt;code&gt;uint32_t int&lt;/code&gt;. But on a 64-bit machine,&#xA;  &lt;code&gt;size_t&lt;/code&gt; must be equivalent to &lt;code&gt;uint64_t&lt;/code&gt;, and so it is.&#xA;  That is why this works:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;% &lt;b&gt;cat &lt;a href=&#34;large.c&#34;&gt;large.c&lt;/a&gt;&lt;/b&gt;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &amp;lt;stdlib.h&amp;gt;&#xA;#include &amp;lt;string.h&amp;gt;&#xA;&#xA;int main() {&#xA;  size_t gib = 1 &amp;lt;&amp;lt; 30;&#xA;  size_t ten_gib = 10 * gib;&#xA;  printf(&#34;About to allocate %zu bytes\n&#34;, ten_gib);&#xA;  char* large = malloc(ten_gib);&#xA;  memset(large, &#39;A&#39;, ten_gib);&#xA;  printf(&#34;The last byte is: %c\n&#34;, large[ten_gib - 1]);&#xA;}&#xA;% &lt;b&gt;make large &amp;&amp; time ./large&lt;/b&gt;&#xA;clang -Weverything -Werror -std=c2x large.c -o large&#xA;About to allocate 10737418240 bytes&#xA;The last byte is: A&#xA;./large  2.49s user 3.40s system 90% cpu 6.540 total&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Even on a 32-bit machine, where &lt;code&gt;size_t&lt;/code&gt; is &lt;code&gt;uint32_t&lt;/code&gt;,&#xA;  i.e. there is no difference in width, the difference in signedness still&#xA;  matters. You might think that, on machines of this era, since the kernel used up&#xA;  half of the 4 GiB the address space and userland got the other half, it would be&#xA;  OK for &lt;code&gt;size_t&lt;/code&gt; to be a signed 32-bit type ‚Äî¬†you can only allocate at&#xA;  most 2 GiB anyway, right?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Well, no. First, it is possible, desirable, and commonplace for &lt;a&#xA;    href=&#34;https://www.kernel.org/doc/html/v5.0/vm/highmem.html&#34;&gt;the kernel to use 1&#xA;    GiB of the address space, leaving 3 GiB for userland&lt;/a&gt; on 32-bit systems. If&#xA;  you want to write a program to operate on 2.5 GiB of data, &lt;code&gt;size_t&lt;/code&gt;&#xA;  being unsigned makes that possible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Second, you might not be writing code for a traditional operating system that&#xA;  puts the kernel and userland in the same address space (albeit with different&#xA;  page protections). You might be writing code for a special system for which even&#xA;  the application runs in kernel mode and needs to access all 4 GiB of the address&#xA;  space. Again, &lt;code&gt;size_t&lt;/code&gt; being unsigned makes that possible.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Bugs&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Using &lt;code&gt;int&lt;/code&gt; as the type for sizes and subscripts would in&#xA;  principle lead not just to unnecessary limitations, but &lt;b&gt;actually does&lt;/b&gt;&#xA;  lead to unnecessary bugs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To see why and how, first remember that signed integer overflow is undefined&#xA;  behavior (UB) in C and C++. From &lt;a href=&#34;https://port70.net/~nsz/c/c89/c89-draft.html#A.6.2&#34;&gt;appendix 6.2&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;  &lt;p&gt;The behavior in the following circumstances is undefined:&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;[...]&lt;/p&gt;&#xA;&#xA;  &lt;li&gt;An arithmetic operation is invalid (such as division or modulus by 0) or&#xA;    produces a result that cannot be represented in the space provided (such as&#xA;    overflow or underflow) (3.3).&lt;/li&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;That is, an expression such as &lt;code&gt;INT_MAX + n&lt;/code&gt; (where &lt;var&gt;n&lt;/var&gt;&#xA;  is an &lt;code&gt;int&lt;/code&gt; greater than 0) has no particular meaning, and the&#xA;  compiler can therefore interpret it to mean anything. Usually this means the&#xA;  compiler will optimize away code that ‚Äòcannot‚Äô happen, or make other assumptions&#xA;  that might not match your own. Therefore, statements and expressions that&#xA;  exercise UB cannot in general be correct. Even if code with UB &lt;b&gt;appears&lt;/b&gt; to&#xA;  work, the people affected by that code are just getting lucky. For now. New&#xA;  inputs, or new compilers, might change the program‚Äôs behavior.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, in &lt;a href=&#34;https://port70.net/~nsz/c/c89/c89-draft.html#3.1.2.5&#34;&gt;section 3.1.2.5&lt;/a&gt;,&#xA;  C89 provides a carve-out for unsigned arithmetic:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;A computation involving unsigned operands can never overflow,&#xA;  because a result that cannot be represented by the resulting unsigned integer&#xA;  type is reduced modulo the number that is one greater than the largest value&#xA;  that can be represented by the resulting unsigned integer type.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;That is, arithmetic on unsigned types is modular arithmetic: &lt;code&gt;UINT_MAX&#xA;+ 1&lt;/code&gt; is defined to wrap back around to 0, like the odometer in a car.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This has important implications for correctness in memory allocation and&#xA;  subscripting. For example, this code has several bugs:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;  int count = ...;&#xA;&#xA;  // Implicit cast from `size_t` to `int`; possible (though not in this case)&#xA;  // truncation.&#xA;  int size = sizeof(Thing);&#xA;&#xA;  // The signed multiplication could overflow and is technically UB. If&#xA;  // you‚Äôre lucky, your implementation might define it to be modular, and&#xA;  // to wrap. But then you‚Äôre allocating a region that cannot hold `count`&#xA;  // `Thing`s ‚Äî¬†it will have wrapped around to a too-small value.&#xA;  //&#xA;  // In any case, the result of the multiplication is cast to `size_t` for&#xA;  // the call to `malloc`, which may result in &lt;a href=&#34;https://en.wikipedia.org/wiki/Sign_extension&#34;&gt;sign extension&lt;/a&gt;, which&#xA;  // might result in even more weirdness.&#xA;  Thing* things = malloc(count * size);  &#xA;&#xA;  // At this point, if the allocation succeeded and if `things` points to a&#xA;  // region of memory large enough to hold `count` `Thing`s, it‚Äôs pure luck.&#xA;  // This code is incorrect, even if it ‚Äòseems to work‚Äô.&#xA;&#xA;  for (int i = 0; i &amp;lt; count; i++) {&#xA;    things[i] = ...;&#xA;  }&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Code like this is widespread; I‚Äôve seen it in the wild many times. Especially&#xA;  when the value of &lt;code&gt;count&lt;/code&gt; and/or the data that get copied into&#xA;  &lt;code&gt;things&lt;/code&gt; come from an untrustworthy source (like the network), such&#xA;  code is often straightforwardly exploitable&lt;a id=&#34;fn2_back&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn2&#34;&gt;‚ë°&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can make code like this less incorrect by doing something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;#include &amp;lt;stdckdint.h&amp;gt;&#xA;&#xA;// ...&#xA;&#xA;  const size_t count = ...;&#xA;  const size_t size = sizeof(Thing);&#xA;  size_t total;&#xA;  if (ckd_mul(&amp;amp;total, count, size)) {&#xA;    return ENOMEM;&#xA;  }&#xA;  Thing* things = malloc(total);&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;ckd_mul&lt;/code&gt; is a standard C23 function that returns true if the&#xA;  multiplication overflowed. Yes, &lt;a&#xA;    href=&#34;https://gustedt.wordpress.com/2022/12/18/checked-integer-arithmetic-in-the-prospect-of-c23/&#34;&gt;C&#xA;    will introduce checked arithmetic in November 2023&lt;/a&gt;, 51 entire years after&#xA;  the language was born. Until then, you can (and should) use &lt;a&#xA;    href=&#34;https://clang.llvm.org/docs/LanguageExtensions.html#checked-arithmetic-builtins&#34;&gt;non-standard&#xA;    compiler intrinsics&lt;/a&gt;, or you can try to roll your own check:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;#include &amp;lt;stdbool.h&amp;gt;&#xA;#include &amp;lt;stddef.h&amp;gt;&#xA;&#xA;// &lt;b&gt;Update:&lt;/b&gt; This is wrong! See below.&#xA;bool check_mul(size_t* result, size_t x, size_t y) {&#xA;  size_t r = x * y;&#xA;  if (r &amp;lt; x || r &amp;lt; y) {&#xA;    return true;&#xA;  }&#xA;  *result = r;&#xA;  return false;&#xA;}&#xA;&#xA;// ...&#xA;&#xA;  const size_t count = ...;&#xA;  const size_t size = sizeof(Thing);&#xA;  size_t total = 0;&#xA;  if (check_mul(&amp;amp;total, count, size)) {&#xA;    return ENOMEM;&#xA;  }&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;s&gt;Note that you &lt;b&gt;must&lt;/b&gt; use unsigned types in functions like&#xA;    &lt;code&gt;check_mul&lt;/code&gt; above! (I.e. the ‚Äòcheck if result was smaller‚Äô&#xA;    style.)&lt;/s&gt; If you use signed types, the multiplication may overflow and will&#xA;  thus be undefined, and the compiler will therefore typically assume that&#xA;  overflow cannot happen. Then it will likely ‚Äòoptimize‚Äô the code by removing your&#xA;  ‚Äòdead‚Äô &lt;code&gt;if&lt;/code&gt; block ‚Äî¬†removing your safety check.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; Inevitably, sigh üòÖ, I got this wrong, which I would have&#xA;  noticed if I had done an exhaustive check of &lt;code&gt;uint32_t&lt;/code&gt; as I did for&#xA;  another problem, below. (There‚Äôs a lesson there!) Jann Horn points out that ‚Äúyou&#xA;  can get a multiplication overflow and still have a result that is bigger than&#xA;  the two operands‚Äù, e.g. 0x10000 * 0x11000 = 0x110000000. Thank you, Jann! Let‚Äôs&#xA;  stick with stdckdint.h or compiler intrinsics.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you need to check signed arithmetic, you must check limits before doing&#xA;  the potentially undefined operation. For example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;#include &amp;lt;stdbool.h&amp;gt;&#xA;#include &amp;lt;stddef.h&amp;gt;&#xA;&#xA;bool checked_mul(int* result, int x, int y) {&#xA;  if (x == 0 || y == 0) {&#xA;    *result = 0;&#xA;    return false;&#xA;  }&#xA;  if (x &amp;lt; 0 || y &amp;lt; 0) {&#xA;    // TODO: You have even more work to do. See e.g.&#xA;    // https://github.com/coreutils/gnulib/blob/master/lib/intprops-internal.h#L370&#xA;    // for a type-generic macro that handles all cases. `ckd_mul` and the&#xA;    // non-standard intrinsics are lookin‚Äô pretty good right about now... üòâ&#xA;    abort(); &#xA;  }&#xA;  if (INT_MAX / x &amp;lt; y || INT_MAX / y &amp;lt; x) {&#xA;    return true;&#xA;  }&#xA;  *result = x * y;&#xA;  return false;&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If that all sounds like a pain in the ass (because it is), you can use&#xA;  &lt;code&gt;calloc&lt;/code&gt;. In C23 (see section 7.24.3.2 of &lt;a&#xA;    href=&#34;https://open-std.org/JTC1/SC22/WG14/www/docs/n3054.pdf&#34;&gt;the C23&#xA;    draft&lt;/a&gt;), and in responsible implementations going back 15+ years,&#xA;  &lt;code&gt;calloc&lt;/code&gt; is defined to check the &lt;code&gt;count * size&lt;/code&gt;&#xA;  multiplication and to return &lt;code&gt;NULL&lt;/code&gt; if the product is too&#xA;  large&lt;a id=&#34;fn3_back&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn3&#34;&gt;‚ë¢&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Basically, do not use &lt;code&gt;malloc&lt;/code&gt; directly. Idiomatic usage is&#xA;  typically incorrect and unsafe. Security reviewers like to find some easy&#xA;  pickins by looking at a codebase, running &lt;code&gt;grep -ri alloc *&lt;/code&gt;, and&#xA;  looking for overflowing arithmetic expressions. They can find a lot of fun&#xA;  stuff. (Try it yourself! You can do much more along these lines with &lt;a&#xA;    href=&#34;https://github.com/weggli-rs/weggli&#34;&gt;weggli by Felix Wilhelm et&#xA;    al&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;These Bugs Are Old And Subtle&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;In &lt;a href=&#34;https://ai.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html&#34;&gt;Extra,&#xA;    Extra - Read All About It: Nearly All Binary Searches and Mergesorts are&#xA;    Broken&lt;/a&gt;, by Joshua Bloch in 2006, we learn that even the simple binary search&#xA;  turns out to be buggy due to the use of the wrong subscript type. In 2&#xA;  languages, no less! Java was defined to use &lt;code&gt;int&lt;/code&gt; as its array index&#xA;  type, and &lt;code&gt;int&lt;/code&gt; is defined as a signed 32-bit integer. Unlike C, Java&#xA;  &lt;code&gt;int&lt;/code&gt; is defined to have modular behavior on overflow, like C‚Äôs&#xA;  unsigned types.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The buggy line is in finding a new midpoint for the search:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;pre&gt;&#xA;int mid = (low + high) / 2;&#xA;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In C, this is UB and there are no guarantees whatsoever. (Bloch says that ‚ÄúIn&#xA;  C this causes an array index out of bounds with unpredictable results‚Äù, but&#xA;  spatial unsafety is the outcome only if the people affected by your program are&#xA;  ‚Äòlucky‚Äô and the arithmetic overflow is implemented to have modular behavior. But&#xA;  there‚Äôs no guarantee of that, so the C version of this program has extra bonus&#xA;  UB: arithmetic overflow and buffer overflow.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In Java, the code is incorrect but safe, because the arithmetic overflow is&#xA;  defined and the invalid array access is defined. This is why I like to say,&#xA;  ‚ÄúJava actually is what people imagine C to be.‚Äù What is UB in C is very often&#xA;  well-defined in Java.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That said, Java is still wrong to have used &lt;code&gt;int&lt;/code&gt; as the array&#xA;  index type, even if only because it is an unnecessary limitation on program data&#xA;  size (as discussed above). But it also leads to this incorrectness problem ‚Äî¬†in&#xA;  Java, the program will &lt;code&gt;throw&lt;/code&gt; when it actually could have&#xA;  successfully completed the binary search. Bloch notes that 1 way to fix it is to&#xA;  use (you guessed it) unsigned arithmetic:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;  &lt;p&gt;Probably faster, and arguably as clear is:&lt;/p&gt;&#xA;&#xA;  &lt;pre&gt;&#xA;int mid = (low + high) &amp;gt;&amp;gt;&amp;gt; 1;&#xA;&lt;/pre&gt;&#xA;&#xA;  &lt;p&gt;In C and C++ (where you don‚Äôt have the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; operator),&#xA;    you can do this:&lt;/p&gt;&#xA;&#xA;  &lt;pre&gt;&#xA;mid = ((unsigned int)low + (unsigned int)high)) &amp;gt;&amp;gt; 1;&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Those approaches will work when &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt; are&#xA;  &lt;code&gt;int&lt;/code&gt;s and thus their sum will always fit in &lt;code&gt;unsigned&#xA;int&lt;/code&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But if we used the correct index type, &lt;code&gt;size_t&lt;/code&gt;, we don‚Äôt have the&#xA;  extra headroom of &lt;code&gt;unsigned&lt;/code&gt; ‚Äî¬†it‚Äôs already unsigned ‚Äî¬†so we need to&#xA;  actually ensure that the overflow does not happen. Bloch‚Äôs first solution,&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;pre&gt;&#xA;int mid = low + ((high - low) / 2);&#xA;&lt;/pre&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;is the only one that yields the correct midpoint in all cases.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To see why, consider an extreme case, in which we are indexing a giant array&#xA;  of bytes that holds all bytes in the address space. We can see that calculating&#xA;  the true midpoint requires care in modular arithmetic, both for 32- and 64-bit&#xA;  sizes. (For the 64-bit case, pretend for the moment that we can afford that much&#xA;  RAM, and that we have a machine that actually does use all 64 bits for&#xA;  addressing bytes.)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;% &lt;b&gt;cat &lt;a href=&#34;midpoint.c&#34;&gt;midpoint.c&lt;/a&gt;&lt;/b&gt;&#xA;#include &amp;lt;assert.h&amp;gt;&#xA;#include &amp;lt;inttypes.h&amp;gt;&#xA;#include &amp;lt;limits.h&amp;gt;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;int main() {&#xA;  {&#xA;    static_assert(sizeof(unsigned) == sizeof(uint32_t),&#xA;                  &#34;Assuming `unsigned` is `uint32_t`&#34;);&#xA;    printf(&#34;32-bit:\n&#34;);&#xA;    const uint32_t low = UINT_MAX - 2;&#xA;    const uint32_t high = UINT_MAX;&#xA;    uint32_t mid = (low + high) / 2;&#xA;    printf(&#34;(%&#34; PRIu32 &#34; + %&#34; PRIu32 &#34;) / 2 = %&#34; PRIu32 &#34;\n&#34;, low, high, mid);&#xA;&#xA;    mid = low + ((high - low) / 2);&#xA;    printf(&#34;%&#34; PRIu32 &#34; + ((%&#34; PRIu32 &#34; - %&#34; PRIu32 &#34;) / 2) = %&#34; PRIu32 &#34;\n&#34;,&#xA;           low, high, low, mid);&#xA;  }&#xA;&#xA;  {&#xA;    static_assert(sizeof(size_t) == sizeof(uint64_t),&#xA;                  &#34;Assuming `size_t` is `uint64_t`&#34;);&#xA;    printf(&#34;64-bit:\n&#34;);&#xA;    const uint64_t low = SIZE_T_MAX - 2;&#xA;    const uint64_t high = SIZE_T_MAX;&#xA;    uint64_t mid = (low + high) / 2;&#xA;    printf(&#34;(%&#34; PRIu64 &#34; + %&#34; PRIu64 &#34;) / 2 = %&#34; PRIu64 &#34;\n&#34;, low, high, mid);&#xA;&#xA;    mid = low + ((high - low) / 2);&#xA;    printf(&#34;%&#34; PRIu64 &#34; + ((%&#34; PRIu64 &#34; - %&#34; PRIu64 &#34;) / 2) = %&#34; PRIu64 &#34;\n&#34;,&#xA;           low, high, low, mid);&#xA;  }&#xA;}&#xA;% &lt;b&gt;make midpoint &amp;&amp; ./midpoint&lt;/b&gt;&#xA;clang -Weverything -Werror -std=c2x midpoint.c -o midpoint&#xA;32-bit:&#xA;(4294967293 + 4294967295) / 2 = 2147483646&#xA;4294967293 + ((4294967295 - 4294967293) / 2) = 4294967294&#xA;64-bit:&#xA;(18446744073709551613 + 18446744073709551615) / 2 = 9223372036854775806&#xA;18446744073709551613 + ((18446744073709551615 - 18446744073709551613) / 2) = 18446744073709551614&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Obviously, on a 64-bit machine, we are highly unlikely to find ourselves&#xA;  exercising this edge case. ‚ò∫Ô∏è (Although &lt;a&#xA;    href=&#34;https://www.qualys.com/2020/05/19/cve-2005-1513/remote-code-execution-qmail.txt&#34;&gt;don‚Äôt&#xA;    get &lt;b&gt;too&lt;/b&gt; complacent&lt;/a&gt;.) But as you can see, with 32-bit&#xA;  &lt;code&gt;size_t&lt;/code&gt;, we are well within range of trouble. (See demo below.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In any case, I would rather have such foundational functions as binary search&#xA;  be correct because they are correct, rather than ‚Äògood enough‚Äò contingent on the&#xA;  limitations of the platform the program runs on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That said, on a 64-bit machine, we can emulate and exhaustively test what&#xA;  would happen in a 32-bit machine if we were to use &lt;code&gt;uint32_t&lt;/code&gt; to&#xA;  emulate &lt;code&gt;size_t&lt;/code&gt; as the index type. My example program, &lt;a href=&#34;exhaustive.c&#34;&gt;exhaustive.c&lt;/a&gt;, creates an&#xA;  array with 4 billion elements,&#xA;  and then attempts to use binary search to find all of them. It shows that if you&#xA;  use an unsigned index type, you have to use (as midpoint.c suggests) the&#xA;  &lt;code&gt;low + ((high - low) / 2)&lt;/code&gt; method to get a correct program. Using the&#xA;  correct arithmetic takes about 6 minutes on my laptop:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;% &lt;b&gt;date ; time ./exhaustive c ; date&lt;/b&gt;&#xA;Sat Feb 11 22:35:47 PST 2023&#xA;Created sorted array of `uint32_t` values.&#xA;./exhaustive c  347.17s user 8.99s system 95% cpu 6:13.90 total&#xA;Sat Feb 11 22:42:01 PST 2023&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The incorrect arithmetic gets stuck in an infinite loop, unable to find a&#xA;  valid midpoint (as midpoint.c suggested will happen). In this example, I gave up&#xA;  after 18 minutes:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;% &lt;b&gt;date ; time ./exhaustive i ; date&lt;/b&gt;&#xA;Sat Feb 11 22:42:29 PST 2023&#xA;Created sorted array of `uint32_t` values.&#xA;^C&#xA;./exhaustive i  1031.42s user 18.88s system 95% cpu 18:22.13 total&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Types matter. That ‚Äòeverything is an &lt;code&gt;int&lt;/code&gt; in C‚Äô is no more true&#xA;  than that ‚Äòeverything is a list in Lisp‚Äô ‚Äî¬†and we should be glad of that! &lt;a&#xA;    href=&#34;https://en.wikipedia.org/wiki/B_(programming_language)&#34;&gt;The nearly&#xA;    typeless B language&lt;/a&gt;, and the untyped lambda calculus, are insufficient as&#xA;  programming tools. Application-domain types clearly matter, but primitive types&#xA;  matter too ‚Äî¬†perhaps especially, since higher-level types and functions are&#xA;  built on the primitives.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Proofs of correctness of binary search are valid only on the assumption that&#xA;  languages can easily express correct integer arithmetic. (&lt;a&#xA;    href=&#34;https://www.cs.cornell.edu/courses/cs211/2006sp/Lectures/L06-Induction/binary_search.html&#34;&gt;See&#xA;    this one, for example&lt;/a&gt;.) In fact, of course, our programming languages make&#xA;  expressing even simple arithmetic incredibly difficult and unwieldy. A complete&#xA;  proof must take the failures of real-world language design into account. This&#xA;  gap between theory and practice, between computing science and software&#xA;  engineering, is wider than people sometimes realize&lt;a id=&#34;fn4_back&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn4&#34;&gt;‚ë£&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As for the not-fully-correct solution being ‚Äùprobably faster‚Äù, that is&#xA;  unlikely to be significant. The practical performance difference between&#xA;  &lt;code&gt;mid = ((unsigned int)low + (unsigned int)high)) &amp;gt;&amp;gt; 1&lt;/code&gt; and&#xA;  &lt;code&gt;int mid = low + ((high - low) / 2)&lt;/code&gt; is 1 additional subtraction&#xA;  operation on registers, i.e. 1 machine cycle. (&lt;a href=&#34;https://godbolt.org/z/sPqTG96fd&#34;&gt;The &lt;code&gt;/ 2&lt;/code&gt; gets&#xA;    optimized to&#xA;    &lt;code&gt;&amp;gt;&amp;gt; 1&lt;/code&gt; on a modern optimizing compiler&lt;/a&gt;.) In a loop&#xA;  involving non-local accesses to main memory ‚Äî¬†you‚Äôre jumping around in the&#xA;  array, not processing it in a linear, cache-friendly way ‚Äî¬†that fraction of a&#xA;  nanosecond is not going to make or break the performance-fitness of your&#xA;  program.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assuming we‚Äôre already using the best available data structures and&#xA;  algorithms, the most significant way to make programs faster is by increasing&#xA;  parallelism. In general, correctness and safety are crucial to achieving&#xA;  parallelism. Observing the distinctions between types is a particularly&#xA;  effective way to improve program correctness and safety.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In any case, we‚Äôve been living with unnecessarily buggy C/C++ programs since&#xA;  1989, even accounting for all the other kinds of bugs inherent and special to&#xA;  C/C++. 33 years of entirely preventable bugs and exploitable vulnerabilities,&#xA;  all because it‚Äôs too hard to express the 1 thing computers actually do:&#xA;  arithmetic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A good engineer never blames their tools. But a good engineer is always&#xA;  searching for the best available tools.&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn1&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn1_back&#34;&gt;&lt;b&gt;1.&lt;/b&gt;&lt;/a&gt; K&amp;amp;R, 2nd edition,&#xA;  page 187 shows a version of &lt;code&gt;malloc&lt;/code&gt; taking &lt;code&gt;unsigned&lt;/code&gt;,&#xA;  while p. 167 has it correct as &lt;code&gt;size_t&lt;/code&gt;. It seems likely that K&amp;amp;R&#xA;  just forgot to update the example on p. 187 when updating the book for the 2nd&#xA;  edition, which was updated to describe C89.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn2&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn2_back&#34;&gt;&lt;b&gt;2.&lt;/b&gt;&lt;/a&gt; When interviewing&#xA;  security-focused engineers, I often ask them to spot the bugs in code like this,&#xA;  and to explain how it could be exploited.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn3&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn3_back&#34;&gt;&lt;b&gt;3.&lt;/b&gt;&lt;/a&gt; If application-specific&#xA;  macro-benchmarks and testing show that &lt;code&gt;calloc&lt;/code&gt;‚Äôs zeroing memory&#xA;  makes the program too slow for its purpose, you can define your own allocation&#xA;  function that checks the multiplication and then passes the result to&#xA;  &lt;code&gt;malloc&lt;/code&gt;. Of course, this point only applies if your application has&#xA;  performance fitness tests. Unless you have such tests, &lt;code&gt;calloc&lt;/code&gt; is&#xA;  not too slow.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn4&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn4_back&#34;&gt;&lt;b&gt;4.&lt;/b&gt;&lt;/a&gt; It reminds me a bit of&#xA;  how with big-O notation, we ignore constant factors because in principle they&#xA;  don‚Äôt matter ‚Äî¬†but in practice, for actual inputs to algorithms implemented on&#xA;  actual computers, the constant factors can be decisive.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2023/02/12/int-size-t/index.html</guid>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>‚ÄúThe Emperor‚Äôs Old Clothes‚Äù</title>
      <link>https://noncombatant.org/2023/01/15/hoare-emperors-old-clothes/index.content</link>
      <description>&lt;h1&gt;‚ÄúThe Emperor‚Äôs Old Clothes‚Äù&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;15 January 2023&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Tony Hoare provided my favorite definition of security in his Turing Award&#xA;    lecture ‚ÄúThe Emperor‚Äôs Old Clothes‚Äù:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;The first principle was security: The principle that every&#xA;    syntactically incorrect program should be rejected by the compiler and that&#xA;    every syntactically correct program should give a result or an error message&#xA;    that was predictable and comprehensible in terms of the source language program&#xA;    itself&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;He mentions spatial memory safety in particular, as it is the first and&#xA;    unavoidable kind of unsafety we encounter. (I‚Äôd say both as individuals, when we&#xA;    start learning C and assembly, and also in the history of software development&#xA;    ‚Äî¬†programs in the era he is talking about often did not have object lifetimes&#xA;    other than static and stack, so temporal safety was less of an issue.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But if we work through the implications of Hoare‚Äôs 1st principle, it becomes&#xA;    clear that safety must mean (at least) all of spatial and temporal memory&#xA;    safety, and also type safety. It‚Äôs worth noting that the need for lifetime&#xA;    safety was recognized &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)#:~:text=Garbage%20collection%20was%20invented%20by,manual%20memory%20management%20in%20Lisp.&#34;&gt;and&#xA;        implemented&lt;/a&gt; almost immediately after the first dynamic language was&#xA;    invented. And we know &lt;a&#xA;        href=&#34;https://qconlondon.com/london-2009/qconlondon.com/london-2009/speaker/Tony+Hoare.html&#34;&gt;he&#xA;        regrets inventing meaningless references&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So Hoare wants for machines to never be &lt;i&gt;weird&lt;/i&gt;, in &lt;a&#xA;        href=&#34;http://www.dullien.net/thomas/weird-machines-exploitability.pdf&#34;&gt;Thomas&#xA;        Dullien‚Äôs sense&lt;/a&gt;. It must at least be possible to program a computer, even if&#xA;    difficult. This is especially important given the unavoidable complexity of&#xA;    programming:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;Programmers are always surrounded by complexity; we cannot avoid it.&#xA;    Our applications are complex because we are ambitious to use our computers in&#xA;    ever more sophisticated ways. Programming is complex because of the large number&#xA;    of conflicting objectives for each of our programming projects. If our basic&#xA;    tool, the language in which we design and code our programs, is also&#xA;    complicated, the language itself becomes part of the problem rather than part of&#xA;    its solution.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Unwarranted complexity, such as weirdness and &lt;a href=&#34;https://en.cppreference.com/w/cpp&#34;&gt;underspecified and&#xA;        inconsistent&#xA;        APIs&lt;/a&gt;, becomes hostile to safety, utility, efficiency, &lt;a href=&#34;https://www.acm.org/code-of-ethics&#34;&gt;our&#xA;        ethical duty&lt;/a&gt;, and cost.&lt;/p&gt;&#xA;&#xA;&lt;a id=&#34;law&#34;&gt;&#xA;    &lt;p&gt;11 years after Hoare, some people in New Jersey would also go on&#xA;        to implement another dialect of Algol. But they ignored this 1st principle of&#xA;        system design. For 51 years, we have accepted extremely ‚Äî and increasingly! ‚Äî&#xA;        weird and unnecessarily complex machines as normal. It‚Äôs hard to overstate how&#xA;        much software engineering regressed in the 1970s. 50 years later, we have not&#xA;        dug ourselves out of the pit. There are people who benefit from this state of&#xA;        affairs. Hoare had a spicy take on that:&lt;/p&gt;&#xA;&#xA;    &lt;blockquote&gt;In any respectable branch of engineering, failure to observe such&#xA;        elementary precautions would have long been against the law.&lt;/blockquote&gt;&#xA;&lt;/a&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm actually not sure it‚Äôs true that it would &lt;i&gt;long&lt;/i&gt; have been against&#xA;    the law; much product safety regulation was relatively new at the time he wrote&#xA;    this. In any case, the seemingly in-the-weeds topic of memory safety is now &lt;a&#xA;        href=&#34;https://www.atlanticcouncil.org/content-series/buying-down-risk/memory-safety/&#34;&gt;a&#xA;        topic of policy discussion&lt;/a&gt;. (See also &lt;a&#xA;        href=&#34;https://www.atlanticcouncil.org/content-series/buying-down-risk/home/&#34;&gt;the&#xA;        whole Buying Down Risk series&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hoare‚Äôs 2nd principle of language design is in the same vein. I‚Äôll take the&#xA;    liberty of re-phrasing it a bit, for emphasis: Efficiency (particularly&#xA;    space-efficiency) is critical ‚Äî both for its own sake, &lt;i&gt;but also so that you&#xA;        can use the headroom to further improve reliability&lt;/i&gt;. He even goes as far as&#xA;    to say ‚Äúrugged‚Äù, which is such a beautiful vision for software.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3rd and 4th are developer experience principles: Composition must be&#xA;    efficient, so that we can use it heavily; and, the write/test/debug loop must be&#xA;    low-latency.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As ‚Äòobvious‚Äô as these principles may seem, it‚Äôs fun to think: which&#xA;    programming environments do you use that reliably satisfy all 4? I think there&#xA;    are a few (woo hoo!) but that we don‚Äôt often enough demand that this be the&#xA;    baseline.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I love Hoare‚Äôs lecture/essay so much because it is such a pithy summary of&#xA;    hard-won and deep insights into many aspects of software development: safety,&#xA;    obviously, but also usability, reliability, business management, project and&#xA;    program management. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/358549.358561&#34;&gt;The copy on ACM‚Äôs&#xA;        site&lt;/a&gt; is a fairly janky PDF, so I‚Äôve reformatted it as &lt;a&#xA;        href=&#34;/hoare-emperors-old-clothes-turing-award/&#34;&gt;plain HTML&lt;/a&gt; for easier&#xA;    reading and correct copying and pasting. (The PDF‚Äôs text is OCR with errors,&#xA;    alas.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See also &lt;a href=&#34;https://blog.acolyer.org/2016/09/07/the-emperors-old-clothes/&#34;&gt;Adrian&#xA;        Colyer‚Äôs similar paean&lt;/a&gt;! And you might like Hoare‚Äôs &lt;a&#xA;        href=&#34;https://people.dsv.su.se/~jpalme/s1/hoare.html&#34;&gt;Software Design: A&#xA;        Parable&lt;/a&gt;.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2023/01/15/hoare-emperors-old-clothes/index.html</guid>
      <pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>‚ÄúEverything In Its Right Place‚Äù By Radiohead</title>
      <link>https://noncombatant.org/2022/07/12/everything-in-its-right-place/index.content</link>
      <description>&lt;h1&gt;‚ÄúEverything In Its Right Place‚Äù By Radiohead&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;12 July 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This tune is pretty confusing, which is great. I really wanted to learn it,&#xA;    but I had a hard time counting it and nailing down some of the weirder chords,&#xA;    so I bought an official (?!) score. Unfortunately, in the &lt;a href=&#34;https://youtu.be/YsJh39iVUjg&#34;&gt;‚Äògrand‚Äô tradition&#xA;        of the &lt;i&gt;...And Justice&#xA;            For All&lt;/i&gt; transcription book&lt;/a&gt;, it just made things more difficult. The&#xA;    score is unnecessarily complex (the meter changes every single bar) and wrong&#xA;    (mislabeled chords). As a result, the simple structure and true weirdness of the&#xA;    song are obscured.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the purposes of analysis, critique, and just learning the song correctly,&#xA;    my transcription ‚Äî¬†which is essentially a correction of the one from Musicnotes&#xA;    ‚Äî¬†is below. If you want to see how confusing &lt;a&#xA;        href=&#34;https://www.musicnotes.com/sheetmusic/mtd.asp?ppn=MN0044377&#34;&gt;the&#xA;        Musicnotes version&lt;/a&gt; is, you can buy it or look at the preview on their&#xA;    site.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Harmonically, it‚Äôs a weird tune. &lt;a&#xA;        href=&#34;https://www.theguardian.com/music/2013/mar/01/steve-reich-schoenberg-coltrane-radiohead&#34;&gt;Steve&#xA;        Reich says it‚Äôs in F Minor&lt;/a&gt;, even though there‚Äôs no Fm chord in the song, on&#xA;    the basis that the chorus vocal begins F ‚Äî¬†C ‚Äî F. But it lands so hard and&#xA;    repeatedly on C, that I can‚Äôt hear anything but C as the tonic, oscillating&#xA;    between C Major and C Phrygian.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think this song is not really modal or key-based. I think of it as being&#xA;    fundamentally about harmonic, rhythmic, and psychological instability ‚Äî¬†the&#xA;    harmony as glitchy as the computer-processed vocals, reflecting the anxiety of&#xA;    ambiguity. The odd meter, accents not falling on the beat, unstable chords being&#xA;    held and then moving up rather than resolving down. Phrases cross bar lines,&#xA;    even section lines.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Harmonically it alternates between C Major and C Phrygian, with brief&#xA;    pseudo-cadences suggesting F. It happens fast at the end of the 2nd verse, but&#xA;    you can hear and interpret Cm7/E‚ô≠ ‚Äî¬†Gdim ‚Äî¬†F7 ‚Äî¬†C as a kind of&#xA;    ‚Äòdouble-pseudo-cadence‚Äô: a Phrygian i ‚Äî¬†v¬∞, and then a Mixolydian I7 ‚Äî¬†V. I&#xA;    don‚Äôt know if that‚Äôs really a thing. Probably not.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Probably the best thing to do is to just look at the changes, and let them&#xA;    stand for themselves, without overthinking it:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;    &lt;li&gt;F ‚Äî¬†C ‚Äî¬†D‚ô≠maj7‚ô≠5 ‚Äî¬†Cm/E‚ô≠ (start of chorus)&lt;/li&gt;&#xA;    &lt;li&gt;C ‚Äî¬†D‚ô≠maj7‚ô≠5 ‚Äî¬†Cm/E‚ô≠ (chorus)&lt;/li&gt;&#xA;    &lt;li&gt;D‚ô≠maj7 ‚Äî¬†C ‚Äî¬†Cm7/E‚ô≠ ‚Äî D‚ô≠maj7 (verse)&lt;/li&gt;&#xA;    &lt;li&gt;D‚ô≠maj7 ‚Äî¬†C ‚Äî¬†Cm7/E‚ô≠ ‚Äî F7 (transitioning from verse to chorus)&lt;/li&gt;&#xA;    &lt;li&gt;D‚ô≠maj7 ‚Äî¬†C ‚Äî¬†Cm7/E‚ô≠ ‚Äî¬†Gdim ‚Äî¬†F7 (end of 2nd verse)&lt;/li&gt;&#xA;    &lt;li&gt;F7 ‚Äî¬†C ‚Äî¬†D‚ô≠(‚ô≠5) ‚Äî¬†E‚ô≠add9 (bridge and outro)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;They‚Äôre incredibly dark, but I find them beautiful. Adding the minor 7 to&#xA;    Cm7/E‚ô≠ supports the vocal in the verse, but is left out of the chorus, keeping&#xA;    it plain and strong. The D‚ô≠maj7‚ô≠5, an altered secondary dominant (which to my&#xA;    ears strengthens the idea that C is the tonic), just floats there grimly. It‚Äôs&#xA;    not a passing chord like the Gdim.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the D‚ô≠maj7 ‚Äî¬†C change in the verse had a ‚ô≠5 as it does in the chorus, we&#xA;    could be more certain that C Major was the intended tonic. But, no; it‚Äôs a&#xA;    stable chord, entirely in-key for A‚ô≠/C Phrygian.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The voicing of the E‚ô≠add9 is so tight as to be almost claustrophobic. Maybe&#xA;    my ear is warped by growing up on this, King Crimson, and Godflesh, but I really&#xA;    like that sound. Stacked whole steps speak to me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Anyway, I hope you find this score easy to use and understand! Have fun and&#xA;    keep two harmonic colors in your head at all times.&lt;/p&gt;&#xA;&#xA;&lt;iframe src=&#34;Everything In Its Right Place.pdf&#34; width=&#34;100%&#34; height=&#34;500&#34; loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;</description>
      <author>Chris Palmer</author>
      <guid>2022/07/12/everything-in-its-right-place/index.html</guid>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The Fraught Utility Of Vulnerability Disclosure Databases</title>
      <link>https://noncombatant.org/2022/07/10/fraught-vdbs/index.content</link>
      <description>&lt;h1&gt;The Fraught Utility Of Vulnerability Disclosure Databases&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;10 July 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Do we need vulnerability databases? Are the ones we have working? Should we&#xA;    do something else? How can we improve our overall approach to the ‚ÄúWTF is going&#xA;    on?‚Äù problem?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My strong bias is toward the scientific method ‚Äî¬†which requires open inquiry&#xA;    and easy access to knowledge ‚Äî¬†and against unreliable or false metrics. I also&#xA;    strongly resist any make-work or boondoggling that is not directly relevant to&#xA;    understanding how software works and fails, and making it work more&#xA;    goodlier.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, I tried to think about vulnerability databases, and what all we might&#xA;    want from them. First, some definitions.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Definitions&lt;/h2&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;    &lt;dt&gt;Developer:&lt;/dt&gt;&#xA;    &lt;dd&gt;An organization which (or lone hacker who) develops&#xA;        software.&lt;/dd&gt;&#xA;&#xA;    &lt;dt&gt;Developer communications:&lt;/dt&gt;&#xA;    &lt;dd&gt;Communications from developers about&#xA;        vulnerabilities, including bug trackers, release notes, Knowledge Base articles,&#xA;        code review and CI/CQ, et c.&lt;/dd&gt;&#xA;&#xA;    &lt;dt&gt;Researcher:&lt;/dt&gt;&#xA;    &lt;dd&gt;An organization which (or lone hacker who) hunts for&#xA;        vulnerabilities in software.&lt;/dd&gt;&#xA;&#xA;    &lt;dt&gt;Researcher communications:&lt;/dt&gt;&#xA;    &lt;dd&gt;Communications from researchers about&#xA;        vulnerabilities, including bug trackers, advisories, blog posts, exploits, and&#xA;        Twitter threads.&lt;/dd&gt;&#xA;&#xA;    &lt;dt&gt;Deployer:&lt;/dt&gt;&#xA;    &lt;dd&gt;An organization or person who is using some software to&#xA;        achieve a goal.&lt;/dd&gt;&#xA;&#xA;    &lt;dt&gt;Vulnerability database program (VDB):&lt;/dt&gt;&#xA;    &lt;dd&gt;An organization that tracks,&#xA;        describes, and/or issues alerts for vulnerabilities.&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;h2&gt;Vulnerability Databases&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;What might we want in a VDB?&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;Information about the nature of the vulnerability, including:&#xA;        &lt;ul&gt;&#xA;            &lt;li&gt;specific versions of specific products affected;&lt;/li&gt;&#xA;            &lt;li&gt;attack pathways (e.g. unauthenticated internet attacker, authenticated local&#xA;                user account, et c.);&lt;/li&gt;&#xA;            &lt;li&gt;proof of concept (PoC) exploit, unit test, or other test: proof that the bug&#xA;                is real and that the fix works;&lt;/li&gt;&#xA;            &lt;li&gt;availability of the fix;&lt;/li&gt;&#xA;            &lt;li&gt;workarounds;&lt;/li&gt;&#xA;            &lt;li&gt;mitigating factors;&lt;/li&gt;&#xA;            &lt;li&gt;the type of bug (e.g. heap buffer overflow, SQL injection); and&lt;/li&gt;&#xA;            &lt;li&gt;the specific locus of the bug (e.g. the login flow, the network-facing&#xA;                &lt;code&gt;FooHandler&lt;/code&gt;, the kernel-mode driver, et c.).&#xA;            &lt;/li&gt;&#xA;        &lt;/ul&gt;&#xA;    &lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Searchability: a unique ID (or a keyword) that search engines can easily&#xA;        find. The IDs must be unique, and there should not be multiple IDs for the same&#xA;        bug.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Authoritativeness: ideally, most of the community will recognize a given&#xA;        information source as ‚ú® The Last Word ‚ú® in vulnerabilities for the range of&#xA;        software it covers.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Alert quality: timely, relevant, and actionable alerts.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Low overhead: for developers to add new entries to the database must be easy&#xA;        and fast. Researchers should therefore be able to get IDs for their discoveries&#xA;        quickly.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I made a rough comparison of 4 sources of vulnerability information:&lt;/p&gt;&#xA;&#xA;&lt;table&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th class=&#34;bottom&#34;&gt;Source&lt;/th&gt;&#xA;        &lt;th class=&#34;bottom&#34;&gt;Information&lt;/th&gt;&#xA;        &lt;th class=&#34;bottom&#34;&gt;Searchability&lt;/th&gt;&#xA;        &lt;th class=&#34;bottom&#34;&gt;Authoritativeness&lt;/th&gt;&#xA;        &lt;th class=&#34;bottom&#34;&gt;Alert Quality&lt;/th&gt;&#xA;        &lt;th class=&#34;bottom&#34;&gt;Overhead&lt;/th&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th&gt;CVE&lt;/th&gt;&#xA;        &lt;td&gt;&lt;a href=&#34;/2022/04/22/itw-taxonomy/&#34;&gt;Poor&lt;/a&gt;&lt;/td&gt;&#xA;        &lt;td&gt;Good&lt;/td&gt;&#xA;        &lt;td&gt;Low, due to poor information&lt;/td&gt;&#xA;        &lt;td&gt;&lt;a id=&#34;fn1_back&#34;&gt;&lt;/a&gt;Highly varying&lt;a href=&#34;#fn1&#34;&gt;‚ë†&lt;/a&gt;&lt;/td&gt;&#xA;        &lt;td&gt;High&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th&gt;&lt;a href=&#34;https://www.openwall.com/ove/&#34;&gt;OVE&lt;/a&gt;&lt;/th&gt;&#xA;        &lt;td&gt;None; provides only IDs&lt;/td&gt;&#xA;        &lt;td&gt;Good&lt;/td&gt;&#xA;        &lt;td&gt;None; provides only IDs&lt;/td&gt;&#xA;        &lt;td&gt;None; provides only IDs&lt;/td&gt;&#xA;        &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Machine_epsilon&#34;&gt;epsilon&lt;/a&gt;&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th&gt;Developer communications&lt;/th&gt;&#xA;        &lt;td&gt;&lt;a id=&#34;fn2_back&#34;&gt;&lt;/a&gt;Highly varying&lt;a href=&#34;#fn2&#34;&gt;‚ë°&lt;/a&gt;&lt;/td&gt;&#xA;        &lt;td&gt;Good&lt;/td&gt;&#xA;        &lt;td&gt;&lt;a id=&#34;fn3_back&#34;&gt;&lt;/a&gt;‚ÄòShould be‚Äô ideal but varies with information quality&lt;a href=&#34;#fn3&#34;&gt;‚ë¢&lt;/a&gt;&lt;/td&gt;&#xA;        &lt;td&gt;Good&lt;/td&gt;&#xA;        &lt;td&gt;None beyond what is inherently necessary&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th&gt;Researcher communications&lt;/th&gt;&#xA;        &lt;td&gt;Varying; often good&lt;/td&gt;&#xA;        &lt;td&gt;Poor&lt;/td&gt;&#xA;        &lt;td&gt;Varying; sometimes good&lt;/td&gt;&#xA;        &lt;td&gt;Varying; sometimes good&lt;/td&gt;&#xA;        &lt;td&gt;None beyond what is inherently necessary&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;p&gt;From this I observe a few things:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Developer communications have the best ability to meet all our&#xA;        requirements:&lt;/b&gt; developers (should) have the best knowledge about the software&#xA;    they create, full information about the nature of the bug, full information&#xA;    about the fix, and full information about remediation. Sometimes developers do&#xA;    meet our requirements, and that is great. Ideally, they always would. All too&#xA;    often, they don‚Äôt, and keeping communications high quality requires constant&#xA;    effort and skill from program managers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;Researcher communications have a great ability to meet our information&#xA;        requirements in particular.&lt;/b&gt; Sometimes they do, and that is great. Sometimes,&#xA;    they can be more authoritative than reticent developers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;CVE‚Äôs clearest benefit seems to be an authoritative source of unique ID&#xA;        numbers,&lt;/b&gt; plus whatever information the developer might provide (usually very&#xA;    little). But in my experience the coordination cost is high for developers, and&#xA;    as a result developers often minimize their use of CVE. Hence OVE: the argument&#xA;    goes that if all CVE reliably does for us is make numbers, well, we can do that&#xA;    far more cheaply.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;We might benefit if program managers of VDBs stopped accepting poor, late,&#xA;        and un-actionable information from developers.&lt;/b&gt; The CVE program, as the most&#xA;    widely recognized VDB, has an opportunity to raise the bar across the industry&#xA;    by calling out such reticent developers, citing the needs of and benefits to the&#xA;    public and basic science.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, imagine if a VDB tagged entries with a message like ‚ÄúDeveloper&#xA;    declined to provide meaningful information‚Äù when the vendor provided a&#xA;    meaningless description of the vulnerability. That might exert some salutary&#xA;    pressure on developers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;We would benefit if VDBs made it easier for the developer to commit&#xA;        current information to the database.&lt;/b&gt; For example, CVE-2022-2294, which is&#xA;    currently being exploited in the wild, is documented &lt;a&#xA;        href=&#34;https://chromereleases.googleblog.com/2022/07/stable-channel-update-for-desktop.html&#34;&gt;in&#xA;        Chrome‚Äôs 4 July 2022 release notes&lt;/a&gt;, but &lt;a&#xA;        href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?id=CVE-2022-2294&#34;&gt;the CVE&#xA;        entry&lt;/a&gt; as of 8 July contains no information, saying only:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;** RESERVED ** This candidate has been reserved by an organization&#xA;    or individual that will use it when announcing a new security problem. When the&#xA;    candidate has been publicized, the details for this candidate will be&#xA;    provided.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Perhaps the CVE entry will be eventually consistent with the Chrome release&#xA;    notes, hopefully including a link to the bug tracker. (&lt;a&#xA;        href=&#34;https://chromium.googlesource.com/chromium/src/+/master/docs/security/security-labels.md#Drop-Restrict_View_SecurityTeam_SecurityNotify_From-Old-And-Fixed-Bugs&#34;&gt;Chrome&#xA;        policy&lt;/a&gt; is to make security bugs public 14 weeks after the fix has shipped,&#xA;    so a link to the bug tracker will become valuable in time.)&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Prioritizing Vulnerability Response&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;What do we want in a vulnerability ‚Äòscoring‚Äô system? (Do we want a&#xA;    vulnerability scoring system?)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As an experiment, I imagined a hypothetical easy to use, network-based,&#xA;    denial of service (DoS ‚Äî¬†not &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Denial-of-service_attack#Distributed_DoS&#34;&gt;DDoS&lt;/a&gt;)&#xA;    attack, and tried to score it with CVSS. I assumed there is an existing exploit&#xA;    that doesn‚Äôt completely take down a service, but causes it to consume lots of&#xA;    time and/or space.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn4_back&#34;&gt;&lt;/a&gt;For example, imagine a database query that, for some&#xA;    reason, is slow in a given database engine. It is for some reason (less than SQL&#xA;    injection, more than just using the site normally) remotely-triggerable. Perhaps&#xA;    an attacker can make some unauthenticated web request that invokes this&#xA;    expensive query, and it‚Äôs expensive only because the query planner has a bug&#xA;    ‚Äî¬†normally, the query would be efficient&lt;a href=&#34;#fn4&#34;&gt;‚ë£&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The CVSS vector I got is&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:F/RL:U/RC:C/CR:X/IR:X/AR:H/MAV:N/MAC:L/MPR:N/MUI:N/MS:U/MC:N/MI:N/MA:L&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which scores 6.0 in &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator&#34;&gt;NIST‚Äôs CVSS 3.1&#xA;        calculator&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since that string is just noise, let‚Äôs look at a graphic:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;calculator.png&#34; width=&#34;1024&#34; height=&#34;302&#34; alt=&#34;A screenshot of&#xA;the NIST CVSS calculator showing the hypothetical bug with a score of 6.0&#34; loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;More readable, though not more&#xA;        informative.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;What does ‚Äú6.0‚Äù mean? Is it high enough to call &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Site_reliability_engineering&#34;&gt;the on-call&#xA;        SRE&lt;/a&gt;? Do we only get out of bed for 7.5 or higher? (Why 7.5?) Is this bug bad&#xA;    enough to call the vendor to complain ‚Äî¬†or sue?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some people might use CVSS to make that kind of decision. It is, after all, a&#xA;    score telling you how severe a problem is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But there is no single threat model, so there can be no single score that&#xA;    suits all audiences. Not everyone who uses the DoS-able database engine makes&#xA;    that kind of inefficient query. Not all deployers of vulnerable platforms need&#xA;    to worry, even if the bug is present ‚Äî¬†maybe their servers are overprovisioned&#xA;    relative to their load.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But what about a shopping site? What about a shopping site during the winter&#xA;    holiday season? Such a deployer can put a concrete dollar value on the cost of&#xA;    downtime, and that cost changes from quarter to quarter. In turn, that will&#xA;    change how the deployer prioritizes different vulnerabilities.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Nor do the scores map to real-world costs and risks ‚Äî¬†will a vulnerability&#xA;    with a CVSS score of 10.0 cost you twice as much as (or, say, 5 orders of&#xA;    magnitude more than) one with a score of 5.0? The question is nonsensical&#xA;    because nobody has the same cost model, either.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The CVSS people are aware of these problems, and have tried to address them.&#xA;    From &lt;a href=&#34;https://www.first.org/cvss/user-guide&#34;&gt;the CVSS User&#xA;        Guide&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;    &lt;p&gt;&lt;b&gt;2.1. CVSS Measures Severity, not Risk&lt;/b&gt;&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;The CVSS Specification Document has been updated to emphasize and clarify the&#xA;        fact that CVSS is designed to measure the severity of a vulnerability and should&#xA;        not be used alone to assess risk.&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;Concerns have been raised that the CVSS Base Score is being used in situations&#xA;        where a comprehensive assessment of risk is more appropriate. The CVSS v3.1&#xA;        Specification Document now clearly states that the CVSS Base Score represents&#xA;        only the intrinsic characteristics of a vulnerability which are constant over&#xA;        time and across user environments. The CVSS Base Score should be supplemented&#xA;        with a contextual analysis of the environment, and with attributes that may&#xA;        change over time by leveraging CVSS Temporal and Environmental Metrics. More&#xA;        appropriately, a comprehensive risk assessment system should be employed that&#xA;        considers more factors than simply the CVSS Base Score. Such systems typically&#xA;        also consider factors outside the scope of CVSS such as exposure and threat.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;CVSS 3.0 and greater were (presumably) devised to address the problem of&#xA;    nonsensical scores, such as that &lt;a href=&#34;https://heartbleed.com/&#34;&gt;Heartbleed&lt;/a&gt; ‚Äî¬†a bug that lets unauthenticated&#xA;    internet attackers read secrets out of a server‚Äôs memory ‚Äî &lt;a&#xA;        href=&#34;https://nvd.nist.gov/vuln/detail/cve-2014-0160&#34;&gt;scored only 5.0 at the&#xA;        time&lt;/a&gt;. (Click the &lt;b&gt;CVSS Version 2.0&lt;/b&gt; button to see it.) At least in the&#xA;    case of Heartbleed, CVSS 3 results in scores that seem more ‚Äòintuitively&#xA;    accurate‚Äô ‚Äî¬†to those of us assuming a particular class of threat model.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, I find that section quoted above to be a bit of a cop-out, given how&#xA;    people have reported using CVSS to me. People are using it to make operational&#xA;    decisions. It also feels insufficient: it‚Äôs not just that risk is different for&#xA;    different people at different times, it‚Äôs that severity can vary too!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Imagine that a hypothetical shopping app deployer has deployed the DoS-able&#xA;    database such that each query runs in a sandboxed and resource-limited process.&#xA;    The deployers have tested their sandbox resource limits such that 99.99% of true&#xA;    shopping queries succeed, while queries that exceed the memory limit or use more&#xA;    than some number of milliseconds of compute time are killed. For this deployer,&#xA;    the severity of the bug goes way down, nearly to zero, even though the cost of&#xA;    successful attack has stayed the same. This deployer has effectively mitigated&#xA;    the bug. (This deployment strategy can mitigate many potential bugs, and can&#xA;    change how the deployer prioritizes a wide variety of vulnerabilities.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another problem with CVSS is its &lt;a href=&#34;https://en.wikipedia.org/wiki/False_precision&#34;&gt;false precision&lt;/a&gt;. If you&#xA;    look at the calculator, you‚Äôll see that the ‚Äòmeasurements‚Äô you can make about a&#xA;    vulnerability are of very coarse ‚Äòprecision‚Äô, e.g. None ‚Äì¬†Low ‚Äì¬†High, or (for&#xA;    Exploit Code Maturity) Not Defined ‚Äì¬†Unproven ‚Äì¬†PoC ‚Äì Functional ‚Äì High. The&#xA;    measurements are in tertiles, quartiles, and quintiles, yet the calculator&#xA;    produces results purporting 2 significant figures (e.g. 6.2). This is an&#xA;    illusion produced by the arithmetic of the CVSS scoring procedure, not actual&#xA;    measurements of real bug severity.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have my doubts about whether the severity of vulnerabilities can be scored&#xA;    at all, especially without lots and lots of deployer-specific context. Even with&#xA;    that context, you still also need a well-grounded cost model ‚Äî¬†but it is very&#xA;    difficult to get one. Not all users that a given deployer is serving will share&#xA;    a given model, so you may need many cost models. And then you need a way to&#xA;    balance the concerns of all your constituents ‚Äî¬†another complex and&#xA;    hard-to-ground model. In real life, people make risk decisions much more&#xA;    qualitatively than we or they would like to believe.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That doesn‚Äôt mean we shouldn‚Äôt strive for well-grounded quantitative models!&#xA;    Just that we need to be prepared to act without them, and that CVSS is not&#xA;    one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If we do away with the spurious numbers and just treat CVSS as purely&#xA;    qualitative ‚Äî¬†which it is, &lt;b&gt;and which is fine!&lt;/b&gt; ‚Äî¬†we‚Äôd have a more honest&#xA;    and safer-to-use system. (Nobody is really worrying about the difference between&#xA;    7.6 and 7.4 anyway. At least I hope not.) The basic qualities that CVSS&#xA;    encompasses are all important and useful, and account for many of the desiderata&#xA;    at the top of this post.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The combination of CVE + CVSS gives us some of what we want, and we could&#xA;    have more of it at lower cost if any of a few magical things happened:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;Developers provided meaningful information in their own vulnerability&#xA;        databases&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Developers provided meaningful information to VDBs&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;VDBs made it easier for developers to keep entries current and accurate&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;VDBs rejected information-free entries or called them out as such&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Coordination costs were lowered, such as by removing the ‚Äòglobal lock‚Äô in&#xA;        the CVE database (as OVE proposes to do, and which could be done by giving each&#xA;        &lt;a href=&#34;https://www.cve.org/ProgramOrganization/CNAs&#34;&gt;CNA&lt;/a&gt; its own&#xA;        ‚Äònamespace‚Äô to issue numbers in)&#xA;    &lt;/li&gt;&#xA;&#xA;    &lt;li&gt;The CVSS program embraced its inherent qualitativeness, and shed the&#xA;        pseudo-quantities.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;However, it will never be possible to beat the information richness,&#xA;    searchability, or authoritativeness of a well-run developer communications&#xA;    program. (This is especially true for projects that are open source as well as&#xA;    being well-run.) Also great are well-run researcher communications programs ‚Äî¬†&lt;a&#xA;        href=&#34;/2022/04/22/itw-taxonomy/&#34;&gt;Taxonomy Of In-The-Wild Exploitation&lt;/a&gt; was&#xA;    only possible because so many researchers wrote so many great blog posts and&#xA;    PoCs. (Thank you!)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additionally, there will always be vulnerabilities that are known and fixed&#xA;    but which don‚Äôt get VDB entries. &lt;b&gt;In my experience, the majority of&#xA;        vulnerabilities go un-numbered&lt;/b&gt;, and for those vulnerabilities, this whole&#xA;    discussion is moot. This is not a fault of any VDB program: although reducing&#xA;    the friction of working with the program would help, we will always need to&#xA;    prepare for vulnerabilities that aren‚Äôt announced or tracked. You never get&#xA;    perfect global coordination, no matter how low the friction. And sometimes&#xA;    developers don‚Äôt even realize (or want to admit) that they are fixing a&#xA;    vulnerability (as opposed to just a regular bug). And sometimes their own bug&#xA;    trackers are already easier to use and more useful than a global database.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Therefore no VDB can ever be the sole trigger for action on the part of&#xA;    deployers. The only reliable way to get all the available fixes is to track the&#xA;    latest stable version. No matter how good any VDB gets, that will always be true&#xA;    ‚Äî¬†and deployers who do so will be insulated from gaps and mistakes on the part&#xA;    of developers and of VDB programs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the sake of public safety ‚Äî¬†and, honestly, just for the pride of&#xA;    engineering excellence ‚Äî¬†we must improve the quality and discoverability of&#xA;    vulnerability information, and reduce the cost of providing and getting it.&#xA;    There‚Äôs a lot of room for us to do a lot better as a community. The status quo&#xA;    is not working.&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn1&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn1_back&#34;&gt;&lt;b&gt;1.&lt;/b&gt;&lt;/a&gt; When CVE alerts are of&#xA;    low quality, it is not typically the ‚Äòfault‚Äô of the CVE program itself. Software&#xA;    development organizations must provide timely, relevant, and actionable&#xA;    information; if they don‚Äôt, there‚Äôs not much the CVE program can do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn2&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn2_back&#34;&gt;&lt;b&gt;2.&lt;/b&gt;&lt;/a&gt; Some developer bug&#xA;    trackers are great and have most or all of the properties we want. This is&#xA;    typically, but neither inherently nor historically only, seen in the trackers&#xA;    for open source projects. But other developers provide very little information,&#xA;    intentionally hide information, or don‚Äôt even have bug trackers at all.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn3&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn3_back&#34;&gt;&lt;b&gt;3.&lt;/b&gt;&lt;/a&gt; When the developer‚Äôs bug&#xA;    tracker is information-poor, then researchers‚Äô bug trackers, advisories, and&#xA;    blogs become more authoritative.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn4&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#fn4_back&#34;&gt;&lt;b&gt;4.&lt;/b&gt;&lt;/a&gt; I once really had a bug&#xA;    like this, on a security review engagement years ago. The client told me that&#xA;    their biggest fear was that 1 tenant in their multi-tenant platform would starve&#xA;    other tenants of resources, so they had strict quotas around CPU time and memory&#xA;    allocation. I was able to make &lt;a&#xA;        href=&#34;https://stackoverflow.com/questions/44487537/why-does-naive-string-concatenation-become-quadratic-above-a-certain-length&#34;&gt;the&#xA;        string allocation routine in their language runtime go quadratic&lt;/a&gt; in a way&#xA;    that their quota system couldn‚Äôt see, but which I could and did time remotely. I&#xA;    fired off a few pathological requests, and the development server became&#xA;    unresponsive. So I wrote it up and went to lunch, since I couldn‚Äôt test any&#xA;    more. For this client, it was the most high-priority bug to fix; but for others,&#xA;    it might not matter as much or at all.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2022/07/10/fraught-vdbs/index.html</guid>
      <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Still Waiting For A Defense Of Cryptoassets</title>
      <link>https://noncombatant.org/2022/06/11/still-waiting-for-defense-cryptoassets/index.content</link>
      <description>&lt;h1&gt;Still Waiting For A Defense Of Cryptoassets&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;11 June 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In response to &lt;a href=&#34;https://concerned.tech/&#34;&gt;the Letter in Support of&#xA;        Responsible Fintech Policy&lt;/a&gt;, a factual and reasonable call for Congress to&#xA;    resist intense lobbying from crypto-speculators and venture capitalists&lt;a href=&#34;#fn1&#34; id=&#34;fn1_back&#34;&gt;‚ë†&lt;/a&gt;,&#xA;    cryptographer Matthew Green has responded&#xA;    with a blog post &lt;a href=&#34;https://blog.cryptographyengineering.com/2022/06/09/in-defense-of-cryptocurrency/&#34;&gt;In&#xA;        defense of crypto(currency)&lt;/a&gt; that doesn‚Äôt effectively rebut the letter to&#xA;    Congress. Instead, he confirms most of their points.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(I say &lt;i&gt;cryptoassets&lt;/i&gt;, not &lt;i&gt;cryptocurrencies&lt;/i&gt;, because they‚Äôre not&#xA;    viable as currencies: they‚Äôre designed to be &lt;a href=&#34;https://en.wikipedia.org/wiki/Deflation&#34;&gt;deflationary&lt;/a&gt; and&#xA;    have proven&#xA;    &lt;a href=&#34;https://www.coindesk.com/price/bitcoin/&#34;&gt;absurdly volatile&lt;/a&gt;. Of&#xA;    course, &lt;a href=&#34;https://en.wikipedia.org/wiki/Greater_fool_theory&#34;&gt;the greater&#xA;        fool&lt;/a&gt; left holding the bag will find they‚Äôre not assets in the colloquial&#xA;    sense, either.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I wouldn‚Äôt normally bother writing about cryptoassets, because they‚Äôre absurd&#xA;    and &lt;a href=&#34;https://web3isgoinggreat.com/&#34;&gt;immediately discredit themselves&lt;/a&gt;&#xA;    better than I could. However, Green‚Äôs defense is interesting because he has&#xA;    significant credentials and experience in cryptography. He is also a&#xA;    co-developer of a leading privacy-protective (&lt;a href=&#34;https://www.coindesk.com/price/zcash/&#34;&gt;and deflationary&lt;/a&gt;)&#xA;    cryptoasset,&#xA;    &lt;a href=&#34;https://z.cash/&#34;&gt;Zcash&lt;/a&gt;. So we can reasonably hope for&#xA;    better-informed and coherent arguments than we normally see from&#xA;    crypto-boosters.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But the fact that a uniquely-qualified expert in the field is not able to&#xA;    rebut legitimate concerns, including the ones he raises, is interesting enough&#xA;    to comment on. Like Green, I‚Äôm sure I‚Äôll regret this.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;    &lt;h2&gt;Objection: ‚ÄúCryptocurrency is terrible for the&#xA;        environment‚Äù&lt;/h2&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Green cedes this point. His rebuttal is that we can fix that with&#xA;    what he agrees is oligarchy:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;Proof-of-stake systems are not perfect: they still lead to some&#xA;    centralization of power, since in this paradigm the rich tend to get richer.&#xA;    However it‚Äôs hard to claim that the result will be worse than the&#xA;    semi-centralized mess that proof-of-work mining has turned into.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;While &lt;a href=&#34;https://ethereum.org/en/energy-consumption/&#34;&gt;boosters estimate&#xA;        that proof-of-stake will reduce energy consumption by 3 orders of magnitude&lt;/a&gt;,&#xA;    it‚Äôs worth noting that oligarchy is very bad, actually&lt;a href=&#34;#fn2&#34; id=&#34;fn2_back&#34;&gt;‚ë°&lt;/a&gt;. It‚Äôs something we should&#xA;    be looking to solve, not&#xA;    exacerbate. People who don‚Äôt like centralization should, in theory, agree; but,&#xA;    of course, most anarcho-capitalists believe that &lt;b&gt;they&lt;/b&gt; will get to be &lt;a&#xA;        href=&#34;https://madmax.fandom.com/wiki/Immortan_Joe&#34;&gt;Immortan Joe&lt;/a&gt;. When you&#xA;    scratch the surface of anarcho-capitalism you typically find feudalism, as we do&#xA;    here.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So we don‚Äôt seem to have any solution to the theoretical&lt;a href=&#34;#fn3&#34; id=&#34;fn3_back&#34;&gt;‚ë¢&lt;/a&gt; computing science&#xA;    problem of distributed consensus that&#xA;    isn‚Äôt also hugely destructive to the world in some way. Green presents no&#xA;    argument that the best way to solve ‚Äúthe semi-centralized mess that&#xA;    proof-of-work mining has turned into‚Äù is anything other than simply not doing&#xA;    PoW or PoS.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To round this section out, Green repeats the punchline that Ethereum 2 is&#xA;    coming &lt;a href=&#34;https://www.coindesk.com/business/2022/04/13/ethereum-merge-no-longer-expected-in-june/&#34;&gt;Real&#xA;        Soon Now&lt;/a&gt;, and mentions in passing that &lt;a&#xA;        href=&#34;https://foreignpolicy.com/2021/05/23/cryptocurrency-chia-waste-resources-bitcoin/&#34;&gt;wasting&#xA;        hard drives&lt;/a&gt; is also an option.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;    &lt;h2&gt;Objection: ‚ÄúPublic blockchains can never support banking&#xA;        features like transaction reversal.‚Äù&lt;/h2&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Green‚Äôs rebuttal seems to be twofold: (1) stablecoins are centralized and&#xA;    hence can freeze or burn money; and (2) smart contracts could say anything,&#xA;    including provisions for reversal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the cryptoasset ideology, centralization is The Big Problem That Must Be&#xA;    Solved (Unless We Get To Be The Feudal Lords, In Which Case Centralization Is&#xA;    Awesome). So presenting centralization as a solution is not functional as a&#xA;    rebuttal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There‚Äôs also the small matter that &lt;a href=&#34;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3888752&#34;&gt;stablecoins&#xA;        are basically a rebirth of the ‚Äòwildcat‚Äô banks of the 19th century&lt;/a&gt; ‚Äî¬†hardly&#xA;    a compelling vision for the future.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It might be true that smart contracts could have provisions for reversal, but&#xA;    the reality on the ground today is that ‚Äòcode is law‚Äô, those ‚Äòlaws‚Äô don‚Äôt&#xA;    typically have reversal provisions, and they end up being &lt;a&#xA;        href=&#34;https://news.ycombinator.com/item?id=27665297&#34;&gt;‚Äúself-funding bug&#xA;        bounties‚Äù&lt;/a&gt; that just destroy people‚Äôs ‚Äòassets‚Äô in an automated way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Green does not mention that stablecoins have a history of being &lt;a&#xA;        href=&#34;https://crypto-anonymous-2021.medium.com/the-bit-short-inside-cryptos-doomsday-machine-f8dcf78a64d3&#34;&gt;fantastically&#xA;        crimey&lt;/a&gt; and/or &lt;a&#xA;        href=&#34;https://www.cnet.com/personal-finance/crypto/luna-crypto-crash-how-ust-broke-and-whats-next-for-terra/&#34;&gt;not&#xA;        even a little bit stable&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So perhaps the letter authors are wrong that public blockchains can ‚Äúnever‚Äù&#xA;    support transaction reversal. Anyway, the combination of reversible +&#xA;    decentralized doesn‚Äôt exist now. Perhaps there will be a flurry of innovation in&#xA;    the area of smart contracts that enable refunds, but we‚Äôd still face the&#xA;    question of why that‚Äôs better than regular bank databases.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;    &lt;h2&gt;Objection: ‚ÄúCryptocurrency doesn‚Äôt scale [or the fees are too&#xA;        damned high]‚Äù&lt;/h2&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Again, Green starts out by confirming the critics‚Äô point. He reassures us&#xA;    that the problem is &lt;a href=&#34;https://wiki.c2.com/?SimpleMatterOfProgramming&#34;&gt;A&#xA;        Simple Matter Of Programming&lt;/a&gt;, but cautions us that while the ideal speed-up&#xA;    would be 100x ‚Äî¬†within an order of magnitude of what Visa can handle on a&#xA;    non-holiday now with 1970s technology, so maybe borderline feasible ‚Äî¬†the&#xA;    reality won‚Äôt be that big.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Nicholas Weaver, one of the lead signers of the letter, has &lt;a&#xA;        href=&#34;https://www.usenix.org/publications/loginonline/web3-fraud&#34;&gt;a different&#xA;        back-of-the-envelope calculation&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;    &lt;p&gt;Estimating the cost (measured in ‚Äògas‚Äô) of an arbitrary computation is&#xA;        complex but let‚Äôs assume that we are only interested in the most simple&#xA;        operation: 256 bit integer addition. Each addition costs 3 gas each. So on a&#xA;        worldwide basis this system rates at 600,000 adds per second.&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;Compare this amount of compute to a Raspberry Pi 4, a $45 single-board&#xA;        computer which has four processors running at 1.5 GHz. Each core has 2 ALUs and&#xA;        it will take 4 instructions to perform a 256 bit addition, as the basic unit for&#xA;        the Raspberry Pi (and most other modern computers) is 64 bits. So each core has&#xA;        a peak performance of 750,000,000 adds per second for a total peak of&#xA;        3,000,000,000 adds per second. Put bluntly, the Ethereum ‚Äúworld computer‚Äù has&#xA;        roughly 1/5,000 of the compute power of a Raspberry Pi 4!&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;By Weaver‚Äôs critical estimate, even the big dream of a 100x speed-up is not&#xA;    enough to make the Ethereum network a good use of the planet‚Äôs computational&#xA;    resources. Nor would the Ethereum Foundation‚Äôs claim of a 2000x speed-up enable&#xA;    the Ethereum network to outpace a Raspberry Pi.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Green also confirms that&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;Many defenders have tried to paint the electricity consumption of&#xA;    Bitcoin and other PoW currencies as ‚Äúgreen‚Äù or define it as a form of energy&#xA;    storage. This is dishonest nonsense: estimates hold that at east 60% of mining&#xA;    energy consumption still comes from fossil sources.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Perhaps some other defense of cryptocurrencies will hold. Let‚Äôs see:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;    &lt;h2&gt;Objection: ‚ÄúThere is no privacy on blockchains (or there is too&#xA;        much privacy)‚Äù&lt;/h2&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;There has, in fact, been innovation in cryptoasset privacy, and Green‚Äôs own&#xA;    work demonstrates that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, that‚Äôs very bad, even if also potentially good in some way. &lt;a&#xA;        href=&#34;https://cryptonews.com/exclusives/blockchain-and-the-utopia-of-a-anarcho-capitalist-society-2763.htm&#34;&gt;The&#xA;        anarcho-capitalist dream of cryptoassets&lt;/a&gt; ‚Äî¬†i.e. &lt;a&#xA;        href=&#34;https://www.antipope.org/charlie/blog-static/2013/12/why-i-want-bitcoin-to-die-in-a.html&#34;&gt;tax&#xA;        evasion and money-laundering&lt;/a&gt; ‚Äî is one of the only parts of the cryptoasset&#xA;    dream that reliably comes true in practice. The cryptoasset economy has been a&#xA;    huge ‚Äòsuccess‚Äô in enabling &lt;a&#xA;        href=&#34;https://blog.chainalysis.com/reports/2022-crypto-crime-report-preview-ransomware/&#34;&gt;ransomware&lt;/a&gt;,&#xA;    &lt;a href=&#34;https://blog.chainalysis.com/reports/law-enforcement-agencies-cryptocurrency/&#34;&gt;CSAM&lt;/a&gt;,&#xA;    and &lt;a&#xA;        href=&#34;https://www.reuters.com/technology/us-ties-north-korean-hacker-group-lazarus-huge-cryptocurrency-theft-2022-04-14/&#34;&gt;Kim&#xA;        Jong Un‚Äôs nuclear program&lt;/a&gt; (on top of the more mundane phenomenon of regular&#xA;    people losing their money).&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It‚Äôs not clear why people who want functioning government, un-abused&#xA;    children, and fewer nuclear weapons would welcome a more-private cryptoasset.&#xA;    Perhaps there is an argument that the potential benefits would outweigh the&#xA;    actual harms we endure right now, but Green doesn‚Äôt make it in this article, and&#xA;    doesn‚Äôt contend with the harms.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Green attempts to paint the status quo as equivalently risky as the current&#xA;    systems of exchange:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;But at very least they‚Äôll be better than our current&#xA;    collect-it-all-and-then-hand-it-to-hackers approach, which certainly has not&#xA;    done us very many favors.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;but it‚Äôs hard not to see cryptoassets as even more accurately described as&#xA;    ‚Äúhanding it to hackers‚Äù.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;    &lt;h2&gt;So why do I care about any of this?&lt;/h2&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In this section, Green presents the problems that cryptoassets should&#xA;    supposedly solve, and which should motivate a long blog post to defend&#xA;    cryptoassets. Buried the lede, tbh, but:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;Credit card fees are too high&lt;/li&gt;&#xA;    &lt;li&gt;Credit cards are still prone to the same kinds of fraud as in 1995&lt;/li&gt;&#xA;    &lt;li&gt;We don‚Äôt have privacy in our payments&lt;/li&gt;&#xA;    &lt;li&gt;You can‚Äôt pay with your phone unless you want to give control to&#xA;        corporations&lt;/li&gt;&#xA;    &lt;li&gt;Regulatory capture&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;After 4,000 words in defense of cryptoassets, this is the&#xA;    &lt;s&gt;lede&lt;/s&gt;conclusion:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;    &lt;p&gt;I don‚Äôt know if blockchains are the solution to this problem. [...]&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;So while I don‚Äôt know if cryptocurrency will be the answer, I‚Äôm just hopeful&#xA;        that something will be.&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;So at the end of what could be a strong defense of cryptoassets, we find that&#xA;    they are not in fact defensible, and that the letter to Congress is basically&#xA;    right on every point.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But, the problems Green identifies are real, and it would be good to solve&#xA;    them. So let‚Äôs consider how cryptoassets deal with these problems.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Credit card fees are too high: As Green notes, cryptoasset fees are not&#xA;    exactly low. &lt;a&#xA;        href=&#34;https://www.theverge.com/2021/11/24/22800995/constitutiondao-refund-progress-steep-gas-fees-cryptocurrency&#34;&gt;In&#xA;        some cases, they‚Äôre a deal-breaker&lt;/a&gt;. They are also far more volatile. And&#xA;    there is no viable solution at hand, in Green‚Äôs post or elsewhere.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Credit cards are still prone to fraud: Clearly, this is as true today as it&#xA;    was in 1995. Unfortunately, cryptoassets have not only not reduced fraud but&#xA;    have brought us new and exciting additional forms of fraud. ‚ÄúBack in my day,‚Äù&#xA;    I‚Äôll say, ‚Äúwe had fewer forms of financial fraud!‚Äù The grandkids roll their eyes&#xA;    in disbelief.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We don‚Äôt have privacy in our payments: As above, this is a policy debate that&#xA;    we can and should have. Whatever approach to payment privacy we take, it will&#xA;    have to do something to mitigate the severe harms that sort-of-private and&#xA;    pseudonymous cryptocurrencies have enabled and exacerbated.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And it will require a nuanced construction of privacy, which is often&#xA;    presented as ‚Äî¬†but which is not ‚Äî a simple binary condition. (It‚Äôs not even as&#xA;    simple as a spectrum along a single axis.) There does not yet appear to be a&#xA;    plausible approach on the table that provides people privacy (however defined)&#xA;    and yet stops at least some large-scale, society-damaging crime. Maybe&#xA;    someday.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can‚Äôt pay with your phone without giving control to corporations: That&#xA;    does seem to be true, whether it‚Äôs to Apple, Google, Safaricom (which operates&#xA;    M-Pesa in Kenya), PayPal, Zelle, or various state-capital corporations in China.&#xA;    Since Green dismisses existing state and government solutions, I take it he&#xA;    would only be satisfied by currency purely run on distributed consensus. Thus he&#xA;    appears to embrace the anarcho-capitalist dream, but doesn‚Äôt have anything to&#xA;    say (in this article) about what would check and balance capital power &lt;a&#xA;        href=&#34;https://www.washingtonpost.com/opinions/2020/04/10/when-you-drown-government-bathtub-people-die/&#34;&gt;once&#xA;        government is ‚Äúdrowned in the bathtub‚Äù&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Regulatory capture: Recall that the letter to Congress was from concerned&#xA;    experts &lt;b&gt;warning legislators to be wary of regulatory capture by speculators&#xA;        and VCs&lt;/b&gt; ‚Äî and, again, Green says he broadly agrees with the lead signers‚Äô&#xA;    spirit ‚Äî¬†so it‚Äôs hard to see how cryptoassets are a solution to regulatory&#xA;    capture. In fact that‚Äôs the problem at hand!&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Green‚Äôs defense of cryptoassets is no more coherent than what we‚Äôve seen&#xA;    before. But it does have the virtue of honesty, which inevitably makes it a very&#xA;    weak defense of cryptoassets.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Letter in Support of Responsible Fintech Policy stands as reasonable&#xA;    advice to legislators, and cryptoassets still look like &lt;a href=&#34;https://webcomicname.com/post/152958755984&#34;&gt;a&#xA;        change for the&#xA;        worse&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn1&#34;&gt;&lt;/a&gt;&#xA;    &lt;a href=&#34;#fn1_back&#34;&gt;&lt;b&gt;1.&lt;/b&gt;&lt;/a&gt; I also signed it, but&#xA;    was not a lead signer nor an author of it. I was not involved in any way; I just&#xA;    think the authors are right.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn2&#34;&gt;&lt;/a&gt;&#xA;    &lt;a href=&#34;#fn2_back&#34;&gt;&lt;b&gt;2.&lt;/b&gt;&lt;/a&gt; If I could just&#xA;    interject for a moment, what people typically refer to as PoS is, in fact,&#xA;    proof-of-oligarchy, or as I‚Äôve recently taken to calling it, PoO.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a id=&#34;fn3&#34;&gt;&lt;/a&gt;&#xA;    &lt;a href=&#34;#fn3_back&#34;&gt;&lt;b&gt;3.&lt;/b&gt;&lt;/a&gt; I mean&#xA;    &lt;i&gt;theoretical&lt;/i&gt; in the technical sense, not in a colloquial sense of&#xA;    ‚Äúunimportant‚Äù. It would be useful to have a solution to the distributed&#xA;    consensus problem. But we don‚Äôt need a solution so badly that burning the Earth&#xA;    is a good idea, and we don‚Äôt need one that furthers anarcho-capitalism.&#xA;&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2022/06/11/still-waiting-for-defense-cryptoassets/index.html</guid>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Getting A Bit More From The Minor Pentatonic</title>
      <link>https://noncombatant.org/2022/06/01/a-bit-more-from-the-minor-pentatonic/index.content</link>
      <description>&lt;h1&gt;Getting A Bit More From The Minor Pentatonic&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;1 June 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Guitar players are always bangin‚Äô on the familiar ‚Äúblues box‚Äù: the standard&#xA;pentatonic scale shape. (Example üÑ∞, below, shows it in E minor.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But, there are 4 other modes of a 5-note scale. &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Pentatonic_scale#Pentatonic_scales_found_by_running_up_the_keys_C,_D,_E,_G_and_A&#34;&gt;Wikipedia&#xA;shows them in A Minor/C Major&lt;/a&gt;, but we‚Äôll continue to start from E, since&#xA;we‚Äôre guitar players. Examples üÑ±, üÑ≤, üÑ≥, and üÑ¥ show new box shapes for those 4&#xA;modes, going down from E Minor (the viii/i scale degree), to D Blues Major (the&#xA;VII scale degree), to B Blues Minor (the v scale degree), to A Suspended (the iv&#xA;scale degree), to G Major (the III scale degree).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In these examples, take a look at the fretting-hand fingerings I suggest. In&#xA;most cases, you can stick to a friendly ‚Äú1 finger per fret‚Äù pattern. But there&#xA;is 1 stretch: In A Suspended, I mostly stay in the 5th position except that I&#xA;stretch back with my ‚ë† to get the B note on the G string (4th fret). And there&#xA;are some places where I use ‚ë° and ‚ë£ instead of the more comfortable ‚ë† and ‚ë¢ and&#xA;‚ë† and ‚ë£ grips. I find this to be good exercise.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Wikipedia gives many names for the modes, based on their usage in several&#xA;cultures. Note that they use ‚Äúblues‚Äù not in what I consider the usual way ‚Äî¬†i.e.&#xA;a pentatonic scale with an additional ‚Äòblue‚Äô note, the ‚ô≠5 in Minor and the ‚ô≠3 in&#xA;Major scales ‚Äî¬†but to refer to modes that resemble, but are not quite the same&#xA;as, Pentatonic Minor and Pentatonic Major.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that we use upper-case Roman numerals for major scales and chords, like&#xA;G = III, and lower-case numerals for minor scales and chords, like E = i and B =&#xA;v.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You might wonder why, for example, we call the VII scale, D Blues Major, a&#xA;&lt;i&gt;major&lt;/i&gt; scale ‚Äî¬†it has no 3rd (no F), so it can‚Äôt really be major or minor,&#xA;right? Well, (a) we have to call it something; and (b) in the key of E minor,&#xA;D‚Äôs major 3rd (F‚ôØ) is present. So if you were playing in the modes of E&#xA;Pentatonic Minor, but you absolutely had to play an F of some kind, it‚Äôd most&#xA;likely be an F‚ôØ. So in a pinch the mode based on D is notionally ‚Äòmajor‚Äô.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Similarly, the mode based on A would be ‚Äòminor‚Äô if we absolutely had to pick.&#xA;(E Minor has C natural, A‚Äôs minor 3rd.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In example üÑµ, I show some open-position chords. These are 4-note chords that&#xA;this scale generates. In a normal 7-note diatonic scale, the notes of a 4-note&#xA;chord are usually the 1st, 3rd, 5th, and 7th degrees: the 7th chords. But in a&#xA;pentatonic scale, we aren‚Äôt necessarily going to get those specific scale&#xA;degrees for a given chord ‚Äî¬†they might not be present. In such cases, I chose&#xA;the note 1 scale degree down from the expected note. For example, where there is&#xA;no 3rd, I use the 2nd (see the chords based on D and A). Where there is no 7th,&#xA;I use the 6th (see the chords based on D and G). For the chord starting from B,&#xA;there is no 5th (would be F‚ôØ), so I went down and selected the 4th (E).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But you could make other choices!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Normally, when you‚Äôre playing your 12-bar blues and jamming in your&#xA;pentatonic box, you play the i, iv, and v chords (in E: Em(7), Am(7), and&#xA;Bm(7)). But those chords use some notes that don‚Äôt strictly exist in this&#xA;pentatonic scale. By sticking strictly to the notes of this scale, we get what I&#xA;think are more interesting chords.&lt;/p&gt;&#xA;&#xA;&lt;iframe src=&#34;more-from-pentatonic.pdf&#34; width=&#34;100%&#34; height=&#34;500&#34;&#xA;loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2022/06/01/a-bit-more-from-the-minor-pentatonic/index.html</guid>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Simple And Terrible Machines</title>
      <link>https://noncombatant.org/2022/05/22/simple-terrible-machines/index.content</link>
      <description>&lt;h1&gt;Simple And Terrible Machines&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;22 May 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As an artifact of industrial engineering, it is very hard to beat the &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Fender_Telecaster&#34;&gt;Fender Telecaster&lt;/a&gt;:&#xA;    durability, repairability, usability, fitness for purpose (sound), and low cost&#xA;    are all hallmarks of its design. Take a moment to admire &lt;a&#xA;        href=&#34;https://twitter.com/colbertlateshow/status/1452799769286483980&#34;&gt;a&#xA;        particularly fine specimen&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In a sure sign of quality, the Tele patinates well. &lt;a href=&#34;https://www.chicagofretworks.com/relic-service/&#34;&gt;People&#xA;        try to fake&#xA;        patination&lt;/a&gt;, which is the nadir of cringe yet the expression of a yearning to&#xA;    replicate the outward signs of timeless quality.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Tele is at the top of an uncanny peak: like a Dutch bicycle, it is&#xA;    possible to improve on the design, but only by incurring severe trade-offs.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;You could use &lt;a href=&#34;https://en.wikipedia.org/wiki/Humbucker&#34;&gt;humbucking&#xA;            pickups&lt;/a&gt;, but you‚Äôd lose the characteristic bright sound of the bridge&#xA;        pickup.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;You could put a humbucker in the neck pickup position only, but might have&#xA;        have an output balance problem relative to the bridge position. Compensating&#xA;        with a high-output single-coil pickup in the bridge position would also&#xA;        compromise the signature treble clarity.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;You could add more frets ‚Äî¬†traditional Teles have 21 or 22 ‚Äî but the closer&#xA;        you move the neck pickup backward toward the bridge, the more you lose its&#xA;        distinctive sound.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;You could ease playability by shortening &lt;a&#xA;            href=&#34;https://en.wikipedia.org/wiki/Scale_length_(string_instruments)&#34;&gt;the scale&#xA;            length&lt;/a&gt;, but that would also reduce the overall snappy, ‚Äòtight‚Äô sound of the&#xA;        instrument.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The key, and perhaps sole, trade-off-free improvement available in the design&#xA;    is in the usability of the controls. The traditional Tele has a 3-way pickup&#xA;    selector switch, with the volume knob behind it, and the tone (treble&#xA;    attenuator) behind that. The pickup selector switch is a bit too close to the&#xA;    volume knob when it‚Äôs set all the way ‚Äòback‚Äô (toward the bridge). And it‚Äôs nice&#xA;    to be able to &lt;a href=&#34;https://www.youtube.com/watch?v=LCiSOEHdkFQ&#34;&gt;adjust the&#xA;        volume with your pinkie while picking&lt;/a&gt; ‚Äî but the Tele‚Äôs volume knob is too&#xA;    far away to make that easy.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It is easy to &lt;a href=&#34;https://www.premierguitar.com/gear/tele-control-plate-mods&#34;&gt;improve the&#xA;        usability of the controls&lt;/a&gt; by reversing the control plate, and many players&#xA;    do this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Fender resolved the switch and knob issues entirely with &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Fender_Stratocaster&#34;&gt;the Stratocaster&lt;/a&gt;,&#xA;    and made &lt;a&#xA;        href=&#34;https://www.premierguitar.com/gear/reviews/esoterica-electrica-the-incredibly-smart-and-simple-strat&#34;&gt;further&#xA;        reductions in the cost of manufacture and repair&lt;/a&gt; as well. &lt;a&#xA;        href=&#34;https://www.ibanez.com/usa/products/detail/yy20_1P_01.html&#34;&gt;The Ibanez&#xA;        Talman&lt;/a&gt; is a Telecaster with the Stratocaster controls solution.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Tele is also very efficient in its use of materials (which are plentiful,&#xA;    non-endangered, and cheap: maple for the neck, and ash or alder for the body).&#xA;    Little of the wood is thrown away when sculpting the neck and the body, relative&#xA;    to the manufacturing techniques used in other instrument designs. For example,&#xA;    in &lt;a href=&#34;https://www.maegenwellsguitars.com/mwg&#34;&gt;hand-carved archtop&#xA;        guitars&lt;/a&gt;, the top begins life as a 1‚Äù-thick chunk of wood. By the end, no&#xA;    part of it is more than 0.15‚Äù thick. As beautiful works of art as they&#xA;    undeniably are, they are not parsimonious. Another popular guitar design calls&#xA;    for a CNC machine to sculpt a neck that is at most 1‚Äù thick, out of a 3‚Äù-thick&#xA;    block.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unlike almost all other musical instrument designs, the Telecaster is&#xA;    incredibly hardy. It is 0% fragile ‚Äî¬†and yet also readily repairable and&#xA;    modifiable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are &lt;i&gt;implementation&lt;/i&gt; (not design) improvements possible in the&#xA;    Telecaster. Noiseless single-coil pickups, a tapered neck joint, chambered body,&#xA;    and locking tuners are standard for most manufacturers now (except Fender). The&#xA;    changes increase the cost a little, but increase usability a lot.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Tele, like Lisp and Algol, represents the very best that could have been&#xA;    done with the technology of the (roughly same) time, and remains very hard to&#xA;    improve on. For example, modern languages like Python and JavaScript are&#xA;    basically Lisp, but without the macro/DSL wonderland that Lisp‚Äôs trivial syntax&#xA;    affords. You get better everyday UX, but at a significant cost in&#xA;    functionality.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm fascinated by this uncanny quality peak, in whatever type of engineering&#xA;    object, in which further improvements are few and far between. I wonder what&#xA;    peaks we could be climbing now but aren‚Äôt. Is there a better systems language&#xA;    than Rust, which we should be running on... what? RISC-V? Could we get the&#xA;    benefits of Rust, but with a more gradual learning curve? Could we get the&#xA;    performance of x64 without the cruft?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It might be easier to get to the uncanny peak with simple machines like&#xA;    musical instruments and bicycles ‚Äî there are perhaps fewer decision points and&#xA;    trade-offs and things that can break. But I‚Äôm reminded of this Twitter&#xA;    exchange:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;    &lt;p&gt;@taber@woof.group @cakesandcourage &lt;a href=&#34;https://twitter.com/cakesandcourage/status/1461481653059129345&#34;&gt;Nov&#xA;            18,&#xA;            2021&lt;/a&gt;&lt;br /&gt;&#xA;&#xA;        a popular myth is that people who are Very Computer have computers that work.&#xA;        nothing could be further from the truth. the Very Computer are capable of&#xA;        generating much more novel and fascinating ways to make computers not fucking&#xA;        work and exercise this capability wantonly&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;celphase @celphase &lt;a href=&#34;https://twitter.com/celphase/status/1461505813852434433&#34;&gt;Nov 18,&#xA;            2021&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;    &lt;figure&gt;&lt;img src=&#34;mild-proficiency.png&#34; width=&#34;496&#34; height=&#34;287&#34; alt=&#34;A graph of&#xA;y = ‚Äúamount of tech issues‚Äù and x = ‚Äútechnical proficiency‚Äù that shows ‚Äúno&#xA;computer‚Äù at the origin; ‚Äúpoweruser‚Äù at y = 50%, x = 25%; ‚Äúblessed valley of&#xA;mild proficiency‚Äù at y = 25%, x = 50%; and then a steep upward slope with&#xA;varying levels of self-inflicted Linux: ‚ÄúMaybe I should try Arch‚Äù, ‚ÄúMaybe I&#xA;should try Gentoo‚Äù, ‚ÄúI recompiled the Linux kernel on my smart-fridge and now my&#xA;printer no longer works on any of my devices.&#34; loading=&#34;lazy&#34; /&gt;&#xA;        &lt;figcaption&gt;The&#xA;            Blessed Valley Of Mild Proficiency, by @celphase.&lt;/figcaption&gt;&#xA;    &lt;/figure&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Maybe, for Terrible Machines like computers and programming languages, the&#xA;    Blessed Valley Of Mild Proficiency &lt;b&gt;is&lt;/b&gt; the uncanny peak.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2022/05/22/simple-terrible-machines/index.html</guid>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Taxonomy Of In-The-Wild Exploitation</title>
      <link>https://noncombatant.org/2022/04/22/itw-taxonomy/index.content</link>
      <description>&lt;h1&gt;Taxonomy Of In-The-Wild Exploitation&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;16 April 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As too few software engineers know, &lt;a&#xA;    href=&#34;https://alexgaynor.net/2020/may/27/science-on-memory-unsafety-and-security/&#34;&gt;about&#xA;    65% of known vulnerabilities in C/C++ codebases are due to memory unsafety&lt;/a&gt;.&#xA;  The ‚Äú65% finding‚Äù, as I‚Äôll call it, is consistent across vendors and across&#xA;  decades. Obviously, that conclusion comes from data biased in a certain way:&#xA;  these are the vulnerabilities that attackers and defenders have been&#xA;  consistently able to find; these are the vulnerabilities that vendors are&#xA;  willing to disclose at all; these are the vulnerabilities that we choose to talk&#xA;  about.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We know there‚Äôs more going on out there. Even so, the finding is useful and&#xA;  actionable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are also several efforts to track known vulnerabilities that we know&#xA;  have actually been exploited in the wild (ITW):&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;  &lt;li&gt;&lt;a href=&#34;https://www.cisa.gov/known-exploited-vulnerabilities-catalog&#34;&gt;CISA‚Äôs&#xA;      Known Exploited Vulnerabilities Catalog&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;&lt;a&#xA;      href=&#34;https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/view#gid=2129022708&#34;&gt;Project&#xA;      Zero‚Äôs 0day In The Wild spreadsheet&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1FslzTx4b7sKZK4BR-DpO45JZNB1QZF9wuijK3OxBwr0/edit#gid=0&#34;&gt;Tom&#xA;      Ritter‚Äôs Browser Exploit History&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;(See also &lt;a href=&#34;https://github.com/divergentdave/icscert-advisories-scraper&#34;&gt;David Cook‚Äôs&#xA;    ICS-CERT Advisories Scraper&lt;/a&gt;, which is specific to ICS and covers more than&#xA;  just ITW bugs.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These datasets are also necessarily biased: these are (some of) the&#xA;  vulnerabilities attackers can find, and (some of) what they can actually field.&#xA;  But we also know that phishing and other social-engineering techniques account&#xA;  for a huge portion of real-world attacks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These different biases are useful: the more information we have about what‚Äôs&#xA;  possible and what attackers are really doing, the better we can respond ‚Äî¬†as&#xA;  long as we seek out a variety of datasets and remain aware of their biases. I‚Äôd&#xA;  love to see additional datasets with entirely different foci, e.g. credential&#xA;  and permission phishing, fake invoice fraud, USB drives with malware left&#xA;  sitting around... We might not be able to get data about side-channel attacks&#xA;  fielded ITW, but I can dream.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I was curious to see if the 65% finding aligned with what we see in CISA‚Äôs&#xA;  data. &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1JeN3F8EG6A_ckb7PDCHIuAocR8W-6UEu9kKoctJaF08/edit#gid=0&#34;&gt;I&#xA;    imported their CSV into a Google sheet, and started categorizing the CVEs&lt;/a&gt;&#xA;  according to a sketch of a taxonomy I came up with for this purpose, and by the&#xA;  implementation language of the target. (See the &lt;b&gt;type&lt;/b&gt; and &lt;b&gt;language&lt;/b&gt;&#xA;  columns.) To substantiate the classifications where the description was not&#xA;  obvious, I also added a column with details on the bug and/or its exploitation.&#xA;  This column usually contains a link to a proof of concept (PoC), an analysis, or&#xA;  other details.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additionally, Jack Cable mapped the CVEs to their CWEs (see new columns&#xA;  &lt;b&gt;cwe&lt;/b&gt; and &lt;b&gt;cwe2&lt;/b&gt;), and mapped those to the taxonomy described here.&#xA;  That analysis shows substantially different results, which is interesting. This&#xA;  suggests that CWEs (or any data in the CVE entry) don‚Äôt contain enough&#xA;  information to tell whether a vulnerability is memory related. For instance &lt;a&#xA;    href=&#34;https://cwe.mitre.org/data/definitions/20.html&#34;&gt;CWE-20, improper input&#xA;    validation&lt;/a&gt;, may or may not result in a memory-unsafety vulnerability.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Limitations Of This Analysis&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;It‚Äôs not complete: we haven‚Äôt finished categorizing all the bugs for&#xA;  &lt;b&gt;type&lt;/b&gt; (currently 60% done) nor for &lt;b&gt;language&lt;/b&gt; (currently 58%&#xA;  done).&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The way in which it‚Äôs incomplete is not random: I did a bunch of easy ones&#xA;  first, I did some searches for particular keywords and categorized those first,&#xA;  and so on. Therefore the percentages calculated at the top are not necessarily&#xA;  what we‚Äôll see once the categorization is complete.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My classifications might be wrong! It‚Äôd be nice to have more people go&#xA;  through and see if they agree with how I‚Äôve categorized things ‚Äî¬†some bugs might&#xA;  have the wrong &lt;b&gt;type&lt;/b&gt; or &lt;b&gt;language&lt;/b&gt;. If you can correct an error, fill&#xA;  in an unknown, or add more detail, please add a comment on a cell. Thanks! (See&#xA;  also the ‚ÄúUnknown‚Äù filter view.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There‚Äôs more to be done. For example, with some somewhat hairy spreadsheet&#xA;  code, you can find out some fun facts about the distribution of the bugs. For&#xA;  example, in cell F2, I‚Äôve calculated the percentage of C/C++ bugs that are&#xA;  memory unsafety (currently 55.18%):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;=round(&#xA;  multiply(&#xA;    100,&#xA;    divide(&#xA;      countifs(&#xA;        B10:B1000, &#34;=memory&#34;,&#xA;        A10:A1000, &#34;=C/C++&#34;),&#xA;      countif(A10:A1000, &#34;=C/C++&#34;)&#xA;    )&#xA;  ),&#xA;2)&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Since the time I started this lil project, CISA has added many more rows to&#xA;  their spreadsheet. And I have not done the same analysis with other datasets&#xA;  like P0‚Äôs and Ritter‚Äôs.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Taxonomy&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Here is how I categorize the vulnerabilities in CISA‚Äôs dataset:&lt;/p&gt;&#xA;&#xA;&lt;table&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;th class=&#34;bottom right&#34;&gt;Type&lt;/th&gt;&#xA;    &lt;th class=&#34;bottom&#34;&gt;Sarcastic Name&lt;/th&gt;&#xA;    &lt;th class=&#34;bottom&#34;&gt;Description&lt;/th&gt;&#xA;    &lt;th class=&#34;bottom&#34;&gt;Examples (non-exhaustive)&lt;/th&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;th class=&#34;right&#34;&gt;memory&lt;/th&gt;&#xA;    &lt;td&gt;‚ÄúC problems‚Äù&lt;/td&gt;&#xA;    &lt;td&gt;Spatial or temporal memory unsafety&lt;/td&gt;&#xA;    &lt;td&gt;Buffer overflow, use-after-free, write-what-where, double-free,&#xA;      leak or use of uninitialized memory&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;th class=&#34;right&#34;&gt;eval&lt;/th&gt;&#xA;    &lt;td&gt;‚ÄúLisp problems‚Äù&lt;/td&gt;&#xA;    &lt;td&gt;Treating attacker data as interpreted code&lt;/td&gt;&#xA;    &lt;td&gt;SQL injection, XSS, shell injection, deserializing evil objects and loading&#xA;      their evil classes&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;th class=&#34;right&#34;&gt;logic&lt;/th&gt;&#xA;    &lt;td&gt;‚ÄúBrain problems‚Äù&lt;/td&gt;&#xA;    &lt;td&gt;Errors in application-layer logic&lt;/td&gt;&#xA;    &lt;td&gt;Incorrect branch condition, incomplete information in branch condition, type&#xA;      confusion, integer semantic sadness that does not result in memory unsafety&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;th class=&#34;right&#34;&gt;configuration&lt;/th&gt;&#xA;    &lt;td&gt;‚ÄúFace-palm problems‚Äù&lt;/td&gt;&#xA;    &lt;td&gt;Errors in default or likely deployment configuration, misfeatures&lt;/td&gt;&#xA;    &lt;td&gt;Leaving the debug interface on in production, web shell as a ‚Äòfeature‚Äô,&#xA;      default passwords&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;th class=&#34;right&#34;&gt;cryptography&lt;/th&gt;&#xA;    &lt;td&gt;‚ÄúMath problems‚Äù&lt;/td&gt;&#xA;    &lt;td&gt;Errors in the use of cryptography, including not using it&lt;/td&gt;&#xA;    &lt;td&gt;N-once reuse, low-entropy keys, confidentiality where integrity is needed&#xA;      (or vice-versa, or both), plaintext&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;th class=&#34;right&#34;&gt;ux&lt;/th&gt;&#xA;    &lt;td&gt;‚ÄúHuman problems‚Äù&lt;/td&gt;&#xA;    &lt;td&gt;Problems that arise when the UI, UX, or social context does not match human&#xA;      needs, limitations, or expectations&lt;/td&gt;&#xA;    &lt;td&gt;Phishable credentials, affordances favoring errors, confusing UI or&#xA;      documentation, high effort/concentration required, UI redressing&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;a id=&#34;fn1_back&#34;&gt;&lt;/a&gt;&#xA;&#xA;&lt;p&gt;It‚Äôs difficult to create a universally-applicable taxonomy. (Ask any&#xA;  biologist.) You can see everything as a logic bug, or you can see C‚Äôs problems&#xA;  as being user experience bugs for developers (DX): affordances that favor&#xA;  errors, too hard to use consistently safely, and counter-intuitive&#xA;  semantics&lt;a href=&#34;#fn1&#34;&gt;‚ë†&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My categories are intentionally broad, for 2 reasons.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&#xA;  &lt;li&gt;The taxa in any taxonomy typically overlap, and with software bugs, they&#xA;    seem to overlap a lot. I‚Äôm trying to account for that while also making some&#xA;    rough decision.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;I just wanted to chew through CISA‚Äôs list of 616 bugs quickly enough to get&#xA;    a first-order approximation to the central question: ‚ÄúAre ‚Öî of the bugs&#xA;    attackers use against C/C++ programs memory unsafety bugs, or less, or more, or&#xA;    what? And what else might be going on out there?‚Äù&lt;/li&gt;&#xA;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;As a defender, I typically classify bugs by asking &lt;b&gt;what went wrong in the&#xA;    design or implementation, and how are we going to fix it&lt;/b&gt;. What would the fix&#xA;  look like, and can it be systematic or (semi-)automated? Checking bounds,&#xA;  correcting object lifetimes, fixing an &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;&#xA;  condition, fixing the deployment configuration? Un-shipping a misfeature? UX&#xA;  research?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now, sometimes we might exploit e.g. memory unsafety to achieve type&#xA;  confusion, or vice versa, or use e.g. buffer overflow to achieve command&#xA;  injection. I categorized these bugs by what I see as the earliest error (that we&#xA;  know of) in a possible chain of errors. (Although I won‚Äôt say ‚Äú&lt;a&#xA;    href=&#34;https://twitter.com/amyngyn/status/1072576388518043656&#34;&gt;root cause&lt;/a&gt;‚Äù,&#xA;  of course.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In some cases, memory safety would have stopped exploitation, even if&#xA;  memory unsafety is not the first error in the chain. I typically classified&#xA;  those as logic bugs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Notably, I am not classifying bugs by their outcomes during exploitation,&#xA;  e.g. information disclosure, remote code execution (RCE), local privilege&#xA;  escalation (LPE), denial of service (DoS), et c.: the same bug may have many&#xA;  possible outcomes. Nor do I classify by severity: everyone has a different&#xA;  threat model, so a standardized severity system is typically hard to apply&#xA;  meaningfully.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Patterns I Noticed&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;To see these patterns for yourself, it helps to make heavy use of the Filter&#xA;  View feature of Sheets. You can also make a copy and add in your own&#xA;  &lt;code&gt;=COUNTIF&lt;/code&gt;s and so on. I bet there are patterns I missed! Please add&#xA;  comments to the sheet or email me if you see something interesting.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Recurring Bug Types&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Path traversal accounts for a large chunk of vulnerabilities (which I&#xA;  categorize as logic). &lt;a href=&#34;/2017/11/07/problems-of-urls/&#34;&gt;As with URLs&lt;/a&gt;,&#xA;  text strings are an alluring but not consistently workable interface for&#xA;  describing paths from root to branch in a tree. People just can‚Äôt decode,&#xA;  resolve, or compare them consistently, and those are security-critical&#xA;  operations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There‚Äôs lots of ‚Äòremote shell as a feature‚Äô going on (which I classify as&#xA;  configuration). Debug interface? Quick-and-easy way to implement some&#xA;  functionality? Lack of proper library APIs for some functionality? All of the&#xA;  above, I‚Äôd imagine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;CISA‚Äôs data does not count UX bugs that make phishing (of various types) and&#xA;  misuse/misconfiguration more likely or easier to attack ‚Äî¬†but we know they are a&#xA;  big part of exploitation in real life. I suspect the ux category is vastly&#xA;  underrepresented. If we counted them, ux might be greater than all the other&#xA;  categories combined.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The goat in the room is credential phishing. &lt;b&gt;This fatal problem will&#xA;    remain rampant until we build support for WebAuthn into all important&#xA;    services.&lt;/b&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Big Head, Long Tail&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Unsurprisingly, the memory category is the biggest single category (so far),&#xA;  although it‚Äôs not fully 65% of the bugs used against C/C++ targets.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Keep in mind that the 65% finding is for codebases that are in C/C++, but&#xA;  this dataset describes systems implemented in a variety of languages ‚Äî¬†and most&#xA;  languages are memory-safe. Memory unsafety exploitation may be over-represented&#xA;  as an attack type in the dataset; i.e. perhaps attackers in the wild are&#xA;  favoring it because of the control such bugs provide, their skill sets, stealth,&#xA;  or similar kinds of reasons.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôd point to eval as the true second most immediately actionable category for&#xA;  fixing/exploiting (depending on your proclivities). There‚Äôs so much easy-to-find&#xA;  stuff in that category, with a variety of techniques for discovery.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The logic category is hugely broad ‚Äî¬†almost a default ‚Äî¬†so its prominence as&#xA;  second-biggest category might not be as meaningful or actionable. (Although you&#xA;  will see patterns in that category.) It represents a long tail of scattered bug&#xA;  classes and (hopefully) one-offs.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;The Poor State Of Information&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;We need to have a &lt;a href=&#34;https://sre.google/sre-book/postmortem-culture/&#34;&gt;blameless postmortem&lt;/a&gt;&#xA;  for a way of documenting vulnerabilities that is already dead.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These are vulnerabilities that affect people‚Äôs lives, government policy, the&#xA;  economy, civil society ‚Äî¬†all the bugs in question have been exploited ITW ‚Äî¬†yet&#xA;  there‚Äôs so much noise, obscurantism, and bravado that it‚Äôs often more difficult,&#xA;  not less, for people to decide what to do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We need to stop writing, and accepting, vague write-ups like ‚Äúexecute code&#xA;  via unspecified vectors‚Äù, ‚Äúallows remote attackers to cause a denial of service&#xA;  or possibly execute arbitrary code‚Äù, ‚Äúthe vulnerability is due to insufficient&#xA;  handling of [data]‚Äù, and so on. (These are real examples!)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A big part of the purpose ‚Äî or, potential ‚Äî¬†for public vulnerability&#xA;  announcements and reports is to teach and learn, mature the engineering culture,&#xA;  and above all to avoid repeating these problems. And for that, we need specifics&#xA;  and we need sufficient certainty. Being vague is not the most effective way to&#xA;  compensate for risk.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The people building the infrastructure of our world, and bodies like the &lt;a&#xA;    href=&#34;https://www.cisa.gov/cyber-safety-review-board&#34;&gt;Cyber Safety Review&#xA;    Board&lt;/a&gt;, are most effective when they have all the facts at hand. Aviation&#xA;  safety has made huge game-changing improvements over the decades, but not&#xA;  without full access to the (sometimes embarrassing) details. We need &lt;a&#xA;    href=&#34;http://www.feynman.com/science/the-challenger-disaster/&#34;&gt;Feynman&#xA;    explaining the Challenger explosion&lt;/a&gt;, not handwaving. The links I‚Äôve added in&#xA;  the &lt;b&gt;additionalDetail&lt;/b&gt; column are, overall, much more like the&#xA;  Feynman-grade stuff we need to get a real grip on what‚Äôs going on.&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;The Desperate Cry For True Facts&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;Working on this classification project required us to hunt for additional&#xA;  details when the official descriptions were lacking. In about 9 hours of work, I&#xA;  was able to get through about 45% of the 616 bugs. If the official descriptions&#xA;  had had enough content, I could likely have finished 100% in much less time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hunting for bug detail led me to the unfortunate conclusion that a CVE number&#xA;  is little more than a search keyword. You always have to go to hacker blogs, bug&#xA;  trackers, and find and read PoCs. Very occasionally, the vendor‚Äôs announcement&#xA;  would have more detail than the CVE entry.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Pro Tip: Don‚Äôt start by just searching for the CVE number. The top 10 hits&#xA;  are going to be just sites that copy the CVE entry. (I will file this as a&#xA;  Search quality bug when I get to work on Monday.) Instead, you have to be more&#xA;  precise (the quotes help):&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;  &lt;li&gt;&lt;code&gt;&#34;cve-abcd-efgh&#34; &#34;github&#34;&lt;/code&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;code&gt;&#34;cve-abcd-efgh&#34; &#34;blog&#34;&lt;/code&gt;&lt;/li&gt;&#xA;  &lt;li&gt;&lt;code&gt;&#34;cve-abcd-efgh&#34; &#34;project zero&#34;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Sometimes you can get some detail by searching Twitter, too.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Future&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Ultimately, all software bugs are logic errors ‚Äî¬†software is logic. But what&#xA;  I‚Äôm looking for are systematic ways to correct errors, and the bug&#xA;  classifications reflect that. As defenders, we shouldn‚Äôt fix individual buffer&#xA;  overflows; we must stop using C. We shouldn‚Äôt fix SQL injections; we must use&#xA;  parameterized queries. We shouldn‚Äôt fix shell injections; we must stop using&#xA;  &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;popen&lt;/code&gt;, and instead build and use real APIs.&#xA;  We shouldn‚Äôt fix instances of XSS; we must use a structured templating system.&#xA;  And so on.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Almost all of the exploited vulnerabilities are quite mundane, and solvable&#xA;  by mundane means. They‚Äôre not sexy or weird or surprising ‚Äî¬†and that‚Äôs good&#xA;  news. So much pain and trouble can be solved with simple tools that we already&#xA;  have.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We need to get increasingly clear about implementation quality requirements.&#xA;  This includes stopping new uses from getting into our codebases (with presubmit&#xA;  scripts or Git hooks) and systematically auditing for them and treating them as&#xA;  bugs and technical debt to prioritize paying off. Often, you can simply grep or&#xA;  &lt;a href=&#34;https://github.com/googleprojectzero/weggli&#34;&gt;weggli&lt;/a&gt; for these, and&#xA;  get a list. There‚Äôs also &lt;a href=&#34;https://codeql.github.com/&#34;&gt;CodeQL&lt;/a&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Our goal as software engineers should be to eventually get down to only bugs&#xA;  that are one-offs, specific to the application.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Thanks to Dev Akhawe for helping me categorize the bugs, and thanks to&#xA;  Jonathan Rudenberg and Eric Rescorla for reading early drafts and proposing&#xA;  improvements. Jack Cable mapped the CWEs to the taxonomy I use here. Any errors,&#xA;  and there are surely many, obviously remain my own.&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;a id=&#34;fn1&#34;&gt;&lt;/a&gt;&#xA;&#xA;&lt;p&gt;&lt;b&gt;&lt;a href=&#34;#fn1_back&#34;&gt;1.&lt;/a&gt;&lt;/b&gt; You might even call memory unsafety a form&#xA;  of eval, if you‚Äôre feeling silly (and I always am). I propose the following&#xA;  addendum to &lt;a href=&#34;https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule&#34;&gt;Greenspun‚Äôs 10th&#xA;    rule&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;  &lt;p&gt;Any sufficiently complicated C or Fortran program contains an ad hoc,&#xA;    informally-specified, bug-ridden, slow implementation of half of Common Lisp.&#xA;    This includes &lt;code&gt;eval&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;After all, &lt;a href=&#34;http://forum.ouah.org/FormatString.PDF&#34;&gt;what is&#xA;    &lt;code&gt;%n&lt;/code&gt; but a hard-to-use form of &lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;? ü§î ü§®&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2022/04/22/itw-taxonomy/index.html</guid>
      <pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>‚ÄúFlood‚Äù By Throwing Muses</title>
      <link>https://noncombatant.org/2022/04/04/throwing-muses-flood/index.content</link>
      <description>&lt;h1&gt;‚ÄúFlood‚Äù By Throwing Muses&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;4 April 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here‚Äôs another super-favorite: ‚ÄúFlood‚Äù by Throwing Muses, from the banger &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/University_(album)&#34;&gt;&lt;i&gt;University&lt;/i&gt;&lt;/a&gt;.&#xA;For me, it‚Äôs the feeling of waking up in the ICU, pumped to the gills full of&#xA;fentanyl, knowing that my Bright Light is there.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For this one, I‚Äôve tried to approximate the vocal melody and have taken a&#xA;wild stab at the articulation and (in the verse) the harmony. It‚Äôs good practice&#xA;to try to play vocal parts on your instrument!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The organic, ‚Äòno rules, just feels right‚Äô arrangement, with the odd numbers&#xA;of repeats and truncated repeats, is interesting to me. It underscores that the&#xA;accompaniment really follows the vocal ‚Äî¬†as sparse and as understated as it is,&#xA;the vocal is leading the guitars and drums around. Kristin Hersh isn‚Äôt afraid to&#xA;get a touch proggy, but she always does it in a song-y way. The nerd details&#xA;don‚Äôt seem premeditated as much as a side effect of just going where the lyric&#xA;needs to go, whenever that might happen. Not all feelings fit into 4 repeats of&#xA;a 4-bar phrase!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The bass gives the long verse phrase movement, guiding your body through the&#xA;narrative. Especially in bar 18, it takes you through the odd end of the verse&#xA;as it lands neatly at the bridge (and a deft key change).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I didn‚Äôt transcribe Jane Scarpantoni‚Äôs cello part, unfortunately, and I&#xA;didn‚Äôt write out all the vocal variations in the chorus. Perhaps I am a lazy&#xA;goat, but at least I got this far. I‚Äôm absolutely starving for dinner.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I really like suspended chords in general; but especially here, the way they&#xA;leave room for the vocals to provide the thirds. The guitar is out of the&#xA;vocal‚Äôs way ‚Äî¬†but only barely! Those suspensions ambiguously lurk&#xA;throughout.&lt;/p&gt;&#xA;&#xA;&lt;iframe src=&#34;throwing-muses-flood.pdf&#34; width=&#34;100%&#34; height=&#34;500&#34;&#xA;loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2022/04/04/throwing-muses-flood/index.html</guid>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>‚ÄúRed‚Äù By King Crimson</title>
      <link>https://noncombatant.org/2022/03/11/red-king-crimson/index.content</link>
      <description>&lt;h1&gt;‚ÄúRed‚Äù By King Crimson&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;11 March 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;!--&#xA;https://www.quora.com/Why-do-some-riffs-that-don-t-fall-into-any-scale-or-theory-sound-good/answer/Alex-Johnston-39?ch=99&amp;oid=300467355&amp;share=0050bfea&amp;srid=hkm2R&amp;target_type=answer&#xA;--&gt;&#xA;&#xA;&lt;p&gt;I love this tune.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Rather than try to figure out what scale(s) the melody is in, I think of it&#xA;as movements of major chords in minor and major thirds. I‚Äôd maybe even go so far&#xA;as to suggest that the fact that the 2nd melody is almost all in the diminished&#xA;scale is just a nice coincidence. (The last note, F‚ôØ, is not in the diminished&#xA;scale but is the third of the chord, D.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I feel the introductory rhythm in 4/4, and treat the note groupings as&#xA;syncopated accent groups (5 + 5 + 5 + 9) rather than as meter changes. It&#xA;suggests polyrhythmic possibilities to me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôve written the opening chords as all having a ‚ôØ11. That‚Äôs the overall&#xA;harmonic vibe, although nobody actually frets a ‚ôØ11 chord. The bass plays major&#xA;triads in various inversions (and one root-fifth power chord), and the guitar&#xA;plays the chord‚Äôs third with the ‚ôØ11 as passing tones on the way to the next&#xA;chord. The ‚ôØ11 passing tritone resolves to the perfect fifth ‚Äî¬†the major third&#xA;of the next chord! (And that‚Äôs why the B diminished scale ends on an F‚ôØ: it‚Äôs&#xA;the major third of the D chord in the bass.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I find that beautiful: It‚Äôs not super weird, it‚Äôs super simple! And that‚Äôs&#xA;super weird!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Moving major chords in major thirds is common in 20th century music. I think&#xA;of that chord change, I ‚Äî¬†III, as a generalization of the Harmonic Minor i ‚Äî¬†V&#xA;‚Äî¬†i tension and resolution. If you consider A harmonic minor, Am ‚Äî¬†E ‚Äî¬†Am, then&#xA;C ‚Äî¬†E ‚Äî C is just substituting the relative major of Am. But it opens up so many&#xA;possibilities! I hear it everywhere.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think, and hope, that the rest of the sketch of a transcription is&#xA;accurate. It disagrees here and there with other transcriptions on the&#xA;intertron, especially in the üÑ∏ Interlude, and my take on the bass in the verse&#xA;may not be exactly right.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;During the verse, try to do those string bends only on ‚ë¢ ‚Äî¬†keep the E note on&#xA;‚ë£ as steady as you can.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I didn‚Äôt write out the whole song, because once you‚Äôve got these parts, the&#xA;rest is repetition with some ad lib variations here and there. The structure is&#xA;set, but within that you have some freedom to play around. At the bottom I show&#xA;what Fripp often does in the verse, as well as my favorite verse ad libs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you spot any errors, please email me. üôÇ&lt;/p&gt;&#xA;&#xA;&lt;iframe src=&#34;king-crimson-red.pdf&#34; width=&#34;100%&#34; height=&#34;500&#34;&#xA;loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2022/03/11/red-king-crimson/index.html</guid>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Kill Your Email</title>
      <link>https://noncombatant.org/2022/03/05/kill-your-email/index.content</link>
      <description>&lt;h1&gt;Kill Your Email&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;5 March 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;kill-tv.jpg&#34; width=&#34;500&#34; height=&#34;261&#34; alt=&#34;The&#xA;iconic sticker saying ‚ÄúKill Your Television‚Äù&#34; /&gt;&#xA;    &lt;figcaption&gt;The face of the enemy&#xA;        changes with the decades.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;What distinguishes email from other digital communications is that it has&#xA;    become a world-writable to-do list. A world-writable to-do list is an&#xA;    abomination that steals our time, our attention, our autonomy, and our souls. It&#xA;    stops us from doing productive work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We should resist email, and prefer most other form of communications. But&#xA;    until we kill the concept of email, we have to live with it. Here is how I kill&#xA;    my email before it kills me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My to-do list items seem to have a bimodal distribution: there are things I&#xA;    can resolve in less than 2 minutes, and things that require work. For me, there&#xA;    isn‚Äôt much in between. So, I split my inbox into 2 sections, using Gmail‚Äôs&#xA;    Multiple Inboxes feature.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;multiple-inboxes.png&#34; width=&#34;774&#34; height=&#34;569&#34; alt=&#34;The Multiple Inboxes settings under Inbox in Gmail&#xA;Settings&#34; /&gt;&#xA;    &lt;figcaption&gt;Turn on Multiple Inboxes, with 1 section set to the&#xA;        search query &lt;code&gt;is:starred&lt;/code&gt;.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;My main inbox is new to-dos that people have sent me. The 2nd section of my&#xA;    inbox is any email I‚Äôve ‚Äòstarred‚Äô. I read my inbox from the bottom (oldest) up,&#xA;    either resolving them immediately or starring and archiving them if they can‚Äôt&#xA;    be resolved quickly. I then work my way up to the top, achieving üíñ Inbox Zero&#xA;    üíñ. I do this about twice a day.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When burning down the inbox, I do not hesitate ‚Äî¬†I don‚Äôt put off burning down&#xA;    that thing whose subject line makes me anxious. There are only 2 possible&#xA;    outcomes, neither of which is too scary: either I‚Äôll resolve it right then and&#xA;    there, or it goes into the starred list to be worried about later.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then, I work my way through the list of starred items, again from oldest to&#xA;    newest, and un-star them as I finish them. These are the tasks that constitute&#xA;    work. When chewing through these, I consider whether they represent work that&#xA;    furthers my goals, if they are properly somebody else‚Äôs job, or if they are not&#xA;    all that important. I am ruthless about this: either this task is part of my&#xA;    job, or it is not. If I don‚Äôt think it is, &lt;i&gt;bonk&lt;/i&gt; ‚Äî¬†unstarred. If it was&#xA;    really important for me to do, people will raise it again. If not, well, I have&#xA;    important things I need to achieve, and only 8 hours in the day.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I also use Gmail‚Äôs keyboard shortcuts. I find they help the initial&#xA;    inbox-murder phase go faster: when you‚Äôre skimming subject lines, you can&#xA;    assassinate many mails without even opening them. I archive everything in case I&#xA;    need to look it up later. I typically only delete messages that I sent myself to&#xA;    represent tasks, after I‚Äôve completed them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Needless to say, notifications are anathema and have no place in our wild and&#xA;    precious lives.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;snortcuts-no-tifications.png&#34; width=&#34;672&#34; height=&#34;540&#34; alt=&#34;The Keyboard Shortcuts and Notifications settings in Gmail&#xA;Settings&#34; /&gt;&#xA;    &lt;figcaption&gt;Turn keyboard shortcuts on. Put the No back in&#xA;        Notifications.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;I also use Chrome‚Äôs ‚ÄòShortcut‚Äô feature to turn a tab into its own window.&#xA;    This allows me to fully maximize that window, with no browser controls. I find&#xA;    this minimizes distraction.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;create-shortcut.png&#34; width=&#34;745&#34; height=&#34;602&#34;&#xA;        alt=&#34;dots menu ‚Üí More Tools ‚Üí Create Shortcut...&#34; /&gt;&#xA;    &lt;figcaption&gt;Create a shortcut&#xA;        for your email. This allows you to run it in its own window, not as a browser&#xA;        tab.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;You‚Äôll get this dialog box:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;open-as-window.png&#34; width=&#34;457&#34; height=&#34;195&#34; alt=&#34;Chrome‚Äôs Create Shortcut dialog&#34; /&gt;&#xA;    &lt;figcaption&gt;Check the Open As Window box&#xA;        in the Create Shortcut dialog.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;I then pin this window/app to my macOS Dock.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Go forth and kill email!&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;kill-kill.jpg&#34; width=&#34;512&#34; height=&#34;776&#34;&#xA;        alt=&#34;The poster for the movie Faster, Pussycat! Kill! Kill!&#34; /&gt;&#xA;    &lt;figcaption&gt;I‚Äôve&#xA;        never actually seen &lt;a href=&#34;https://en.wikipedia.org/wiki/Faster,_Pussycat!_Kill!_Kill!&#34;&gt;the&#xA;            movie&lt;/a&gt;.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;</description>
      <author>Chris Palmer</author>
      <guid>2022/03/05/kill-your-email/index.html</guid>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>More 7th Arpeggios</title>
      <link>https://noncombatant.org/2022/02/21/more-7th-arpeggios/index.content</link>
      <description>&lt;h1&gt;More 7th Arpeggios&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;21 February 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;/2022/02/20/7th-arpeggios/&#34;&gt;The last post&lt;/a&gt; showed arpeggio shapes&#xA;for 4 types of 7th chords: major 7, minor 7, dominant 7, and half-diminished 7&#xA;(&lt;sup&gt;‚àÖ&lt;/sup&gt;7). There‚Äôs more fun to be had: here we see diminished 7, augmented&#xA;7, and minor/major 7. The Harmonic Minor scale is a chance to use them (C‚ôØ&#xA;Harmonic Minor, in this case). For extra fun, you can use either or both of the&#xA;haf-diminshed 7 and the diminished 7 in the ii¬∞ (which is D‚ôØ, in this key).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With these shapes, the fretting can get a little hairy. Note the position&#xA;shift with the diminished shape: for the Edim7, we have to shift from VII&#xA;position to VI.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the Eaug7 (also sometimes written E+7), it‚Äôs really in the VIII position,&#xA;with a stretch back to the VII for the tonic. Stretch-o-rama, but it‚Äôs more&#xA;doable if you get your thumb on the back of the neck as if you were in the VIII&#xA;position. For me, that‚Äôs just behind the 9th fret.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the min/maj7, there‚Äôs a stretch on ‚ë†, but I find the pull-off from the&#xA;3rd finger to the 2nd, when coming back down on ‚ë¢, to be the real hard part.&lt;/p&gt;&#xA;&#xA;&lt;iframe src=&#34;more-7th-arpeggios.pdf&#34; width=&#34;100%&#34; height=&#34;500&#34;&#xA;loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2022/02/21/more-7th-arpeggios/index.html</guid>
      <pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Arpeggios Of 7th Chords</title>
      <link>https://noncombatant.org/2022/02/20/7th-arpeggios/index.content</link>
      <description>&lt;h1&gt;Arpeggios Of 7th Chords&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;20 February 2022&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I took some guitar lessons from &lt;a&#xA;href=&#34;https://twitter.com/AndeeBlackSugar&#34;&gt;Andee Blacksugar&lt;/a&gt; for a good long&#xA;while, and had some fun. One thing he taught me was this 2‚Äî1‚Äî2‚Äî1‚Äî2 pattern for&#xA;7th-chord arpeggios: root and 3rd on ‚ë§, 5th on ‚ë£, 7th and octave on ‚ë¢, 3rd on ‚ë°,&#xA;and 5th and 7th on ‚ë†. I find it easier to play than other arpeggio patterns I‚Äôve&#xA;learned.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For fun, I decided to write out one of the warm-up exercises I wrote that&#xA;uses this pattern. It just goes up the scale and back down again in scale&#xA;degrees, but there are some amusing twists: the metric phasing, and the legato&#xA;makes the picking seem weird (but it strictly follows the ‚Äúdown on the beat, up&#xA;on the up-beat‚Äù pattern ‚Äî¬†it only &lt;i&gt;seems&lt;/i&gt; weird).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I notated the fretting-hand fingerings I use; your mileage my vary. On the&#xA;major 7th shape, for example, you can barre or roll your 2nd finger on ‚ë¢ and ‚ë°&#xA;instead of my perhaps-idiosyncratic fingering.&lt;/p&gt;&#xA;&#xA;&lt;iframe src=&#34;7th-arpeggios-exercise.pdf&#34; width=&#34;100%&#34; height=&#34;500&#34;&#xA;loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2022/02/20/7th-arpeggios/index.html</guid>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Thoughts On Language Design Bugs</title>
      <link>https://noncombatant.org/2021/10/23/thoughts-on-language-design-bugs/index.content</link>
      <description>&lt;h1&gt;Thoughts On Language Design Bugs&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;23 October 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This post is an attempt to answer some pretty reasonable questions my friends&#xA;and colleagues have asked me, on the topic of programming language security. If&#xA;you‚Äôve read anything else I‚Äôve written, you know I believe the 2nd-biggest&#xA;software security engineering problem is the unsafety of C and C++. What that&#xA;implies and what to do about it is not necessarily obvious. So here are some&#xA;lightly paraphrased questions, and my general thoughts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(The 1st-biggest problem is all about human factors: abuse, phishing, and&#xA;accessibility.)&lt;/p&gt;&#xA;&#xA;&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;h2&gt;Is JavaScript Memory-Unsafe?&lt;/h2&gt;&#xA;&#xA;&lt;blockquote&gt;Why do you call JS and Python ‚Äòsafer‚Äô? Since (e.g.) JavaScript is&#xA;implemented in C++, doesn‚Äôt that make it just as memory-unsafe as&#xA;C/C++?&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Yes ‚Äî and no. The kernels of the implementations of languages like Python,&#xA;JavaScript (JS), and Java are typically in C/C++ and they certainly do exhibit&#xA;memory unsafety and other C/C++ undefined behavior (UB) bugs. (Memory unsafety&#xA;is a subclass of UB.) However, these languages intend to limit UB as part of&#xA;their interface or contract. Minimizing or eliminating memory unsafety is a&#xA;design goal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus, crucially, UB bugs in these languages are &lt;b&gt;implementation bugs&lt;/b&gt;.&#xA;The (e.g. Python) developers fix them once, and then everyone benefits from the&#xA;implementation getting closer to the interface semantics. The implementation can&#xA;inch closer to the ideal of the interface, and the community can adopt the&#xA;improvement at scale.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In C/C++, by contrast, UB is considered &lt;b&gt;a design ‚Äòfeature‚Äô, not a bug&lt;/b&gt;.&#xA;The language design committees and compiler developers won‚Äôt fix such bugs. Even&#xA;brand new features in C++ introduce new UB ‚Äî¬†it‚Äôs not considered a historical&#xA;mistake to be corrected.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It might seem like Python, JS, et c. are safe wrappers around unsafe code.&#xA;And they can be, and (depending on the specific implementation) more or less&#xA;are. For example, if an application implemented in Python is successfully&#xA;attacked, it‚Äôs much more likely to have been from a bug in the application logic&#xA;than from a use-after-free or a buffer overflow in a list comprehension or other&#xA;core Python feature.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus, a safe language implemented in an unsafe language might be OK, to the&#xA;extent that we can scale up fixing the errors in the implementation. But that‚Äôs&#xA;highly variable, as the next question raises.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;What‚Äôs Happening With JavaScript Security?&lt;/h2&gt;&#xA;&#xA;&lt;blockquote&gt;What about the fairly rough time JS implementations are having? They&#xA;don‚Äôt seem to be getting incrementally closer to the interface&#xA;ideal.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Yes, this is a notable problem. I think there are a few reasons the problem&#xA;exists, and is apparent.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;JS implementations are quite complex and large. Any large body of C/C++ code&#xA;is going to have a lot of problems. By contrast, the implementations of (say)&#xA;Lua and Self are notably concise, and Python is large but not huge. (And a good&#xA;chunk of Python‚Äôs size is auto-generated code.) If we assume roughly equivalent&#xA;bug-density per line across developers ‚Äî¬†in general we have no reason to assume&#xA;otherwise ‚Äî¬†less code means fewer bugs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additionally, defensive and offensive security research teams are hunting&#xA;night and day, en masse and at scale, for bugs in JS implementations&#xA;specifically. If another language suddenly grew to equivalent prominence, it&#xA;might face similar scrutiny and perhaps the known bug count would go up.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But there is a 3rd critical issue: Many of the bugs affecting JS&#xA;implementations are not vanilla C/C++ UB implementation bugs. For Reasons, JS&#xA;happens to face fairly intense scrutiny on raw micro-performance, which&#xA;typically leads developers to cut corners on correctness. (That‚Äôs the usual&#xA;justification for C/C++‚Äôs UB, too. Such an extreme performance focus can make&#xA;sense in some circumstances, but in the vast majority of cases it‚Äôs the wrong&#xA;trade-off.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As part of achieving high performance, JS engines typically include several&#xA;different run-time compilers (just-in-time or JIT compilers) to transform the&#xA;code at run-time into a faster form. To build not 1 but several such systems&#xA;into your language implementation is a significant and complex undertaking&#xA;‚Äî¬†especially when the pressure is on to go fast and save battery life on&#xA;people‚Äôs phones.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, JS implementations often have JIT optimization bugs that go&#xA;something like this: ‚ÄúWe thought we could optimize by removing this dynamic type&#xA;check, because we thought we had a solid argument that the object is guaranteed&#xA;to be of type &lt;code&gt;T&lt;/code&gt;. But, we were wrong.‚Äù (This kind of thing is quite&#xA;hard to get right.) And then the JIT emits memory-unsafe object code due to&#xA;erroneous assumptions during compilation. This class of bug is not due directly&#xA;or uniquely to C/C++.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Why Don‚Äôt We Rewrite Everything In Safer Languages?&lt;/h2&gt;&#xA;&#xA;&lt;blockquote&gt;Given that C/C++ UB creates so many problems ‚Äî¬†causing the&#xA;implementations of languages to not live up to their designs ‚Äî why aren‚Äôt the&#xA;likes of Python and other languages being rewritten in memory-safe&#xA;languages?&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;First, because it‚Äôs expensive to do that. There are whole teams working hard&#xA;to make it less expensive to transition large codebases from C/C++ to modern&#xA;languages, but it‚Äôs just not a cheap or easy thing to do yet. Whether it is&#xA;possible to make it cheap enough at all is an open research question. Whether or&#xA;not it succeeds, I hope that the work being done now, in several organizations,&#xA;is made public. Even negative results would be hugely useful.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additionally, separate from C/C++ UB, there exists a claim that developers&#xA;would just as likely make the same JIT compiler logic errors in a safer language&#xA;as they do in C/C++. In switching to a safer language, you would get rid of the&#xA;‚Äòsimple‚Äô or direct UB and memory-unsafety problems, but JIT compilers would&#xA;still be difficult.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hypothesize that some such compiler and interpreter logic bugs can be&#xA;approached as type errors and state machine transition errors, and thus&#xA;automatically detected and prevented by the implementation language‚Äôs own type&#xA;semantics. (For example, consider a bug where it should never have been possible&#xA;to move from state 1 to state 2 with an object of type &lt;code&gt;T1&lt;/code&gt;, only&#xA;with a &lt;code&gt;T2&lt;/code&gt;. This is known as &lt;a&#xA;href=&#34;https://cliffle.com/blog/rust-typestate/&#34;&gt;the typestate pattern&lt;/a&gt;, and&#xA;it might help with certain of the problems that dynamic language run-times&#xA;face.)&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Micro-Performance vs Correctness: An Ecosystem Problem&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;To a significant extent, though, the semantics of JS, Lua, and Python are&#xA;highly dynamic ‚Äî¬†and that means there‚Äôs an inherent tension between the run-time&#xA;cost of dynamic correctness checks vs. raw micro-performance. Dynamism is an&#xA;awesome feature, but it comes at the cost of some machine-level performance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I believe the right approach to this trade-off is to focus on&#xA;macro-performance, and to stop worrying about micro-performance for a while.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(At an absolute level, the micro-performance of modern JS engines is&#xA;absolutely stunningly awesome. Part of the reason we are having these problems&#xA;is that the developers of these engines have already done the impossible 10&#xA;times over, and now they‚Äôre looking for some 11th win. And, who knows... they‚Äôre&#xA;so good at what they do, they might very well find it. JS engine developers have&#xA;effectively solved the micro-performance problem of dynamic languages. It‚Äôs&#xA;impossible to understate the excellence of that ‚Äî¬†in part because it makes safer&#xA;languages that much more applicable and deployable! So we should all thank&#xA;performance-oriented engineers for this safety.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What‚Äôs wrong with JS performance ‚Äî¬†why some pages or apps make your phone&#xA;warm ‚Äî¬†no longer has much to do with whether we do or don‚Äôt elide a dynamic&#xA;correctness check. It‚Äôs all about JS ecosystem problems.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&#xA;&#xA;&lt;p&gt;Your favorite news site pulls in garbage from Outbrain or whomever. &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Transclusion&#34;&gt;Transclusion&lt;/a&gt; is a key&#xA;(beautiful) feature of the web, but page authors often transclude content&#xA;developed by maniacs who have no concern for the performance and reputation of&#xA;the transcluder.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To address this problem, &lt;a&#xA;href=&#34;https://developers.google.com/web/updates/2020/05/heavy-ad-interventions&#34;&gt;some&#xA;browsers do enforce limits on 3rd-party resource consumption&lt;/a&gt;, but they are&#xA;too generous. These interventions require the browser to be able to recognize 3P&#xA;resources as such, which is not always possible. A common practice on the web is&#xA;to pull the 3rd-party content into the first party itself: what should be&#xA;&lt;code&gt;&amp;lt;iframe src=&#34;https://ads.com/ad&#34;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt; becomes&#xA;&lt;code&gt;&amp;lt;script src=&#34;https://ads.com/ad&#34;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;. At that&#xA;point, the browser can‚Äôt reliably recognize the 3P script as 3P, and thus to&#xA;impose limits on its performance and functionality would be even more&#xA;contentious than it already is.&lt;/p&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&#xA;&#xA;&lt;p&gt;The JS standard library is too small, and that encourages the development of&#xA;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;an oversized and intensely interdependent&#xA;contingent ecosystem of 3rd-party modules&lt;/a&gt; to provide genuinely missing, but&#xA;also trivial or &lt;a&#xA;href=&#34;https://philipwalton.com/articles/loading-polyfills-only-when-needed/&#34;&gt;unnecessary&lt;/a&gt;,&#xA;functionality. These modules are not always implemented to the standards of&#xA;quality that we expect in a modern language‚Äôs standard library. And they‚Äôre&#xA;interdependent: if you pull in 1 module to do 1 thing, it might likely pull in&#xA;many of its own transitive dependencies.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Many web pages include many of these modules, which increases the amount of&#xA;JS code that needs to be sent to your browser and then parsed, compiled, and&#xA;executed. &lt;a&#xA;href=&#34;https://infrequently.org/2018/09/the-developer-experience-bait-and-switch/&#34;&gt;The&#xA;size of web pages has been growing quickly&lt;/a&gt;, and of all bytes in a web page,&#xA;JS bytes are the most expensive.&lt;/p&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&#xA;&#xA;&lt;p&gt;JIT compilation is a valiant and often successful approach to improving time&#xA;efficiency, but it has trade-offs that can be significant. Transforming code to&#xA;be faster takes time. The faster you want the code to be, the more analysis the&#xA;JIT compiler has to do, and that takes more time and power. Additionally, the&#xA;JIT compiler has to store the newly-transformed code somewhere, and that takes&#xA;up precious memory. On top of that, using more memory can sometimes incur a time&#xA;penalty, too.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So in some cases, the net effect of JIT can be negative; in other cases, it‚Äôs&#xA;worth it but expensive. If you turn off JIT compilation, you can potentially&#xA;improve correctness and security (no JIT ‚Üí no JIT bugs), and you might not&#xA;notice a performance penalty. (See &lt;a&#xA;href=&#34;https://microsoftedge.github.io/edgevr/posts/Super-Duper-Secure-Mode/&#34;&gt;turning&#xA;off JIT in Edge&lt;/a&gt;, and &lt;a&#xA;href=&#34;https://chromeenterprise.google/policies/#DefaultJavaScriptJitSetting&#34;&gt;in&#xA;Chrome&lt;/a&gt;. Note that you will possibly see a compatibility penalty: pages that&#xA;use WebAssembly won‚Äôt work in JITless mode.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This too is an ecosystem problem. If, hypothetically, 1 JS implementation&#xA;were to unilaterally take a less aggressive approach to JIT compilation (for&#xA;example, only doing JIT compilation after observing strong signals that it is&#xA;really necessary, rather than doing it eagerly), the tech press and competing&#xA;firms would publish misleading micro-benchmarks showing that in certain&#xA;circumstances other JS implementations ran ‚Äòfaster‚Äô. Even if the total system&#xA;performance that people actually experience (including heat, battery life,&#xA;memory consumption, other applications starving for resources, et c.) improved&#xA;under the ‚Äògentle JIT‚Äô policy, it might not be tenable (or, at least not easy)&#xA;to ship under existing market(ing) conditions.&lt;/p&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;So What Are We Supposed To Do?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Given that we are drowning in the personal, ecosystem, and political&#xA;consequences of C/C++ UB bugs and vulnerabilities, but that reimplementing is&#xA;expensive and difficult, what in the actual shit are we supposed to do right now&#xA;with the systems we depend on?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First and foremost, as a matter of professional ethics and responsibility, no&#xA;green-field development must be done in unsafe languages. The behind-the-curve&#xA;technology of the 1970s has not enabled and will not enable us to meet the&#xA;requirements of the 2020s and 2030s. We have to put a lot of work into working&#xA;around its problems, as I describe below, and we have to enter into that effort&#xA;knowing that it is all repair work and not new advancement.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Complementarily, we must do everything we can to minimize the amount of&#xA;maintenance and development we do in unsafe languages. That means gradually&#xA;migrating old code to safer languages, developing the new features of existing&#xA;systems in safer languages, replacing or removing components implemented in&#xA;unsafe languages, and so on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the limited and blocked-off area of maintenance and development in unsafe&#xA;code, there is actually a lot we can do to improve things. First, take the&#xA;micro-performance heat off by exploring solutions to the macro-performance&#xA;problems, whatever they might be. (Look for amplifiers at the application level.&#xA;Does 1 click incur 100 requests or operations?) When the micro-heat is off, you&#xA;can breathe a little and start looking into correctness and security.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Keep testing. Incentivize testing and bug finding. More. Incentivize fixing&#xA;bugs, polish, quality. More. It must be possible to get promoted to and&#xA;compensated at a high level for measurably improving code quality, instead of&#xA;shipping new features. It does sometimes happen, but overall most software&#xA;development organizations need a significant culture change.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although C/C++ cannot be ‚Äòfixed‚Äô, there is quite a bit we can do to minimize&#xA;and avoid the problems of these languages.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&#xA;&#xA;&lt;p&gt;Ignore and replace the standard libraries. They are riddled with historical&#xA;and recent design bugs. Fortunately, alternatives exist: for example, you can &lt;a&#xA;href=&#34;https://github.com/abseil/abseil-cpp/blob/master/absl/base/options.h#L211&#34;&gt;harden&#xA;Abseil&lt;/a&gt;, and/or write your own replacements that prioritize your&#xA;requirements. It‚Äôs sad that we have to do this, but we do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On the bright side, we stand to gain a lot of efficiency &lt;b&gt;and&lt;/b&gt;&#xA;correctness &lt;b&gt;and&lt;/b&gt; ergonomics ‚Äî¬†the standard libraries leave us in the rare&#xA;position of not necessarily having to trade these things off. Take this&#xA;opportunity! Abseil did, and it‚Äôs great.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From an ecosystem perspective, it would be much better if the correctness-&#xA;and safety-interested C++ communities rallied around a few new API designs and&#xA;new implementations: a new standard built to modern expectations.&lt;/p&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&#xA;&#xA;&lt;p&gt;Paper over the core language semantic problems to the extent possible. You&#xA;can do this with non-standard compiler flags: turn on bounds-checking for&#xA;arrays, turn on Undefined Behavior Sanitizer in trapping mode in production, and&#xA;turn on all compiler warnings and actually think about them. (Even the annoying&#xA;ones can point to real bugs ‚Äî¬†yes, even &lt;code&gt;-Wpadded&lt;/code&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Create new types to replace the built-in types. (Many people have made their&#xA;own integers, for example; here‚Äôs &lt;a&#xA;href=&#34;https://github.com/Google/integers&#34;&gt;my start at a run at the integer&#xA;semantics problem&lt;/a&gt;. I include pointers to several other designs on the idea.&#xA;I don‚Äôt claim mine is perfect, but I do think some form of integer improvement&#xA;is critical.)&lt;/p&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&#xA;&#xA;&lt;p&gt;Push the type system as far as you can, to assert correctness. C++ might not&#xA;have as fancy a type system as Haskell or Rust, but it is flexible, and you can&#xA;establish new patterns and helper libraries to get a more ergonomic experience.&#xA;For example, you could certainly implement the typestate pattern, or traits, or&#xA;spiffier &lt;code&gt;enum&lt;/code&gt;s (&lt;code&gt;enum class&lt;/code&gt; exists!) in C++. It might&#xA;require establishing new idioms, but, we can do that. It‚Äôs a lot cheaper than&#xA;reimplementing everything, and it might make gradual migration and&#xA;interoperability easier, too.&lt;/p&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2021/10/23/thoughts-on-language-design-bugs/index.html</guid>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>A Fun Harmonic Game</title>
      <link>https://noncombatant.org/2021/10/01/fun-harmonic-game/index.content</link>
      <description>&lt;style&gt;&#xA;  iframe {&#xA;    width: 100%;&#xA;    height: 40em;&#xA;  }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;h1&gt;A Fun Harmonic Game&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;1 October 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;  &lt;p&gt;Update: A friend, whose brother is a composer, pointed out that this&#xA;    is known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Neo-Riemannian_theory&#34;&gt;an ‚ÄúL‚Äù&#xA;      transformation in neo-Riemannian theory&lt;/a&gt;. TIL! Every so often, the internet&#xA;    actually delivers on its promise. ü§ìü•≥&lt;/p&gt;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;The other day I discovered a fun harmonic game. It‚Äôs a bit like &lt;a&#xA;    href=&#34;https://www.thejazzpianosite.com/jazz-piano-lessons/jazz-chord-progressions/line-cliches/&#34;&gt;the&#xA;    line clich√©&lt;/a&gt;, but (I think) a bit more challenging. Here are the rules:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&#xA;  &lt;li&gt;Use only the 4 basic triads (major, minor, augmented, diminished). Start&#xA;    with any triad.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;To get the next triad, move only 1 note of the chord up or down 1 half&#xA;    step.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Each chord change must change its root. (For example, E major ‚Üí E minor is&#xA;    not allowed. Don‚Äôt cheat by using enharmonic names! üòâ)&lt;/li&gt;&#xA;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;That‚Äôs it! It‚Äôs simple, but the limitations are tight. I find it‚Äôs a bit hard&#xA;  to end up with a progression that works, but you can surprise yourself, and&#xA;  perhaps come up with something you would not have otherwise.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can make it significantly easier and generate richer changes by removing&#xA;  rule 1 or rule 3.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are some ideas I like. (Note that example üÑ± breaks rule 3.)&lt;/p&gt;&#xA;&#xA;&lt;iframe src=&#34;2021-09-30 Study.pdf&#34; loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;</description>
      <author>Chris Palmer</author>
      <guid>2021/10/01/fun-harmonic-game/index.html</guid>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Improving Software ‚ÄòNumbers‚Äô</title>
      <link>https://noncombatant.org/2021/09/26/improving-software-numbers/index.content</link>
      <description>&lt;h1&gt;Improving Software ‚ÄòNumbers‚Äô&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;26 September 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;  &lt;p&gt;Update: Thanks again to Saleem Rashid, this time for pointing me at &lt;a&#xA;      href=&#34;https://stdrs.dev/nightly/x86_64-unknown-linux-gnu/core/num/struct.Saturating.html&#34;&gt;&lt;code&gt;Saturating&lt;/code&gt;&#xA;      in Rust Nightly&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;Programming languages should expose a flexible variety of explicit types and&#xA;  operators for handling arithmetic overflow and related problems. As language&#xA;  design problems go, this might be relatively less difficult to achieve. Rust is&#xA;  closest to where programming languages need to be, but not all the way there&#xA;  yet.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I believe that software should be able to reliably compute arithmetic&#xA;  expressions. You may say I‚Äôm a dreamer, but I‚Äôm not the only one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To represent an infinite set in finite space is problematic. This is not news&#xA;  to most software engineers. We always need a coherent policy for how to deal&#xA;  with our inability to represent some elements of infinite sets, or expressions&#xA;  that would evaluate to representable elements if only we had space.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can consistently apply some policy (whatever it may be) using the&#xA;  language‚Äôs type system: by encoding policy in the set‚Äôs type, and operators on&#xA;  and functions of it, we can get (if nothing else) consistent representation of&#xA;  and behavior in error states. (I‚Äôll call them &lt;i&gt;representation errors&lt;/i&gt;&#xA;  generically.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Surely, we can all agree that this is the minimum necessary for&#xA;  program correctness.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Surely, we can all agree that correctness is the minimum necessary for&#xA;  program safety.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Surely, we can all agree that providing people correct and safe software is&#xA;  our duty as engineers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Even the most fundamental objects of computation, the reals and the integers&#xA;  and arithmetic on them, require some policy for unrepresentable values ‚Äî¬†even if&#xA;  it is simply to crash when no more memory is available to an arbitrary-precision&#xA;  arithemtic library (for example).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Machine words are more limited still, and have far less range to represent&#xA;  the reals and integers than do arbitrary-precision types. Even so, for practical&#xA;  efficiency, we typically use machine words to represent elements of these sets.&#xA;  For many circumstances, this is not a problem.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The machines we typically use implement reasonable error policies, at least&#xA;  for the integer types. For example, ARM‚Äôs and Intel‚Äôs policy is to make&#xA;  arithmetic modular, and to indicate carry, borrow, and overflow in a status&#xA;  register. (See e.g. &lt;a href=&#34;https://developer.arm.com/documentation/dui0801/g/Condition-Codes/Carry-flag&#34;&gt;carry&#xA;    flag&lt;/a&gt;, &lt;a href=&#34;https://developer.arm.com/documentation/dui0801/g/Condition-Codes/Overflow-flag&#34;&gt;overflow&#xA;    flag&lt;/a&gt;, and &lt;a&#xA;    href=&#34;https://developer.arm.com/documentation/dui0068/b/ARM-Instruction-Reference/Conditional-execution&#34;&gt;conditional&#xA;    execution&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, most of the programming languages that aim for machine-level&#xA;  efficiency ‚Äî¬†e.g. C, C++, and Rust ‚Äî¬†do not provide a standard way to access the&#xA;  machine status register directly, or otherwise indicate representation errors.&#xA;  (Rust does provide indirect access, however; see below.) Programmers must switch&#xA;  to machine language, or must use non-standard, implementation-specific features&#xA;  such as &lt;a href=&#34;https://clang.llvm.org/docs/LanguageExtensions.html&#34;&gt;&lt;code&gt;__builtin_add_overflow&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It would be helpful if these languages‚Äô developers defined standardized&#xA;  syntax and semantics for accessing the error state that the machine provides.&#xA;  (If the programmer uses such a mechanism, but compiles for a machine that&#xA;  doesn‚Äôt signal representation errors, the compiler could emulate such a signal,&#xA;  otherwise attempt to accommodate the programmer, or raise a compilation&#xA;  error.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, some languages often violate and obscure the clear and simple policy&#xA;  that most machines define.&lt;/p&gt;&#xA;&#xA;&lt;style&gt;&#xA;  table {&#xA;    border-collapse: collapse;&#xA;  }&#xA;&#xA;  th,&#xA;  td {&#xA;    text-align: left;&#xA;    vertical-align: bottom;&#xA;    padding: 0.5em;&#xA;  }&#xA;&#xA;  tr:nth-child(even) {&#xA;    background-color: #eee;&#xA;  }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;table&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;th&gt;Language&lt;/th&gt;&#xA;    &lt;th&gt;Unrepresentable Signed Integer Behavior&lt;/th&gt;&#xA;    &lt;th&gt;Unrepresentable Unsigned Integer Behavior&lt;/th&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;td&gt;C, C++&lt;/td&gt;&#xA;    &lt;td&gt;Undefined behavior&lt;/td&gt;&#xA;    &lt;td&gt;Modular arithmetic&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;td&gt;Rust&lt;br /&gt;(default Release configuration)&lt;/td&gt;&#xA;    &lt;td&gt;Modular arithmetic&lt;/td&gt;&#xA;    &lt;td&gt;Modular arithmetic&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;td&gt;Rust&lt;br /&gt;(default Debug configuration)&lt;/td&gt;&#xA;    &lt;td&gt;Machine trap&lt;/td&gt;&#xA;    &lt;td&gt;Machine trap&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;  &lt;tr&gt;&#xA;    &lt;td&gt;Java, Go&lt;/td&gt;&#xA;    &lt;td&gt;Modular arithmetic&lt;/td&gt;&#xA;    &lt;td&gt;Modular arithmetic&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;p&gt;There are a number of problems with this state of affairs:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;  &lt;li&gt;&#xA;    &lt;p&gt;&lt;b&gt;Undefined behavior is hard or impossible to test for, and leads to increased&#xA;        cognitive load for the programmer.&lt;/b&gt; The programmer has to divine the behavior&#xA;      that the compiler will choose to generate, including in different build&#xA;      configurations and at different optimization levels.&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;This can lead to situations where what programmers test (e.g. debug builds)&#xA;      is not the same as the code that runs in production, and the production behavior&#xA;      differs from what was tested.&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;Needless to say, when the ultimate behavior of the program is not predicted,&#xA;      intended, or tested by the programmer, bugs inevitably ensue ‚Äî¬†sometimes&#xA;      including exploitable vulnerabilities.&lt;/p&gt;&#xA;  &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;&#xA;    &lt;p&gt;&lt;b&gt;Having different policies for signed and unsigned integer types&#xA;        exposes the quirks of obsolete and special-use machines, and increases cognitive&#xA;        load on the programmer.&lt;/b&gt; In fact, many programmers are unaware of the policy&#xA;      difference. It is necessary and good to expose machine-specific behavior in&#xA;      machine languages, but it‚Äôs undesirable in higher-level languages.&lt;/p&gt;&#xA;  &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;&#xA;    &lt;p&gt;&lt;b&gt;Trapping is a rather rigid policy&lt;/b&gt;, and programmers may not expect&#xA;      it as the default, at least at first. It has the benefit of exposing the&#xA;      representation problem early in the development process, though. In a language&#xA;      that offers many policy choices, trapping might be the best default.&lt;/p&gt;&#xA;  &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;&#xA;    &lt;p&gt;&lt;b&gt;Rust has the problem that the tested behavior is not the production&#xA;        behavior&lt;/b&gt;, unless the programmer takes the somewhat unusual step of changing&#xA;      the default build configurations. This might be an unwelcome surprise after&#xA;      trapping behavior during testing.&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;I suppose the theory is that the trapping behavior will shake out all the&#xA;      bugs, but it can definitely be the case that program inputs seen during testing&#xA;      differ from those seen in production ‚Äî¬†especially in the case where the program&#xA;      must handle intentionally hostile input.&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;People often say that since Rust provides array bounds checking (in all&#xA;      builds), not trapping on integer overflow in production is OK. That is true as&#xA;      far as it goes, but invalid array access is not the only possible consequence of&#xA;      integer overflow.&lt;/p&gt;&#xA;  &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;&#xA;    &lt;p&gt;&lt;b&gt;The set of policy options is incomplete, and insufficient for the full&#xA;        range of program requirements.&lt;/b&gt; For all languages, it would be useful to have&#xA;      a suite of standardized policies available, including at least wrapping, trapping,&#xA;      clamping/saturation, undefined behavior, and promotion to &lt;code&gt;BigInt&lt;/code&gt; or&#xA;      other arbitrary precision type.&lt;/p&gt;&#xA;  &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;&#xA;    &lt;p&gt;&lt;b&gt;Only Rust programmers have easy access to choice.&lt;/b&gt; If the&#xA;      language‚Äôs policy is not right for the program requirements, the programmer must&#xA;      go to &lt;a href=&#34;https://source.chromium.org/chromium/chromium/src/+/main:base/numerics/&#34;&gt;extraordinary&#xA;        lengths&lt;/a&gt; to implement the right policy ‚Äî¬†typically without any help from&#xA;      standard mechanisms to observe the machine‚Äôs error state.&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;Rust is closest to where we need to be. If a program requires a different&#xA;      policy, Rust provides &lt;a href=&#34;https://doc.rust-lang.org/std/num/struct.Wrapping.html&#34;&gt;a&#xA;        &lt;code&gt;Wrapping&lt;/code&gt; type&lt;/a&gt; and operators like &lt;a&#xA;        href=&#34;https://doc.rust-lang.org/std/primitive.i32.html#method.wrapping_add&#34;&gt;&lt;code&gt;wrapping_add&lt;/code&gt;&lt;/a&gt;,&#xA;      &lt;a&#xA;        href=&#34;https://doc.rust-lang.org/std/primitive.i32.html#method.overflowing_add&#34;&gt;&lt;code&gt;overflowing_add&lt;/code&gt;&lt;/a&gt;,&#xA;      &lt;a href=&#34;https://doc.rust-lang.org/std/primitive.i32.html#method.saturating_add&#34;&gt;&lt;code&gt;saturating_add&lt;/code&gt;&lt;/a&gt;,&#xA;      &lt;a href=&#34;https://doc.rust-lang.org/std/primitive.i32.html#method.checked_add&#34;&gt;&lt;code&gt;checked_add&lt;/code&gt;&lt;/a&gt;,&#xA;      and &lt;a&#xA;        href=&#34;https://doc.rust-lang.org/std/primitive.i32.html#method.unchecked_add&#34;&gt;&lt;code&gt;unchecked_add&lt;/code&gt;&lt;/a&gt;.&#xA;    &lt;/p&gt;&#xA;  &lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The usual reason given for the use of undefined behavior is that it can&#xA;  enable certain micro-optimizations. This is potentially useful and a legitimate&#xA;  policy option. (Language designers hesitate to pay the micro-cost of overflow&#xA;  checking &lt;a href=&#34;https://github.com/rust-lang/rfcs/pull/2635&#34;&gt;even in special&#xA;    cases&lt;/a&gt;. But to me it seems like &lt;code&gt;unchecked_add&lt;/code&gt; is available for&#xA;  the few people whose application is unacceptably affected by a check.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In any case, and in any language, ‚Äúpotentially (but untestably) fast, hard to&#xA;  predict, possibly wrong, and possibly unsafe‚Äù, even if occasionally desirable,&#xA;  should not be the default policy, as it is for signed arithmetic in C and&#xA;  C++.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Fortunately, all of the languages in mainstream use have active standards&#xA;  committees and change processes. They could define ways to access the machine&#xA;  state, and could define standard types and operators implementing a wide range&#xA;  of reasonable representation error policies. (In addition to the suite of&#xA;  special policy operators that Rust provides, it‚Äôd help to have types whose&#xA;  default operators implement each of those policies, as well ‚Äî¬†not just&#xA;  &lt;code&gt;Wrapping&lt;/code&gt;.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In some cases, it may even be possible to change the default policies. I&#xA;  think language designers and standardizers should do so.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(Perhaps something similar could be done for the error modes of&#xA;  floating-point arithmetic, too.)&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;  &lt;p&gt;Thanks to Saleem Rashid for pointing out some gaps, and to Alex Gaynor&#xA;    for pointing out an inaccuracy!&lt;/p&gt;&#xA;&lt;/aside&gt;</description>
      <author>Chris Palmer</author>
      <guid>2021/09/26/improving-software-numbers/index.html</guid>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>A Thought On ‚ÄòEnd-to-End‚Äô Security</title>
      <link>https://noncombatant.org/2021/09/01/end-to-end/index.content</link>
      <description>&lt;h1&gt;A Thought On ‚ÄòEnd-to-End‚Äô Security&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;1 September 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There‚Äôs a good deal of hullabaloo about Apple‚Äôs CSAM detection system(s) for&#xA;    the iPhone, iMessage, and iCloud. There are a lot of complex trade-offs in play,&#xA;    and I am not qualified to say if it‚Äôs net-good or net-bad.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Everyone is getting their yell in, pro- or con-, and that is good. To me, the&#xA;    clearest discussion of why Apple‚Äôs plan is so hard to love comes from Deirdre&#xA;    Connolly and Matthew Green on the &lt;a&#xA;        href=&#34;https://securitycryptographywhatever.buzzsprout.com/1822302/9099774-apple-s-csam-detection-feat-matthew-green&#34;&gt;Security.&#xA;        Cryptography. Whatever. podcast&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In &lt;a href=&#34;https://www.lawfareblog.com/normalizing-surveillance&#34;&gt;‚ÄúNormalizing&#xA;        Surveillance‚Äù&lt;/a&gt; (in Lawfare, of all places) Susan Landau raises a key&#xA;    question: What does ‚Äòend-to-end‚Äô security actually mean? Is Apple violating the&#xA;    spirit of the principle? (Has there ever been a clear letter of the&#xA;    principle?)&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;Apple‚Äôs solution for its messaging app works through a redefinition&#xA;    of end-to-end encryption (E2E) with a new meaning that a communication is&#xA;    end-to-end encrypted until it reaches the recipient‚Äôs phone. Previously an&#xA;    iPhone (or iPad) user could use the Messages app to send a message to another&#xA;    iPhone or iPad user and it would be E2E encrypted via iMessage, Apple‚Äôs E2E&#xA;    encrypted messaging app. But Apple‚Äôs new definition of E2E encrypted means that&#xA;    Apple tools could have access to any decrypted contents.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The original ‚Äòletter‚Äô of the principle comes from &lt;a&#xA;        href=&#34;https://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.pdf&#34;&gt;Saltzer,&#xA;        Reed, and Clark‚Äôs paper ‚ÄúEnd-To-End Arguments In System Design‚Äù&lt;/a&gt; (&lt;a href=&#34;saltzer-end-to-end.pdf&#34;&gt;local&#xA;        copy&lt;/a&gt;). They argue that reliability must&#xA;    come primarily from the application layer, and they use a file transfer&#xA;    application protocol as their example. They don‚Äôt find it sufficient to rely on&#xA;    the lower-layer protocols, or their providers, to provide application-semantic&#xA;    reliability (in this case, file integrity). They note the possibility that lower&#xA;    layers might help, or improve efficiency, but lower layers and providers cannot&#xA;    be solely relied upon to provide such reliability.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Saltzer et al. mention encryption only in passing, and don‚Äôt really dig into&#xA;    the idea of the lower layer providers as intentional threat actors. The&#xA;    end-to-end argument does readily lend itself to that approach to security, but&#xA;    the original paper does not give us a clear definition of E2E security. It‚Äôs&#xA;    about reliability in a world of accidents, mishaps, and misunderstandings.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The spirit of the E2E argument as a security model, though, is surely clear:&#xA;    the application layer must not trust other software, protocols, or&#xA;    communications providers; instead, it must treat them as not only unreliable but&#xA;    as potential threat actors.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But does it make sense to treat the author(s) of the trusted computing base&#xA;    (TCB) ‚Äî¬†your hardware, firmware, operating system, and core application&#xA;    frameworks ‚Äî¬†as untrusted? As threat actors?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Landau considers it a ‚Äúredefinition‚Äù of the principle of E2E security to&#xA;    trust the TCB. Essentially, she wishes ‚Äî¬†we all would wish! ‚Äî¬†for the ‚Äúends‚Äù to&#xA;    be the application software instances alone, defending themselves against an&#xA;    &lt;b&gt;un&lt;/b&gt;trusted and potentially hostile computing base:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;we-wish.svg&#34; alt=&#34;A graphic showing Alice, Bob, Alice‚Äôs&#xA;device, and Bob‚Äôs device, with messaging apps talking to each other and treating&#xA;the device OSs as potentially hostile.&#34; title=&#34;We wish the device OS were&#xA;untrusted, because it might be hostile.&#34; loading=&#34;lazy&#34; width=&#34;500&#34; height=&#34;289&#34; /&gt;&#xA;    &lt;figcaption&gt;We wish the device OS were untrusted, because it might be&#xA;        hostile.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, the reality has always been, and must necessarily be, more&#xA;    like this:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;reality.svg&#34; alt=&#34;A graphic showing Alice, Bob, Alice‚Äôs&#xA;device, and Bob‚Äôs device, with messaging apps talking to each other and treating&#xA;the device OSs as potenitally hostile but necessarily trusted.&#34; title=&#34;In fact,&#xA;the device OS is trusted, even though it might be hostile. Bummer, but that‚Äôs&#xA;life.&#34; loading=&#34;lazy&#34; width=&#34;500&#34; height=&#34;289&#34; /&gt;&#xA;    &lt;figcaption&gt;In fact, the device OS&#xA;        is trusted, even though it might be hostile. Bummer, but that‚Äôs&#xA;        life.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Every TCB, from every vendor, has at least the power ‚Äî¬†hopefully unused, or&#xA;    at least ‚Äòbenignly‚Äô ‚Äî¬†to inspect, modify, tootle with, and otherwise perturb any&#xA;    application it hosts. None of Apple, iOS, iMessage are unique in this way. You&#xA;    have to trust Ubuntu not to frobulate your Signal Desktop. You have to trust&#xA;    Android not to discrombulize your WhatsApp.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Whether the trust&lt;b&gt;ed&lt;/b&gt; computing base is trust&lt;b&gt;worthy&lt;/b&gt; is an&#xA;    entirely separate question.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another separate question: Does it make sense to treat the application itself&#xA;    as a threat actor, other than by simply rejecting it? Part of Apple‚Äôs system(s)&#xA;    for CSAM involves, presumably, integration between iOS, iMessage, and iCloud&#xA;    ‚Äî¬†presumably, the system(s) are implemented partially inside iMessage and&#xA;    partially with API hooks between the OS, app, and iCloud. Apple is the author of&#xA;    all that software, and runs the services.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In theory, at least, any TCB could reach into any application it hosts to do&#xA;    the same thing. I‚Äôm not saying I think Apple or any other OS vendor will go so&#xA;    far as to do their CSAM scanning in apps they didn‚Äôt author.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(That said, substantial content inspection, code injection into applications&#xA;    and into the kernel, and reporting to the mothership has long been common in the&#xA;    anti-virus (AV) industry. If you install such software, be aware that you are&#xA;    usually placing total trust in it. If you don‚Äôt like Apple‚Äôs private set&#xA;    intersection stuff, you‚Äôre really not going to like what you find out about&#xA;    AV.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, I don‚Äôt think it‚Äôs a redefinition of the letter (such as it is) or spirit&#xA;    of the E2E principle to treat the TCB as trusted. (It‚Äôs right there in the&#xA;    name.) A given TCB, or app, might be untrustworthy for your needs, and that can&#xA;    be a problem. But it‚Äôs not a problem Apple introduced.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2021/09/01/end-to-end/index.html</guid>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Fun Lil Hacks</title>
      <link>https://noncombatant.org/2021/08/30/fun-lil-hacks/index.content</link>
      <description>&lt;h1&gt;Fun Lil Hacks&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;30 August 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are some fun hacks I‚Äôve been working on lately.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Run Python&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/noncombatant/run-python&#34;&gt;Published on&#xA;        GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This little snippet of Python and a macOS Automator workflow allow me to run&#xA;    Python code in almost any text input widget of almost any application on my Mac.&#xA;    (Gmail‚Äôs message compose window is not a regular text input, sadly. Everything&#xA;    else works, though, including vim in Terminal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôve bound it to the global hotkey ‚åò-\. I just select any text, hit that&#xA;    hotkey, and the selection is replaced with the result of evaluating the text as&#xA;    Python 3 code. I have it run a Python imterpreter that has a lot of extra&#xA;    modules imported so that I have easy access to common functionality.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You take this:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;run-python-01.png&#34; width=&#34;556&#34; height=&#34;155&#34; alt=&#34;A screen shot&#xA;of the text ‚ÄúHey Bob, what‚Äôs up. When the nurse said my body temperature was&#xA;u.Quantity(98.6, u.degF).to(degC), I just about frrrreaked out. But it turns&#xA;out that‚Äôs normal.‚Äù in a message compose window in Slack.&#34; loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;Python code in any text area.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Select the Python expression, hit ‚åò-\, and get this:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;run-python-02.png&#34; width=&#34;557&#34; height=&#34;159&#34; alt=&#34;A screen shot&#xA;of the text ‚ÄúHey Bob, what‚Äôs up. When the nurse said my body temperature was&#xA;&lt;Quantity(37.0, degree_Celsius)&gt;, I just about frrrreaked out. But it turns&#xA;out that‚Äôs normal.‚Äù&#34; loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;Evaluating&#xA;        Python.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2&gt;HTTP Nowhere&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;        href=&#34;https://chrome.google.com/webstore/detail/http-nowhere/bjaonomdmphjeieijhhjpcdekcdahlpl/related?hl=en&amp;authuser=0&#34;&gt;Published&#xA;        in the Chrome Web Store&lt;/a&gt; and &lt;a href=&#34;https://github.com/noncombatant/http-nowhere&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This browser extension upgrades all HTTP and WS requests to HTTPS and WSS,&#xA;    respectively. It then blocks HTTP and WS. Ideally, with this extension, no&#xA;    plaintext web requests will ever hit the wire. You can (and should) verify this&#xA;    with &lt;a href=&#34;https://www.wireshark.org/download.html&#34;&gt;Wireshark&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;HTTP Nowhere cannot turn on DNS-over-HTTPS for you, however, because there is&#xA;    currently no extension API to do that. You‚Äôll have to enable secure DNS&#xA;    manually, in Settings (chrome://settings/security) Definitely turn this on!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This extension might soon be obviated or partially obviated by the coming&#xA;    HTTPS First mode. (HTTPS First is currently available in Chrome Canary behind a&#xA;    flag: chrome://flags/#https-only-mode-setting.)&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Uncover UI&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/uncover-ui/gjjmcgdmihdajcgogajilcpollahpkgf?hl=en&amp;authuser=0&#34;&gt;Published&#xA;        in the Chrome Web Store&lt;/a&gt; and &lt;a href=&#34;https://github.com/noncombatant/uncover-ui&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This browser extension removes unnecessary UI elements that cover up&#xA;    necessary UI elements. For some reason I do not understand, UI designers seem to&#xA;    really like covering up their own UI with other UI.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Uncover UI currently only works in Gmail and Google Docs. I am thinking about&#xA;    extending it to remove all those pop-up screens that news and shopping sites&#xA;    like to use to stop you from reading their content and buying their&#xA;    products.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2021/08/30/fun-lil-hacks/index.html</guid>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Long Live Sandboxing!</title>
      <link>https://noncombatant.org/2021/04/11/long-live-sandboxing/index.content</link>
      <description>&lt;h1&gt;Long Live Sandboxing!&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;11 April 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Apparently, there is some confusion about whether sandboxing is necessary,&#xA;    sufficient, and/or affordable. (&lt;a&#xA;        href=&#34;https://www.securityweek.com/cost-sandboxing-prompts-shift-memory-safe-languages-little-too-late&#34;&gt;Here&#xA;        is an example from Security Week&lt;/a&gt;, although this is not the only&#xA;    instance.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As the lead of Chrome‚Äôs sandboxing team and as co-lead of Chrome‚Äôs memory&#xA;    safety efforts, perhaps I can clarify a little.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As I said in &lt;a href=&#34;https://www.usenix.org/conference/enigma2021/presentation/palmer&#34;&gt;my&#xA;        Enigma presentation&lt;/a&gt; (&lt;a&#xA;        href=&#34;https://www.usenix.org/sites/default/files/conference/protected-files/enigma2021_slides_palmer.pdf&#34;&gt;slide&#xA;        7&lt;/a&gt;), ‚Äúgood sandboxing is table stakes.‚Äù I reiterated this point in &lt;a&#xA;        href=&#34;/2021/04/09/prioritizing-memory-safety-migrations/&#34;&gt;my previous post&lt;/a&gt;&#xA;    (‚Äúif [...] your application is not making use of process sandboxing, consider&#xA;    exploring that first before starting a rewrite effort‚Äù).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Contrary to what the Security Week article and some Twitter discourse&#xA;    suggest, &lt;b&gt;sandboxing and memory safety are complementary techniques&lt;/b&gt;, and&#xA;    both are necessary.&lt;/p&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;    &lt;dt&gt;&lt;b&gt;Sandboxing reduces the severity of bugs.&lt;/b&gt;&lt;/dt&gt;&#xA;&#xA;    &lt;dd&gt;&#xA;&#xA;        &lt;p&gt;Sandboxing isolates code away from system resources and application&#xA;            resources, reducing the damage that compromise can do. (Sandboxing also has&#xA;            certain efficiency advantages, as well as disadvantages, too.)&lt;/p&gt;&#xA;&#xA;        &lt;p&gt;However, a certain amount of attack surface will always be available from&#xA;            within a sandbox, and memory unsafety (and other bugs) can enable an attacker to&#xA;            get at it.&lt;/p&gt;&#xA;&#xA;        &lt;p&gt;So you still need to get rid of as many bugs inside the sandbox as&#xA;            possible.&lt;/p&gt;&#xA;&#xA;    &lt;/dd&gt;&#xA;&#xA;    &lt;dt&gt;&lt;b&gt;Memory safety reduces the number of bugs.&lt;/b&gt;&lt;/dt&gt;&#xA;&#xA;    &lt;dd&gt;&#xA;&#xA;        &lt;p&gt;As discussed at Enigma and in my previous post, very many bugs, including an&#xA;            overwhelming majority of the vulnerabilities we know about right now, are due to&#xA;            memory unsafety. It helps to get rid of as many of those as possible.&lt;/p&gt;&#xA;&#xA;        &lt;p&gt;However, memory safety can‚Äôt constrain access to system resources, including&#xA;            the file system, system calls, et c.&lt;/p&gt;&#xA;&#xA;        &lt;p&gt;So you still need sandboxing.&lt;/p&gt;&#xA;&#xA;    &lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;p&gt;There are 2 key ways that Chromium (specifically) is nearing the limits of&#xA;    how much sandboxing we can do right now:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;Our unit of isolation, the process, is expensive in time and space on some&#xA;        (not all) platforms.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Some operating systems do not provide sufficiently fine-grained mechanisms&#xA;        to allow us to maximally constrain sandboxed processes. Things are improving,&#xA;        but it‚Äôs an unavoidably slow process.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I tried also to raise awareness that not all the applications that need&#xA;    sandboxing are making use of it. I know of at least 1 organization that was&#xA;    compromised because their server application did not sandbox a file format&#xA;    parser (written in C), and allowed anyone on the internet to send input to it.&#xA;    So, more developers need to do more sandboxing ‚Äî¬†&lt;b&gt;as an industry, we are nowhere&#xA;        near the limits yet&lt;/b&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We are still pursuing additional sandboxing in Chromium. It‚Äôs just that we&#xA;    can see a limit to what‚Äôs possible &lt;b&gt;at the moment&lt;/b&gt;. If OS developers give&#xA;    us more of the primitives we want, we‚Äôll jump right on them ‚Äî¬†as we always&#xA;    have.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, nobody knowledgeable, that I know of, has claimed or would claim&#xA;    that eliminating 100% of memory unsafety bugs would also get rid of all&#xA;    vulnerabilities. The claim ‚Äî &lt;a&#xA;        href=&#34;https://alexgaynor.net/2020/may/27/science-on-memory-unsafety-and-security/&#34;&gt;based&#xA;        on repeated real-world experience and evidence&lt;/a&gt; ‚Äî¬†is that memory unsafety&#xA;    accounts for a large majority of vulnerabilities. There will still be bugs. Our&#xA;    goal is to marginalize memory unsafety bugs, because they are currently our&#xA;    worst observed problem.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2021/04/11/long-live-sandboxing/index.html</guid>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Prioritizing Memory Safety Migrations</title>
      <link>https://noncombatant.org/2021/04/09/prioritizing-memory-safety-migrations/index.content</link>
      <description>&lt;style&gt;&#xA;  img {&#xA;    border: 0px;&#xA;  }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;h1&gt;Prioritizing Memory Safety Migrations&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;9 April 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;  &lt;p&gt;Update 11 April: Please also see &lt;a href=&#34;/2021/04/11/long-live-sandboxing/&#34;&gt;Long Live Sandboxing!&lt;/a&gt;. Sandboxing&#xA;    is not dead, despite what you might have heard.&lt;/p&gt;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;With all the talk of using Rust to reduce memory unsafety bugs, &lt;a&#xA;    href=&#34;https://security.googleblog.com/2021/04/rust-in-android-platform.html&#34;&gt;such&#xA;    as Android using Rust in the Android Open Source Project&lt;/a&gt;, there‚Äôs a lot of&#xA;  extremely reasonable concern about the high cost of ‚Äúrewriting it all in Rust‚Äù&#xA;  (or any other safer language), as it‚Äôs often phrased. Operating systems, web&#xA;  browsers, complex online services, and so on can be implemented with tens of&#xA;  millions of lines of C/C++ code. (&lt;a&#xA;    href=&#34;https://www.technologyreview.com/2012/12/03/181350/many-cars-have-a-hundred-million-lines-of-code/&#34;&gt;Sometimes&#xA;    more&lt;/a&gt;.) Rewriting all that seems prohibitively expensive, and exacerbates &lt;a&#xA;    href=&#34;https://www.usenix.org/conference/enigma2021/presentation/gaynor&#34;&gt;what&#xA;    Alex Gaynor aptly calls grief&lt;/a&gt; ‚Äî¬†people stay in the denial stage longer when&#xA;  struck by the enormity of the memory unsafety problem.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thankfully, &lt;a href=&#34;https://wiki.mozilla.org/Oxidation&#34;&gt;replacing C/C++ with&#xA;    code in a safer language&lt;/a&gt; is not an all-or-nothing task. We can do it&#xA;  gradually; some parts we might never need to replace. Most safer languages can&#xA;  link in the same address space as C and/or C++, and call into and be called by&#xA;  C/C++. You can also normalize data structures such that the safe code handles&#xA;  arbitrary inputs, and the C/C++ code can focus on a single, simpler grammar. For&#xA;  example:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;formats.png&#34; width=&#34;328&#34; height=&#34;347&#34; alt=&#34;internet ‚Üí { PNG,&#xA;JPEG, GIF, TIFF, ... } ‚Üí SkBitmap&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;You can accept&#xA;    arbitrary image (e.g.) formats from the internet, use a safer language to&#xA;    normalize them into Skia‚Äôs simple &lt;code&gt;SkBitmap&lt;/code&gt; format, and then handle&#xA;    the bitmaps in Skia in C++. This simplifies the C++ code (reducing its attack&#xA;    surface), and provides a simple cross-language interface.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;But how do you tell where to start replacing C/C++ with safer code, and where&#xA;  to stop?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although security is certainly not the only benefit of a safe language ‚Äî¬†the&#xA;  Android team‚Äôs post starts out stressing correctness ‚Äî my perspective is&#xA;  security. And from that starting point, we can use what I think is a pretty&#xA;  clear method to prioritize our efforts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Even if you have, say, 20 million lines of C++ code, not all of it is&#xA;  directly or indirectly exposed to attackers. You can start hardening the most&#xA;  exposed code first, and you can rank exposure by how long the path to the code&#xA;  is. Consider &lt;a href=&#34;https://googleprojectzero.blogspot.com/2020/12/an-ios-zero-click-radio-proximity.html&#34;&gt;Ian&#xA;    Beer‚Äôs epic radio pyrotechnics&lt;/a&gt;, in which he compromised iPhones by sending&#xA;  them mean-spirited packets by radio. We can model the attack surface exposure&#xA;  something like this:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;surface-01.png&#34; width=&#34;356&#34; height=&#34;59&#34; alt=&#34;attacker ‚Üí radio&#xA;chip ‚Üí kernel&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;An attack pathway from the internet&#xA;    to the kernel.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;That‚Äôs a bit of an oversimplification, but it lets us see that the attacker‚Äôs&#xA;  call graph is not very deep ‚Äî¬†that is, that driver is pretty exposed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additionally, as the title of Ian‚Äôs post points out, the attacker‚Äôs cost to&#xA;  traverse the first few edges is 0. We can model that by assigning ‚Äòweight‚Äô or&#xA;  ‚Äòcost‚Äô to the edges in the graph. The higher the cost, the less likely it is&#xA;  that the attacker will succeed. Assuming the radio is fairly simple and does&#xA;  little normalization or filtering before passing what it got to the kernel, we&#xA;  might draw something like this:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;surface-02.png&#34; width=&#34;416&#34; height=&#34;61&#34; alt=&#34;attacker ‚Üí (0)&#xA;radio chip ‚Üí (low or medium) kernel&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;An attack&#xA;    pathway from the internet to the kernel, with estimated costs for each edge&#xA;    traversal.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;On a scale from 0 &amp;lt; low &amp;lt; medium &amp;lt; high, we might generously&#xA;  estimate the cost to exploit the vulnerable driver to be maybe medium. If the&#xA;  defender is lucky, maybe ASLR is working, or something.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Ian explains everything in full detail in his post, but in general we should&#xA;  not think of C/C++ code as defensible. If an attacker is able to get at C/C++&#xA;  attack surface, we must assume they can win with an exploit based on memory&#xA;  unsafety.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As an additional example, consider your web server‚Äôs or browser‚Äôs TLS&#xA;  implementation. Should we consider it exposed? We can model it something like&#xA;  this:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;surface-03.png&#34; width=&#34;739&#34; height=&#34;61&#34; alt=&#34;attacker ‚Üí (0,&#xA;low, or medium) net interface ‚Üí (passthru) kernel ‚Üí (passthru) TCP ‚Üí (low or&#xA;medium) TLS&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;An attack pathway from the internet to&#xA;    the application‚Äôs TLS implementation.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;In this case, the attacker is interested only in the application‚Äôs TLS&#xA;  implementation, and is just using the kernel as a way to get there ‚Äî¬†they are&#xA;  not attacking the device driver or the TCP implementation. (Although those are&#xA;  also exposed attack surfaces, of course.) The kernel typically does not do&#xA;  anything with the application layer traffic, passing it verbatim to the userland&#xA;  application. So the kernel is not creating a security boundary in this case.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The attacker has a pretty straight shot to your application‚Äôs TLS&#xA;  implementation; the only attack precondition is whether the attacker can send&#xA;  malicious TLS traffic to the application. Obviously, servers listen to the&#xA;  internet and process whatever they get; that‚Äôs 0 cost. If attacking a client, an&#xA;  attacker may have to get the target to contact their server or may have to be on&#xA;  the same network as the target. We might say that is up to medium cost.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, things like device drivers and HTTP, TCP, and TLS implementations are all&#xA;  fine candidates for (re)implementing in a safer language. They‚Äôre unavoidably&#xA;  exposed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Consider an example where the C/C++ attack surface is not as directly&#xA;  exposed.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;surface-04.png&#34; width=&#34;571&#34; height=&#34;59&#34; alt=&#34;attacker ‚Üí ... ‚Üí&#xA;HTTP ‚Üí parse CSP ‚Üí evaluate CSP&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;An attack pathway&#xA;    from the internet to a client‚Äôs CSP evaluator.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;In this example, we have an HTTP client that is going to parse and evaluate a&#xA;  &lt;a href=&#34;https://en.wikipedia.org/wiki/Content_Security_Policy&#34;&gt;Content Security&#xA;    Policy&lt;/a&gt; (CSP) header. Each of the network interface, device driver, TCP&#xA;  implementation, TLS client implementation, HTTP client implementation, and CSP&#xA;  parser are fairly exposed attack surface. For example, if the attacker wants to&#xA;  exploit some bug in the CSP parser, they can likely rely on all of the previous&#xA;  components to pass the header value through verbatim to the CSP parser. Thus,&#xA;  they probably do not create a security boundary.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But if the attacker wants to exploit a likely bug class, mis-evaluation of&#xA;  CSP policy, they must first get past the CSP parser. Although it is vulnerable&#xA;  attack surface, it does also provide some security boundary: the policy must be&#xA;  well-formed according to the grammar the parser accepts. Another bug class is&#xA;  that the parser‚Äôs grammar is not necessarily the same as the grammar in the&#xA;  spec.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus, we‚Äôd be speaking of logic bugs in the CSP parser and/or evaluator. This&#xA;  is the kind of code that can be buggy in any language; this is not memory&#xA;  unsafety that can be resolved at scale with a safer language.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These examples suggest that you have to get fairly deep into the call graph&#xA;  before memory unsafety becomes less of a concern. That‚Äôs consistent with &lt;a&#xA;    href=&#34;https://alexgaynor.net/2020/may/27/science-on-memory-unsafety-and-security/&#34;&gt;the&#xA;    findings that memory unsafety accounts for anywhere from ‚Öî to ¬æ of&#xA;    vulnerabilities&lt;/a&gt;. The problem is that bad.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Models like those above can be step 1 in a process of repair triage. You&#xA;  might order a set of constraints when filtering through what code to rewrite,&#xA;  apply mitigations or testing to, or even get rid of first:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Select the most exposed code&lt;/li&gt;&#xA;  &lt;li&gt;...of that code, start with the highest-privilege code&lt;/li&gt;&#xA;  &lt;li&gt;...of that code, start with the code that has the highest observed bug count&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Or you might triage differently, depending on your situation:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Select the most exposed code&lt;/li&gt;&#xA;  &lt;li&gt;...of that code, start with the code that has the highest observed bug count&lt;/li&gt;&#xA;  &lt;li&gt;...of that code, start with the highest-privilege code&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Or even:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;  &lt;li&gt;Select the code that has the highest observed bug count&lt;/li&gt;&#xA;  &lt;li&gt;...of that code, start with the most exposed code&lt;/li&gt;&#xA;  &lt;li&gt;...of that code, start with the highest-privilege code&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;Which approach is appropriate depends on your system. For example, if you are&#xA;  working entirely in the kernel, all your code runs at the same level of&#xA;  privilege so you can‚Äôt use that as a filter. Or if you are in userland, but your&#xA;  application is not making use of process sandboxing, consider exploring that&#xA;  first before starting a rewrite effort.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In any case, we don‚Äôt have to ‚Äúrewrite everything in Rust‚Äù to significantly&#xA;  improve memory safety, and we are not lost in a sea of undifferentiated attack&#xA;  surface. There are ways we can prioritize in a somewhat systematic way ‚Äî¬†we&#xA;  don‚Äôt have to fix random things ad hoc.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;i&gt;Thanks to Jacob Hoffman-Andrews, Andrew Dunham, and Dev Akhawe for reading&#xA;    drafts of this post and suggesting helpful improvements!&lt;/i&gt;&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2021/04/09/prioritizing-memory-safety-migrations/index.html</guid>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Vaccine Day</title>
      <link>https://noncombatant.org/2021/03/15/vaccine-day/index.content</link>
      <description>&lt;h1&gt;Vaccine Day&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;15 March 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Today was the first day I became &lt;a&#xA;href=&#34;https://sf.gov/information/other-conditions-eligible-covid-19-vaccine&#34;&gt;eligible&#xA;for the Covid-19 vaccine&lt;/a&gt;. I‚Äôm at high risk and in group 1c for a pile of&#xA;reasons. I had been checking and re-checking the various vaccine appointment&#xA;sign-up web sites all weekend, to no avail.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm a hardened survivor; but, you know, that doesn‚Äôt mean I want to test fate&#xA;on purpose. So I‚Äôve been sheltering in place for over a year, with yet another&#xA;round of medical adventures last Summer, venturing outside as rarely as possible&#xA;and coming into contact only with my immediate SF family (who have observed the&#xA;same precautions).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;By chance, yesterday evening, a friend who has been volunteering at &lt;a&#xA;href=&#34;https://sf.gov/location/moscone-center-south-covid-19-vaccine-site&#34;&gt;the&#xA;Moscone Center mass vaccination site&lt;/a&gt; pointed me to the web site and said I&#xA;could get an appointment just then. So I mashed the buttons real fast and indeed&#xA;I got an appointment for today!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The whole thing was run incredibly smoothly. Even though the place was full&#xA;(within the limits of safe distancing) and the lines were long, everything moved&#xA;as quickly as possible and the whole process took not much longer than it takes&#xA;to walk in. I walked right up to the moving line, got to the door, in the&#xA;building, signed in, down the escalators to the convention floor (where there&#xA;were speakers set up and &lt;a&#xA;href=&#34;https://www.youtube.com/watch?v=LPFgBCUBMYk&#34;&gt;blasting Janelle&lt;/a&gt;!!), to a&#xA;big ol‚Äô hall with well-spaced chairs and some high-energy volunteers cheering&#xA;and directing traffic. Everyone was pretty happy, because fuckin‚Äô science,&#xA;right?! I sat for about 5 minutes before it was my turn, and then I was gently&#xA;but unceremoniously jabbed. Then everyone has to sit for 15 minutes in case they&#xA;have an allergic reaction or other side-effect. (Nobody had any trouble that I&#xA;could see while I was there.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;More Janelle on the way out. Then I just went home as if it were a normal&#xA;day.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But it was absolutely not a normal day. It was a triumph of science, and just&#xA;as importantly it is a triumph of civic pride and care for fellow people. We can&#xA;solve collective action problems, and provide public goods like public health ‚Äî&#xA;if we want to. It took a crisis to shake us awake, and we have to work against&#xA;the simultaneous crisis of an ideology dedicated to &lt;i&gt;not&lt;/i&gt; solving&#xA;collective action problems and &lt;i&gt;not&lt;/i&gt; providing public goods.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But it‚Äôs really happening. This is the first time in a year that I have&#xA;really felt, at a gut level, that we might someday get through this.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Once I‚Äôve got my second dose (already scheduled!) and am feeling safe, I‚Äôm &lt;a&#xA;href=&#34;https://sfdhr.org/emergency-healthcare-volunteers&#34;&gt;going to volunteer&#xA;too&lt;/a&gt;. I‚Äôm feeling grateful, once again, for my incredible medical luck. It‚Äôs&#xA;a happy duty to help some other people get their luck.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2021/03/15/vaccine-day/index.html</guid>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Maybe We Can Have Nice Things</title>
      <link>https://noncombatant.org/2021/02/16/maybe-we-can-have-nice-things/index.content</link>
      <description>&lt;h1&gt;Maybe We Can Have Nice Things&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;16 February 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;aside&gt;18 February: See below for some nice updates!&lt;/aside&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Programming languages advance by introducing new constraints. A key reason we&#xA;don‚Äôt use assembly language for everything is that the lack of constraints make&#xA;it too hard to use for everyday programming. Before &lt;a&#xA;href=&#34;https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF&#34;&gt;&lt;code&gt;goto&lt;/code&gt;&#xA;was considered harmful&lt;/a&gt;, people wrote machine code that jumped all over the&#xA;place, and programmers had to maintain a mental model of the complete machine&#xA;state and the full implications of each jump ‚Äî¬†a recipe for bugs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Then, &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Structured_programming&#34;&gt;structured&#xA;programming&lt;/a&gt; was introduced: structured languages still compiled down to&#xA;&lt;code&gt;goto&lt;/code&gt;s (or arbitrary jumps), but the programmer could think in terms&#xA;of more limited jumps: &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt;,&#xA;&lt;code&gt;call&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;. These constrained&#xA;jumps are much easier to understand; for example, when you‚Äôre reading code, you&#xA;can know that &lt;code&gt;return&lt;/code&gt; doesn‚Äôt return just anywhere. It returns only&#xA;to the caller, as identified by a pointer on the stack. Later, language&#xA;designers added additional constrained jumps like&#xA;&lt;code&gt;throw&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;, and virtual function calls.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(&lt;code&gt;throw&lt;/code&gt; is a little bit too &lt;code&gt;goto&lt;/code&gt;-y for my taste,&#xA;since you can‚Äôt tell locally where the relevant &lt;code&gt;catch&lt;/code&gt; block is. But&#xA;that‚Äôs a story for another time.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A key innovation of C++ was to introduce &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization&#34;&gt;RAII&lt;/a&gt;,&#xA;which essentially ‚Äòpiggybacks‚Äô on the value of the stack and enriches it with a&#xA;lot more power. (The additional complexity is usually manageable, and worth it.)&#xA;It allows you extend the automatic memory management that the stack provides,&#xA;initializing and cleaning up complex resources instead of just primitive values&#xA;like integers and floats. You can automatically close open files, release&#xA;dynamic storage, and so on. And it‚Äôs deterministic.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But there was still the problem of the heap: a free-fire zone with no&#xA;constraints, riddled with memory leaks (heap resources allocated but never&#xA;released) and use-after-free bugs (heap resources re-used even after having been&#xA;released).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A key innovation of Rust has been to &lt;a&#xA;href=&#34;https://doc.rust-lang.org/1.8.0/book/references-and-borrowing.html&#34;&gt;statically&#xA;constrain the lifetimes of heap resources&lt;/a&gt;, enabling us to more completely&#xA;solve the worst remaining memory unsafety problem. (Previous solutions to the&#xA;heap lifetime problem were &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)&#34;&gt;dynamic&lt;/a&gt;,&#xA;not static, and hence expensive in space and time ‚Äî¬†as well as being&#xA;non-deterministic. These limitations reduce the applicability of&#xA;dynamically-managed languages to applications and environments where these costs&#xA;are affordable.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And, of course, taming object lifetimes greatly eases the problem of safe,&#xA;efficient concurrency. Concurrency is the key to improving performance in modern&#xA;systems.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Beyond memory safety, Rust makes more use of typefulness than I typically see&#xA;in other mainstream languages in its niche. For example, Rust‚Äôs rich&#xA;&lt;code&gt;enum&lt;/code&gt;s and pattern matching make it easier to write state machines,&#xA;&lt;a href=&#34;https://doc.rust-lang.org/rust-by-example/generics/new_types.html&#34;&gt;the&#xA;new type idiom&lt;/a&gt; makes it easier to get additional type safety (and improves&#xA;the interface-as-documentation factor), and so on. You can work to get similar&#xA;benefits in other languages, but Rust‚Äôs syntactic mechanisms and idiomatic usage&#xA;create affordances for these easier patterns.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another freeing constraint Rust has introduced has been to systematize and&#xA;automate dependency management: the Cargo package management system. Good&#xA;dependency management is a &lt;a href=&#34;https://research.swtch.com/deps&#34;&gt;monstrously&#xA;hard problem&lt;/a&gt;. Any dependency management system, including manual or ad hoc&#xA;management, poses a variety of problems:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;b&gt;Version conflicts:&lt;/b&gt; Inevitably, the latest version of the foo package&#xA;has changed its API in such a way that it can‚Äôt interoperate with the bar&#xA;package. Now resolve these conflicts all up and down the dependency tree.&#xA;Fun!&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;b&gt;Supply-chain security:&lt;/b&gt; When you pull in a dependency, you must trust&#xA;the transitive closure of all the authors who have committed to that dependency&#xA;sub-tree. This includes not just the code and the programs you can build with&#xA;it, but build scripts themselves.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;b&gt;Micro- and even pico-dependencies:&lt;/b&gt; The tendency to multiply the&#xA;previous 2 problems by creating &lt;a&#xA;href=&#34;https://www.npmjs.com/package/is-odd&#34;&gt;extremely tiny&lt;/a&gt;, &lt;a&#xA;href=&#34;https://www.npmjs.com/package/is-even&#34;&gt;single-use packages&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;b&gt;Proliferation:&lt;/b&gt; The tendency to multiply the previous 3 problems by&#xA;creating several packages that serve the same basic need, leading to a situation&#xA;in which effort solving the same problem is fragmented ‚Äî¬†including&#xA;documentation, training, code reviewer/auditor hours, and so on. (I call this&#xA;the ‚ÄúOccam‚Äôs Razor now has &lt;a&#xA;href=&#34;https://www.theonion.com/fuck-everything-were-doing-five-blades-1819584036&#34;&gt;5&#xA;blades&lt;/a&gt;‚Äù problem.)&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The NPM ecosystem provides the clearest modern illustration of these&#xA;problems. (See page 11 of &lt;a&#xA;href=&#34;https://octoverse.github.com/static/github-octoverse-2020-security-report.pdf&#34;&gt;GitHub‚Äôs&#xA;report on security&lt;/a&gt;, for example.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, for all of NPM‚Äôs problems, &lt;b&gt;at least it is a package management&#xA;system at all&lt;/b&gt;! It‚Äôs easy to pick on NPM (or predecessors like &lt;a&#xA;href=&#34;https://www.cpan.org/&#34;&gt;CPAN&lt;/a&gt;, or &lt;a href=&#34;https://ctan.org/&#34;&gt;CTAN&lt;/a&gt;,&#xA;or...), but even at its worst it‚Äôs a &lt;b&gt;huge improvement&lt;/b&gt; over manually&#xA;managing dependencies (such as by manually vendoring them into your source tree,&#xA;or just telling the user to install such-and-such libraries before attempting to&#xA;compile).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Life is better with NPM, and with Rust‚Äôs Cargo, Go‚Äôs &lt;code&gt;go get&lt;/code&gt;, and&#xA;so on. Even when they aren‚Äôt perfect yet, they provide a framework for&#xA;improvement, by constraining where dependencies come from and how we maintain&#xA;them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But a lot of work is still necessary. As an example of a Nice Thing Indeed,&#xA;Cargo has this add-on package called &lt;a&#xA;href=&#34;https://github.com/rust-secure-code/cargo-supply-chain&#34;&gt;supply-chain&lt;/a&gt;,&#xA;which will show you all the packages a given package depends on. It will also&#xA;estimate how many individual publishers author those dependencies. Here is what&#xA;happens when you run supply-chain on itself:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;~/src/rust/cargo-supply-chain % &lt;b&gt;cargo supply-chain publishers&lt;/b&gt;&#xA;&#xA;The following crates will be ignored because they come from a local directory:&#xA; - cargo-supply-chain&#xA;&#xA;The `crates.io` cache was not found or it is invalid.&#xA;  Run `cargo supply-chain update` to generate it.&#xA;&#xA;Fetching publisher info from crates.io&#xA;This will take roughly 2 seconds per crate due to API rate limits&#xA;Fetching data for &#34;adler&#34; (0/79)&#xA;[&lt;i&gt;77 items, including some surprising ones, elided...&lt;/i&gt;]&#xA;Fetching data for &#34;xattr&#34; (78/79)&#xA;&#xA;The following individuals can publish updates for your dependencies:&#xA;&#xA; 1. alexcrichton via crates: flate2, wasm-bindgen-backend, wasi, bitflags, proc-macro2, wasm-bindgen-macro, wasm-bindgen, openssl-probe, unicode-xid, wasm-bindgen-macro-support, filetime, semver, tar, unicode-normalization, libc, js-sys, bumpalo, log, wasm-bindgen-shared, cfg-if, cc, web-sys&#xA; [&lt;i&gt;55 authors elided...&lt;/i&gt;]&#xA; 57. zesterer via crates: spin&#xA;&#xA;Note: there may be outstanding publisher invitations. crates.io provides no way to list them.&#xA;Invitations are also impossible to revoke, and they never expire.&#xA;See https://github.com/rust-lang/crates.io/issues/2868 for more info.&#xA;&#xA;All members of the following teams can publish updates for your dependencies:&#xA;&#xA; 1. &#34;github:rustwasm:core&#34; (https://github.com/rustwasm) via crates: web-sys, js-sys, wasm-bindgen-macro, wasm-bindgen-macro-support, wasm-bindgen-backend, wasm-bindgen, wasm-bindgen-shared&#xA; 2. &#34;github:servo:cargo-publish&#34; (https://github.com/servo) via crates: core-foundation-sys, percent-encoding, form_urlencoded, unicode-bidi, core-foundation, idna, url&#xA; 3. &#34;github:servo:rust-url&#34; (https://github.com/servo) via crates: percent-encoding, form_urlencoded, idna, url&#xA; 4. &#34;github:rust-bus:maintainers&#34; (https://github.com/rust-bus) via crates: security-framework-sys, security-framework, tinyvec&#xA; 5. &#34;github:rust-lang-nursery:libs&#34; (https://github.com/rust-lang-nursery) via crates: bitflags, log, lazy_static&#xA; 6. &#34;github:serde-rs:owners&#34; (https://github.com/serde-rs) via crates: serde_derive, serde, serde_json&#xA; 7. &#34;github:rust-lang:libs&#34; (https://github.com/rust-lang) via crates: libc, cfg-if&#xA; 8. &#34;github:rust-lang-nursery:log-owners&#34; (https://github.com/rust-lang-nursery) via crates: log&#xA; 9. &#34;github:rust-random:maintainers&#34; (https://github.com/rust-random) via crates: getrandom&#xA;&#xA;Github teams are black boxes. It&#39;s impossible to get the member list without explicit permission.&#xA;&#xA;~/src/rust/cargo-supply-chain % &lt;b&gt;cargo supply-chain update&lt;/b&gt;&#xA;Note: this will download large amounts of data (approximately 250Mb).&#xA;On a slow network this will take a while.&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now, that‚Äôs a lot of dependencies by a lot of publishers whom I don‚Äôt know.&#xA;(Although it‚Äôs not automated, if you dig around you‚Äôll find that many of those&#xA;authors are well-established members of the Rust development team, so trusting&#xA;them is an easier sell.) Another bummer is that, when I built supply-chain, my&#xA;default &lt;code&gt;$CFLAGS&lt;/code&gt; broke the build (&lt;b&gt;Update 18 Feb:&lt;/b&gt; with an&#xA;almost certainly spurious and not security-relevant warning,&#xA;&lt;code&gt;-Wunused-macros&lt;/code&gt;). (My flags are quite persnickety:&#xA;&lt;code&gt;-Weverything -Werror -std=c11&lt;/code&gt;. Very little code builds with these&#xA;flags. üòá) Apparently, some of supply-chain‚Äôs own dependencies depend on C code.&#xA;Alas.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But that‚Äôs OK! Cargo provides a framework for working on these problems. Over&#xA;time, I‚Äôd like to see things move along these lines:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Replace C/C++ dependencies with Rust, and reduce the use of&#xA;&lt;code&gt;unsafe&lt;/code&gt;. This has been happening, and will continue to, over time.&#xA;(See &lt;a href=&#34;https://github.com/rust-secure-code/safety-dance&#34;&gt;the Safety Dance&#xA;project&lt;/a&gt;, which is a focused on reducing the use of&#xA;&lt;code&gt;unsafe&lt;/code&gt;.)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Coalesce the most common dependencies into a (semi-)official ‚Äòextended&#xA;&lt;code&gt;std&lt;/code&gt;‚Äô, so that they can appear as a single dependency with a single&#xA;publishing team. This is controversial in some communities, but I think it would&#xA;go a long way toward reducing the problems.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Obviate some of the micro-dependencies by folding them into larger, more&#xA;general packages including the language itself, &lt;code&gt;std&lt;/code&gt;, and ‚Äòextended&#xA;&lt;code&gt;std&lt;/code&gt;‚Äô (where and if appropriate). This is also sometimes&#xA;controversial, but again I think it would help.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Perhaps supply-chain, check, clippy, or a new tool could provide some&#xA;indication of a package‚Äôs reputation or something like what the Perl community&#xA;jokingly calls &lt;a href=&#34;https://metacpan.org/pod/Test::Kwalitee&#34;&gt;kwalitee&lt;/a&gt;:&#xA;Not quality, but overall ‚Äòsmells‚Äô. Good test coverage? Is the package version&#xA;greater than 1.0? Actively maintained? Frequently used? Maintained by the same&#xA;people for a long time? A low proportion of lines of code in &lt;code&gt;unsafe&lt;/code&gt;&#xA;blocks, or in C/C++/assembly? Some of these things can be more or less&#xA;automatically determined, and tooling could flag packages that stand out.&#xA;&#xA;&lt;aside&gt;Fun update: Such a thing exists, and is called &lt;a&#xA;href=&#34;https://github.com/crev-dev/cargo-crev/&#34;&gt;crev&lt;/a&gt;. Awesome!&lt;/aside&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Another good thing about Rust is its friendly community. Not all systems&#xA;programming communities are as welcoming as Rust‚Äôs is. Rust, and some other&#xA;communities, have taken &lt;a&#xA;href=&#34;https://www.rust-lang.org/policies/code-of-conduct&#34;&gt;proactive steps to&#xA;maintain a healthy community&lt;/a&gt;. I think it‚Äôs fair to say the Rust community is&#xA;doing relatively well, especially in the systems programming niche.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Like all language communities, whether of natural languages or artificial&#xA;languages, the community and the body of literature and the oral tradition are&#xA;what matter. In its niche, Rust looks like the option with the most momentum&#xA;around a more positive, healthier community. The community and the language are&#xA;probably not perfect ‚Äî nothing is, if perfect is even a thing ‚Äî¬†but Rust looks&#xA;like the community most open to solving its problems, and most capable of&#xA;solving systems programming problems.&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;&#xA;&lt;p&gt;Thanks to Adrian Taylor for reminding me to mention typefulness, concurrency,&#xA;and Safety Dance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thanks to Sergey Davidoff, supply-chain maintainer, for pointing me at crev&#xA;and noting that Safety Dance is more about reducing &lt;code&gt;unsafe&lt;/code&gt; than&#xA;C.&lt;/p&gt;&#xA;&#xA;&lt;/aside&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2021/02/16/maybe-we-can-have-nice-things/index.html</guid>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Enigma 2021</title>
      <link>https://noncombatant.org/2021/02/06/enigma-2021/index.content</link>
      <description>&lt;h1&gt;Enigma 2021&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;6 February 2021&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Every year, the Enigma conference is enjoyable and interesting. I‚Äôm a huge&#xA;fan of the wide-ranging scope and single-track structure. I hope we all get&#xA;vaccinated in time to have the conference in person again next year. The&#xA;conference organizers did a great job making the virtual conference work as well&#xA;as possible, and the Slack was fun, but you know‚Ä¶ nothing beats in-person&#xA;hooting in the hallway track.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I was super fortunate to have my talk proposal accepted. I spoke about &lt;a&#xA;href=&#34;https://www.usenix.org/conference/enigma2021/presentation/palmer&#34;&gt;The&#xA;Limits Of Sandboxing, And Next Steps&lt;/a&gt;, which is about my work on the Chrome&#xA;Platform Security Team the past few years. (If you want to read the slides, &lt;a&#xA;href=&#34;https://docs.google.com/presentation/d/1U60ycn3iW5MOB_xJUc09fsS1KXY2i68m9eVJoG4loWk/edit#slide=id.gb726919370_0_12&#34;&gt;the&#xA;original Google presentation&lt;/a&gt; has all the speaker notes and working links to&#xA;citations. Spoiler Alert: the ‚Äúnext steps‚Äù are to adopt memory-safe&#xA;languages.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Alex Gaynor and I sort of collaborated to make the same point from 2&#xA;different perspectives. His presentation, &lt;a&#xA;href=&#34;https://www.usenix.org/conference/enigma2021/presentation/gaynor&#34;&gt;Quantifying&#xA;Memory Unsafety And Reactions To It&lt;/a&gt;, is a great synthesis of empirical data&#xA;and emotional realness. Likely the biggest difficulty we face in migrating away&#xA;from memory-unsafe languages is people‚Äôs emotional attachments to the status&#xA;quo. Change is hard.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As always, there were a whole bunch of high-quality talks this year. Some&#xA;stand-outs (in no particular order):&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;https://www.usenix.org/conference/enigma2021/presentation/starbird&#34;&gt;Online&#xA;Rumors, Misinformation And Disinformation: The Perfect Storm Of Covid-19 And&#xA;Election2020&lt;/a&gt;, by Kate Starbird&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;https://www.usenix.org/conference/enigma2021/presentation/mou&#34;&gt;Building&#xA;E2EE And User Identity&lt;/a&gt;, by Merry Ember Mou&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;https://www.usenix.org/conference/enigma2021/presentation/stone&#34;&gt;The State&#xA;Of 0-Day In-The-Wild Exploitation&lt;/a&gt;, by Maddie Stone&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/conference/enigma2021/presentation/negus&#34;&gt;No&#xA;Data, No Problem‚ÄîGiving Nuclear Inspectors Better Tools Without Revealing State&#xA;Secrets&lt;/a&gt;, by Mitch Negus&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2021/02/06/enigma-2021/index.html</guid>
      <pubDate>Sat, 06 Feb 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>A Sweet Chorus-y Echo</title>
      <link>https://noncombatant.org/2020/04/18/capistan/index.content</link>
      <description>&lt;h1&gt;A Sweet Chorus-y Echo&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;18 April 2020&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm really into continuous effects lately. (As opposed to discrete:&#xA;    clean/DISTORTION!!, normal/PHASER!!, et c.) I want to &lt;a href=&#34;/pedal-ideas/&#34;&gt;smoothly swoop&lt;/a&gt; through a sound‚Äôs&#xA;    range as I play.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;/2014/02/09/a-favorite-pedal-strymon-el-capistan/&#34;&gt;I‚Äôve always loved&#xA;        the Strymon El Capistan&lt;/a&gt;, but I‚Äôve been treating it as kind of a special&#xA;    effect, for a special occasion, rather than a go-to echo for regular use. But&#xA;    today I hit upon a magical setting that gives me what I want and can use all the&#xA;    time: a combination chorus and chorus-y delay. Here are the settings:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;chorus-capistan.jpg&#34; width=&#34;800&#34; height=&#34;800&#34; alt=&#34;Settings&#xA;for the El Capistan as a chorus-y echo&#34; loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;Settings for&#xA;        the El Capistan as a chorus-y echo&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;table class=&#34;small&#34;&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th class=&#34;right&#34;&gt;&lt;b&gt;Time&lt;/b&gt;&lt;/th&gt;&#xA;        &lt;td&gt;7:00&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th class=&#34;right&#34;&gt;&lt;b&gt;Tape Head&lt;/b&gt;&lt;/th&gt;&#xA;        &lt;td&gt;Single&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th class=&#34;right&#34;&gt;&lt;b&gt;Mode&lt;/b&gt;&lt;/th&gt;&#xA;        &lt;td&gt;A&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th class=&#34;right&#34;&gt;&lt;b&gt;Mix&lt;/b&gt;&lt;/th&gt;&#xA;        &lt;td&gt;somewhere shy of 12:00&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th class=&#34;right&#34;&gt;&lt;b&gt;Tape Age&lt;/b&gt;&lt;/th&gt;&#xA;        &lt;td&gt;7:00&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th class=&#34;right&#34;&gt;&lt;b&gt;Repeats&lt;/b&gt;&lt;/th&gt;&#xA;        &lt;td&gt;somewhere shy of 12:00&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;    &lt;tr&gt;&#xA;        &lt;th class=&#34;right&#34;&gt;&lt;b&gt;Wow &amp;amp; Flutter&lt;/b&gt;&lt;/th&gt;&#xA;        &lt;td&gt;3:00 or beyond!&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;p&gt;Crucial to this setup is the expression pedal, set to control the &lt;b&gt;Time&lt;/b&gt;&#xA;    parameter. (I use a Roland EV-5.) With the expression pedal all the way down,&#xA;    &lt;b&gt;Time&lt;/b&gt; is minimized and you get a thick chorus. (You can reduce the &lt;b&gt;Wow&#xA;        &amp;amp; Flutter&lt;/b&gt; and/or the &lt;b&gt;Mix&lt;/b&gt; to make it less thick.) Use the&#xA;    &lt;b&gt;Tap&lt;/b&gt; button to set the tempo or ease forward on the expression pedal, and&#xA;    it gradually becomes a wow-and-flutter-y echo.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here‚Äôs an audio sample. I first play the part dry, then again with El&#xA;    Capistan doin‚Äô its full-on warble. Then I increase the &lt;b&gt;Time&lt;/b&gt; and turn it&#xA;    into an echo. Note space-cadet pitch shifting, too. (If you hear a little&#xA;    distortion, that‚Äôs because I have my MXR Sugar Drive on all the time, set to&#xA;    barely distort when my volume pedal is on max. Continuous sounds!)&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;warble.m4a&#34; /&gt;&#xA;&lt;/audio&gt;</description>
      <author>Chris Palmer</author>
      <guid>2020/04/18/capistan/index.html</guid>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The What The Fuck Factor</title>
      <link>https://noncombatant.org/2020/02/26/wtff/index.content</link>
      <description>&lt;h1&gt;The What The Fuck Factor&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;26 February 2020&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In an interview with Jesse Gress, musician &lt;a&#xA;href=&#34;https://books.google.com/books?id=XtxJJLYqlUIC&amp;pg=PA97&amp;lpg=PA97&amp;dq=vernon+reid+what+the+fuck+factor&amp;source=bl&amp;ots=Hvh0UUPX6p&amp;sig=ACfU3U0QLeqjMEqhS0YYJr-2E_OiFAEw1w&amp;hl=en&amp;ppis=_c&amp;sa=X&amp;ved=2ahUKEwicuIGC-NbnAhVSvZ4KHT9gD5oQ6AEwAHoECAoQAQ#v=onepage&amp;q=vernon%20reid%20what%20the%20fuck%20factor&amp;f=false&#34;&gt;Vernon&#xA;Reid described what he calls the What The Fuck Factor&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;&lt;p&gt;Maybe the WTFF springs from a magic combination of innovation, intuition, and&#xA;passion. ‚ÄúI‚Äôm always attracted to ‚Äòfeel‚Äô sorts of things,‚Äù muses Reid, ‚Äúbut when&#xA;I hear a player who‚Äôs really accomplished technically &lt;i&gt;and&lt;/i&gt; who moves me&#xA;emotionally, that‚Äôs the greatest: Pat Martino, Allan Holdsworth, George Benson.&#xA;Or &lt;a&#xA;href=&#34;https://www.guitarplayer.com/technique/joe-diorios-intervallic-designs&#34;&gt;Joe&#xA;Diorio ‚Äî¬†his book &lt;i&gt;Intervallic Designs&lt;/i&gt;&lt;/a&gt; changed my life. They‚Äôre all&#xA;very angular, mathematically precise players, but there‚Äôs something there for me&#xA;that‚Äôs very warm. I don‚Äôt know what it is exactly; maybe a real sense of moral&#xA;commitment and love. After all, love has angles.‚Äù&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2020/02/26/wtff/index.html</guid>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Recoverability</title>
      <link>https://noncombatant.org/2019/08/24/recoverability/index.content</link>
      <description>&lt;h1&gt;Recoverability&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;24 August 2019&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;    &lt;p&gt;Update 25 Aug: Removed 2 paragraphs that made more sense in an older&#xA;        draft than in the post as finally published.&lt;/p&gt;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;i&gt;Recoverability&lt;/i&gt; is my word for a desirable computer safety property:&#xA;    The ability to fully assert ownership and control over the machine and all its&#xA;    operations. (This includes the ability to fully &lt;i&gt;relinquish&lt;/i&gt; control of the&#xA;    machine, too.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Recoverability is crucial in many everyday situations:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;When the machine changes ownership (new and used purchases, gifts, loaner&#xA;        machines from the help desk, et c.).&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;When decommissioning the machine, you want to ensure that the machine is&#xA;        entirely clean of your data ‚Äî including sensitive documents and files, but also&#xA;        access tokens and credentials.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;When borrowing the computer (from a friend, at the copy shop, at the public&#xA;        library, et c.).&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;After an attacker has compromised the machine.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;When people (e.g. family members, roommates) share a computer or phone.&#xA;        (This scenario can involve hostility, e.g. intimate partner surveillance and&#xA;        abuse. We have to adopt and work to solve for this threat model!)&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You can see that recoverability really is an everyday problem, for everyone,&#xA;    when you consider how many kinds of devices require recoverability. A&#xA;    sampling:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;traditional computers: servers, desktops, laptops&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;phones&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;kiosk and point-of-sale computers&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;printers, scanners, fax machines&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;cars (&lt;a&#xA;            href=&#34;https://www.usatoday.com/story/money/cars/2018/01/30/car-renters-beware-bluetooth-use-can-reveal-your-private-data/1080225001/&#34;&gt;ever&#xA;            found someone else‚Äôs contacts in your rental?&lt;/a&gt;)&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Alexas, Google Homes, Apple HomePods, et c.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;most kinds of data storage devices (USB drives, SSDs, spinning disks, et&#xA;        c.)&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Recoverability is mostly about code integrity, but maintaining data&#xA;    confidentiality (usually by ensuring it‚Äôs destroyed) is also important.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Our Goal&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Our goal should be to make recoverability and relinquishment first-class,&#xA;    well-supported, documented, discoverable &lt;a href=&#34;https://eprint.iacr.org/2007/399.pdf&#34;&gt;ceremonies&lt;/a&gt; that people&#xA;    can&#xA;    easily and regularly use. For example, &lt;a href=&#34;https://support.apple.com/en-us/HT208244&#34;&gt;resetting a digital&#xA;        assistant&lt;/a&gt; really should delete all user data storage, and should&#xA;    affirmatively reset all system software (including all peripheral firmware!) to&#xA;    a known-good state.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Of course, that‚Äôs harder than it sounds. If your SSD‚Äôs firmware is&#xA;    compromised, it‚Äôs probably lying to you about updating the operating system and&#xA;    the firmware itself.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Problem&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;In most computing devices, there are tons of places where no-longer-wanted&#xA;    data and code can remain, thwarting our ability to recover the device. &lt;a&#xA;        href=&#34;https://www.malwaretech.com/2015/06/hard-disk-firmware-rootkit-surviving.html&#34;&gt;Malware&#xA;        might hide in the firmware&lt;/a&gt;. (Many peripherals, including &lt;a&#xA;        href=&#34;https://mobile.twitter.com/Foone/status/1161421430178766853&#34;&gt;keyboards&lt;/a&gt;,&#xA;    network interfaces, storage devices, cameras, &lt;a&#xA;        href=&#34;https://www.theverge.com/2016/10/28/13454052/apple-macbook-pro-touch-bar-apple-watch-features&#34;&gt;the&#xA;        Mac Touchbar&lt;/a&gt;, and more have updatable firmware.) &lt;a&#xA;        href=&#34;https://securitywatch.pcmag.com/privacy/320343-how-to-securely-dispose-of-a-printer&#34;&gt;Many&#xA;        printers and scanners keep a copy of what they‚Äôve printed and scanned&lt;/a&gt; ‚Äî how&#xA;    do you wipe your tax records off your printer before selling it on Craigslist?&#xA;    And so on.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;‚ÄòEasy‚Äô Solutions&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;It might seem that we could ease recoverability by designing the system such&#xA;    that it is essentially &lt;a href=&#34;https://en.wikipedia.org/wiki/W%5EX&#34;&gt;W^X&lt;/a&gt;&#xA;    ‚Äî¬†writable data can never become executable code. However, it is very close to&#xA;    impossible to achieve this for a variety of reasons. Among others:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;The system might &lt;a href=&#34;https://en.wikipedia.org/wiki/Interpreted_language&#34;&gt;interpret data as&#xA;            code&lt;/a&gt; (this includes configuration files). This is so useful that system&#xA;        designers can‚Äôt help themselves, or even don‚Äôt realize they‚Äôre doing it.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;It means giving up updatability. Is that even worse for safety than poor&#xA;        recoverability?&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Perhaps the only real way to achieve W^X is on a pure-ROM system: no writes.&#xA;    &lt;a href=&#34;https://en.wikipedia.org/wiki/Nintendo_Entertainment_System&#34;&gt;As great&#xA;        as the NES was&lt;/a&gt;, a system designed on that principle has very limited&#xA;    utility. (But more than none! And maybe sufficient for some of the use-cases?)&#xA;    Although &lt;a href=&#34;https://www.dkoldies.com/blog/-complete-list-of-nintendo-nes-games-with-save-batteries/&#34;&gt;NES&#xA;        Game Paks eventually got writable RAM&lt;/a&gt;, it was &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Volatile_memory&#34;&gt;volatile&lt;/a&gt; and hence&#xA;    recoverable.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That suggests another option: volatile installation. Even if the code is&#xA;    writable, as long as the memory is exclusively volatile, the device is&#xA;    recoverable. For example, &lt;a href=&#34;https://panic.com/blog/the-lightning-digital-av-adapter-surprise/&#34;&gt;Apple&#xA;        Lightning cables work this way&lt;/a&gt;. (More fun from &lt;a&#xA;        href=&#34;https://twitter.com/nyan_satan/status/1155148789977636864&#34;&gt;Lisa&#xA;        Braun&lt;/a&gt;.) &lt;a href=&#34;https://wiki.archlinux.org/index.php/Microcode&#34;&gt;CPU&#xA;        microcode updates can work the same way&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can also achieve a certain degree of recoverability if there are code&#xA;    updates, including in non-volatile memory, but all updates are authenticated&#xA;    (such as by cryptographic code and keys from ROM or a TPM). This gives us a good&#xA;    degree of recoverability until the non-updatable &lt;a&#xA;        href=&#34;https://www.macrumors.com/2013/06/24/apples-ios-7-lightning-connector-authentication-check-permanently-cracked/&#34;&gt;crypto&#xA;        is cracked&lt;/a&gt;. (See also &lt;a&#xA;        href=&#34;https://www.usb.org/sites/default/files/2019-01/USB-IF_USB%20Type-C%20Authentication%20Program%20Press%20Release_FINAL_20181227.pdf&#34;&gt;USB-C&#xA;        authentication&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For data confidentiality ‚Äî¬†mainly, rendering data unusable upon&#xA;    relinquishment ‚Äî¬†the only real way is to always write only ciphertext into&#xA;    non-volatile memory, then to destroy the key when relinquishing. Modern storage&#xA;    technology does not give us a way to be sure that data is deleted. (See e.g. &lt;a&#xA;        href=&#34;https://www.ontrack.com/blog/2016/10/25/wear-leveling/&#34;&gt;wear-leveling&lt;/a&gt;.)&#xA;    We can only hope to make it indecipherable.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;ios-security-effaceable.png&#34; width=&#34;436&#34; height=&#34;290&#34; alt=&#34;Screenshot of Apple iOS Security Guide: ‚ÄúThe Erase All Content and Settings&#xA;option in Settings obliterates all of the keys in Effaceable Storage, rendering&#xA;all user data on the device cryptographically inaccessible. Therefore, it‚Äôs an&#xA;ideal way to be sure all personal information is removed from a device before&#xA;giving it to somebody else or returning it for service.‚Äù&#34; loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;Effaceable memory for keys, described in the &lt;a&#xA;            href=&#34;https://www.apple.com/business/docs/site/iOS_Security_Guide.pdf&#34;&gt;iOS&#xA;            Security Guide&lt;/a&gt; as a recoverability mechanism.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;But all these ‚Äòeasy‚Äô mechanisms leave us with a question: do we have to trade&#xA;    off updatability for recoverability? Even volatile installation depends on the&#xA;    integrity of the installation source (usually your primary operating&#xA;    system).&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Hardest Case: Compromise&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;What are you actually, really supposed to do to recover your computer after&#xA;    it has been compromised?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Recovering and re-verifying the integrity of all your data and network&#xA;    accounts could be the topic of several books. For this post, I just mean the&#xA;    computer itself. After a successful attack, is your computer merely &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Electronic_waste#Amount_of_electronic_waste_worldwide&#34;&gt;e-waste&lt;/a&gt;?&lt;/p&gt;&#xA;&#xA;&lt;!--&#xA;&#xA;This doesn‚Äôt really contribute to the narrative; is a bit of a tangent.&#xA;&#xA;&lt;p&gt;If we‚Äôre being serious, a skilled attacker can remotely compromise &lt;a&#xA;href=&#34;https://chromereleases.googleblog.com/2019/07/stable-channel-update-for-desktop.html&#34;&gt;a&#xA;browser renderer process&lt;/a&gt;, &lt;a&#xA;href=&#34;https://www.cvedetails.com/vulnerability-list/vendor_id-26/product_id-529/Microsoft-Word.html&#34;&gt;a&#xA;word processor&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Stagefright_(bug)&#34;&gt;a&#xA;multi-media messaging app&lt;/a&gt;. From there, the attacker can elevate using any&#xA;number of local privilege escalation vulnerabilities.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The older your software is, the more likely it is that the attack tools&#xA;necessary to exploit its vulnerabilities will have been commoditized. Over time,&#xA;the level of skill necessary to succeed goes down, until finally it‚Äôs a&#xA;plug-and-play module for &lt;a href=&#34;https://www.metasploit.com/&#34;&gt;one of many&#xA;widely-available ‚Äòtesting‚Äô frameworks&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;--&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, &lt;b&gt;all&lt;/b&gt; your software and forgotten firmware is potentially&#xA;    relevant attack surface but also a potential persistence mechanism ‚Äî¬†breaking&#xA;    recoverability. We have to assume the worst in case of actual compromise. But&#xA;    depending on the hardware and firmware design, we may not have a way to recover&#xA;    all the firmwares. This includes those in the storage devices, which can break&#xA;    our ability even to recover the primary OS.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus recoverability is an unsolved privacy, usability, economic, and even&#xA;    environmental problem. It‚Äôs a fun and important problem for these reasons and&#xA;    (especially to me) because solving it requires a holistic, general view of&#xA;    computer systems. It‚Äôll never be enough to ‚Äòjust‚Äô design a good update protocol,&#xA;    or kernel, or UX, or memory subsystem. All those pieces (and more) must fit&#xA;    together in a coherent narrative and ceremony that people can observe, believe,&#xA;    and rely on every day.&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;aside&gt;&#xA;&#xA;    &lt;p&gt;Mara Tam reminded me in conversation that the shared device use case&#xA;        demonstrates a particularly acute need for recoverability and relinquishment.&#xA;        Any other errors or omissions are mine, of course.&lt;/p&gt;&#xA;&#xA;    &lt;p&gt;Someday I‚Äôd like to write at greater length about this use case. My&#xA;        colleagues and I have spent significant time chewing on it, and although it‚Äôs&#xA;        not easy it‚Äôs crucial that all platform developers handle it. Not only is it&#xA;        possible to do more than nothing, there may be some relatively straightforward&#xA;        improvements to be made.&lt;/p&gt;&#xA;&#xA;&lt;/aside&gt;</description>
      <author>Chris Palmer</author>
      <guid>2019/08/24/recoverability/index.html</guid>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The State Of Software Security In 2019</title>
      <link>https://noncombatant.org/2019/01/06/state-of-security-2019/index.content</link>
      <description>&lt;h1&gt;The State Of Software Security In 2019&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;...And What To Do About It&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;6 January 2019&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;My goal in this post is to skim my observations on the state of software&#xA;design and development over the past year, and to try to find a meaningful way&#xA;forward for myself for 2019. My perspective is limited by the fact that I have&#xA;worked exclusively in client-side software security for the past 7.5 years.&#xA;Still, I think there are broad trends visible even to me, and some clear signs&#xA;about where we need to go as an industry.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hope that this post is useful to a variety of security people: not just&#xA;engineers, but also UX designers and researchers, project/product/program&#xA;managers, people and business managers, and operations. In any case, all paths&#xA;to success require the help of all those kinds of people. This post is even more&#xA;of a link-fest than usual; I hope that‚Äôs useful.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The high-order bit in much of the below is complexity. Hardware, software,&#xA;platforms, and ecosystems are often way too complex, and a whole lot of our&#xA;security, privacy, and abuse problems stem from that.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Good&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/__apf__/status/1072199572628299776&#34;&gt;Encrypting&#xA;the web is going swimmingly&lt;/a&gt;! Also, &lt;a&#xA;href=&#34;https://blog.chromium.org/2018/05/evolving-chromes-security-indicators.html&#34;&gt;marking&#xA;non-secure web origins as non-secure, and marking secure origins as neutral&lt;/a&gt;,&#xA;is moving right along. It‚Äôs amazing and wonderful that we‚Äôve improved so much so&#xA;quickly, and it gives me hope for other huge efforts (see below). Thanks as&#xA;always to &lt;a href=&#34;https://letsencrypt.org/donate/&#34;&gt;Let‚Äôs Encrypt&lt;/a&gt;, and to&#xA;the other browsers who are moving in a similar direction!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although &lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_corruption&#34;&gt;memory&#xA;corruption&lt;/a&gt; vulnerabilities remain prevalent, iOS, Chrome OS, and Chrome are&#xA;existence proofs that, with good effort in design (privilege reduction) and&#xA;unreasonably high effort in implementation (actually making privilege reduction&#xA;work, &lt;a&#xA;href=&#34;https://github.com/google/oss-fuzz/blob/master/docs/clusterfuzz.md&#34;&gt;bug&#xA;hunting&lt;/a&gt;, bug fixing, and rapid deployment of bug fixes), it is &lt;strong&gt;just&#xA;barely&lt;/strong&gt; possible to significantly raise the cost of exploiting memory&#xA;corruption vulnerabilities for projects implemented in unsafe languages. Against&#xA;modern targets, exploiting memory corruption is nowhere near as easy as it was&#xA;in the 1990s or the 2000s.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://9to5mac.com/2018/01/19/ios-11-adoption-65-percent/&#34;&gt;iOS&#xA;continues to have excellent update adoption&lt;/a&gt; (&lt;a&#xA;href=&#34;https://david-smith.org/iosversionstats/&#34;&gt;see also&lt;/a&gt;), even though it‚Äôs&#xA;voluntary ‚Äî¬†a sign that people perceive the value of the updates. It‚Äôs unlikely&#xA;people are making their choice on the basis of security per se, of course. But&#xA;&lt;a href=&#34;https://twitter.com/mattblaze/status/1081384425416470528&#34;&gt;security and&#xA;privacy are key parts of iOS‚Äô value proposition&lt;/a&gt;, and I do think at least&#xA;some customers perceive them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://blog.github.com/2018-11-15-state-of-the-octoverse-top-programming-languages/&#34;&gt;Memory-safe&#xA;programming languages dominate the landscape&lt;/a&gt;. Additionally, the&#xA;fastest-growing languages are memory-safe. Some popular languages are even&#xA;type-safe. (Some might consider type safety a mere bonus, but to me, &lt;a&#xA;href=&#34;http://lucacardelli.name/Papers/TypefulProg.pdf&#34;&gt;typefulness&lt;/a&gt; is a&#xA;crucial building block for reliable and safe software.) There is even good news&#xA;in systems software, previously the unchallenged and most undeserved domain of&#xA;unsafety: Go is big there, and Rust is boopin‚Äô right along (see e.g. &lt;a&#xA;href=&#34;https://servo.org/&#34;&gt;Servo&lt;/a&gt;, &lt;a&#xA;href=&#34;https://chromium.googlesource.com/chromiumos/platform/crosvm/&#34;&gt;CrOS&#xA;VM&lt;/a&gt;, &lt;a href=&#34;https://github.com/xi-editor/xi-editor&#34;&gt;the Xi editor&lt;/a&gt;, &lt;a&#xA;href=&#34;https://fuchsia.googlesource.com/docs/+/d4f9b980f18fc6722b06abb693240b29abbbc9fc/rust_quickstart.md&#34;&gt;parts&#xA;of Fuchsia&lt;/a&gt;). Although we mourn &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Midori_(operating_system)&#34;&gt;Midori&lt;/a&gt;, it&#xA;can still teach us &lt;a&#xA;href=&#34;http://joeduffyblog.com/2015/11/03/blogging-about-midori/&#34;&gt;broadly&#xA;applicable, deep lessons&lt;/a&gt;. (See especially &lt;a&#xA;href=&#34;http://joeduffyblog.com/2015/11/03/a-tale-of-three-safeties/&#34;&gt;A Tale Of&#xA;Three Safeties&lt;/a&gt; and &lt;a&#xA;href=&#34;http://joeduffyblog.com/2016/02/07/the-error-model/&#34;&gt;The Error&#xA;Model&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Memory tagging, a new (and &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Tagged_architecture&#34;&gt;old&lt;/a&gt;) feature of&#xA;hardware, can help with memory safety problems. &lt;a&#xA;href=&#34;https://llvm.org/devmtg/2018-10/slides/Serebryany-Stepanov-Tsyrklevich-Memory-Tagging-Slides-LLVM-2018.pdf&#34;&gt;People&#xA;are working on making it happen on modern systems&lt;/a&gt; (&lt;a&#xA;href=&#34;https://arxiv.org/pdf/1802.09517.pdf&#34;&gt;paper&lt;/a&gt;). I don‚Äôt think it‚Äôs a&#xA;replacement for fixing bugs in as systemic a way as possible (ideally, in the&#xA;source language), but it has great potential to increase safety.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Static checkers ‚Äî¬†compilers ‚Äî and dynamic checkers (e.g. &lt;a&#xA;href=&#34;https://clang.llvm.org/docs/AddressSanitizer.html&#34;&gt;Address Sanitizer&lt;/a&gt;&#xA;and the rest of the LLVM sanitizers) have advanced very far in the past 20&#xA;years. What was once bleeding-edge research now comes for free with&#xA;off-the-shelf compilers. This is fantastic! (Start with &lt;code&gt;-Wall&#xA;-Werror&lt;/code&gt; in Clang or GCC, but I like to use &lt;code&gt;-Weverything&#xA;-Werror&lt;/code&gt;, with a few exceptions like &lt;code&gt;-Wno-padded&lt;/code&gt;.&#xA;Really.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://blog.chromium.org/2018/10/trustworthy-chrome-extensions-by-default.html&#34;&gt;Chrome&#xA;is making some structural improvements to the extensions platform&lt;/a&gt;, which&#xA;should reduce &lt;a&#xA;href=&#34;https://www.wired.com/story/chrome-extension-malware/&#34;&gt;some of the worst&#xA;abuses we see in that ecosystem&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Parts of the software industry are having &lt;a&#xA;href=&#34;https://www.amazon.com/World-Technology-Massey-Lectures-Revised/dp/088784636X&#34;&gt;an&#xA;ethical and moral awakening&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.bbc.com/news/technology-46054202&#34;&gt;Google&#xA;Walkout&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;https://static01.nyt.com/files/2018/technology/googleletter.pdf&#34;&gt;Cancel&#xA;Maven&lt;/a&gt; (&lt;a href=&#34;https://www.armscontrol.org/pressroom/2018-acpoy-winner&#34;&gt;see&#xA;also&lt;/a&gt;)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;https://medium.com/s/powertrip/im-an-amazon-employee-my-company-shouldn-t-sell-facial-recognition-tech-to-police-36b5fde934ac&#34;&gt;Against&#xA;Amazon Rekognition&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;https://www.telegraph.co.uk/technology/2018/10/13/microsoft-workers-protest-bid-build-pentagons-10bn-ai-warfare/&#34;&gt;Microsoft&#xA;workers protest AI warfare&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;http://humanetech.com/&#34;&gt;Time Well Spent&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;https://medium.com/@googlersagainstdragonfly/we-are-google-employees-google-must-drop-dragonfly-4c8a30c5e5eb&#34;&gt;Google&#xA;Must Drop Dragonfly&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You don‚Äôt have to agree with all those positions to find it good news that&#xA;our generation of engineers is growing beyond the ‚ÄúI could build it, so I did;&#xA;what are consequences?‚Äù mentality. &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Computer_Professionals_for_Social_Responsibility&#34;&gt;Previous&#xA;generations had to make very similar choices&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(I do happen to agree with all those positions, and I will not work on&#xA;machines designed for war or police, nor on Big Brotherly, censored search&#xA;engines. And I support the efforts for equality and fair treatment for everyone.&#xA;The Walkout was a good day, but it was just a beginning. There‚Äôs a long way to&#xA;go.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The increasing awareness and adoption of &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Universal_2nd_Factor&#34;&gt;Universal 2nd Factor&#xA;authentication&lt;/a&gt; is great news. (U2F has been standardized as &lt;a&#xA;href=&#34;https://www.w3.org/TR/webauthn/&#34;&gt;WebAuthn&lt;/a&gt;, which is considerably more&#xA;complex than most security people would like. Expect bugs to come of that...)&#xA;The high degree of phishing resistance it offers is at least as important as the&#xA;protections HTTPS provides. Phishing and account take-over have consistently&#xA;been 1 of our biggest problems, and WebAuthn can put a big dent in them. You can&#xA;use it now with Google, Facebook, Twitter, Dropbox, login.gov, and others.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Bad&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;C++ continues to be untenably complex and wildly unsafe:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.stroustrup.com/P0977-remember-the-vasa.pdf&#34;&gt;C++‚Äôs&#xA;creator finds himself on the other side of the community&lt;/a&gt; on the issue of&#xA;C++‚Äôs growing complexity. Stroustrup correctly identifies C++‚Äôs growing&#xA;complexity as a potentially fatal risk for the language.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://bugs.llvm.org/show_bug.cgi?id=34729&#34;&gt;The new, safe APIs are&#xA;not safe&lt;/a&gt;. (‚ÄúWONTFIX‚Äù.)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.regehr.org/archives/213&#34;&gt;C and C++ compilers continue&#xA;to exploit undefined behavior&lt;/a&gt; ‚Äî¬†something that should not exist ‚Äî¬†for the&#xA;dubious goal of micro-optimizations. (John Regehr: ‚ÄúA compiler that is very&#xA;smart at recognizing and silently destroying Type 3 functions becomes&#xA;effectively evil, from the developer‚Äôs point of view.‚Äù)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;C++ is so complicated that &lt;a&#xA;href=&#34;https://groups.google.com/a/chromium.org/forum/#!topic/cxx/2UTgWpM5N0c&#34;&gt;expert&#xA;programmers cannot find a universal way to find the size of a static array&lt;/a&gt;,&#xA;other than the classic vanilla C macro. Maybe simple is good, after all? ü§î&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I can‚Äôt possibly select and link to a list of the infinite bug reports whose&#xA;root causes are memory unsafety. A fun exercise is to skim through a good source&#xA;of vulnerability write-ups (&lt;a&#xA;href=&#34;https://googleprojectzero.blogspot.com/&#34;&gt;the Project Zero blog&lt;/a&gt; is one&#xA;of my favorites), and count how many of the bugs are even in the application&#xA;domain at all.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(Of course, if you find that there are more memory safety bugs than&#xA;application-domain bugs or other bugs, that could just as well be due to the&#xA;researchers‚Äô biases. But I think we can all agree that memory corruption bugs&#xA;simply should not exist at all, yet are numerous and often exploitable.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Designing a language that achieves all of memory safety, high performance,&#xA;and good usability remains very hard. The Rust compiler notices and rejects&#xA;safety bugs that C and C++ compilers don‚Äôt notice/can‚Äôt notice/purposefully&#xA;accept. ü§™üî® That is to Rust‚Äôs credit, but &lt;a&#xA;href=&#34;https://rcoh.me/posts/rust-linked-list-basically-impossible/&#34;&gt;this&#xA;discipline can be extremely difficult to learn&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Among the programming language research community‚Äôs goals is proving programs&#xA;safe. Gradually and increasingly, that work trickles down into real languages&#xA;that people can really use to ship real software. &lt;a&#xA;href=&#34;https://www.imperialviolet.org/2014/09/07/provers.html&#34;&gt;The difficulty of&#xA;using academic tools&lt;/a&gt; is partly a natural consequence of their small&#xA;audience, but some of the difficulty is unavoidable: proof of safety means&#xA;&lt;strong&gt;proof&lt;/strong&gt;, that difficult thing that people get PhDs for.&#xA;Ultimately, the software engineering community is going to have to commit to&#xA;meeting this standard, gradually and increasingly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Obviously, 2018 was the year everyone became aware of &lt;a&#xA;href=&#34;https://meltdownattack.com/&#34;&gt;Spectre &amp; Meltdown&lt;/a&gt;, &lt;a&#xA;href=&#34;https://foreshadowattack.eu/&#34;&gt;Foreshadow&lt;/a&gt;, &lt;a&#xA;href=&#34;https://www.intel.com/content/www/us/en/architecture-and-technology/l1tf.html&#34;&gt;L1TF&lt;/a&gt;,&#xA;and the idea of micro-architectural &lt;a&#xA;href=&#34;https://pdfs.semanticscholar.org/2209/42809262c17b6631c0f6536c91aaf7756857.pdf&#34;&gt;side-channels&#xA;generally&lt;/a&gt;. Shared resources abound, unfortunately. Of course, other&#xA;show-stopper security problems (typically due to &lt;a&#xA;href=&#34;https://people.kth.se/~maguire/DEGREE-PROJECT-REPORTS/100402-Vassilios_Ververis-with-cover.pdf&#34;&gt;monstrous&#xA;complexity&lt;/a&gt;) have been known for a long time (&lt;a&#xA;href=&#34;https://www.ssi.gouv.fr/archive/fr/sciences/fichiers/lti/cansecwest2006-duflot.pdf&#34;&gt;see&#xA;also&lt;/a&gt;, &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/System_Management_Mode#Problems&#34;&gt;see&#xA;also&lt;/a&gt;). Although those links refer mostly to Intel Architecture systems,&#xA;there‚Äôs no reason to think that (e.g.) ARM is inherently safer. In particular,&#xA;the micro-architectural side-channel problems are the natural result of&#xA;designing for maximum performance ‚Äî¬†which almost every chip designer is trying&#xA;to do, because that‚Äôs what almost every customer wants.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Ugly&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Abuse (the malicious use of legitimate functionality) affects more people‚Äôs&#xA;lives in more ways than does the exploitation of bugs. Although hacking can have&#xA;a surprising influence, such as in the form of political fallout or mass data&#xA;breaches, the reasons your friends and family are sad are much more prosaic&#xA;‚Äî¬†and harder to solve:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Phone scams; &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Technical_support_scam&#34;&gt;tech-support&#xA;scams&lt;/a&gt;; &lt;a&#xA;href=&#34;https://medium.com/@nancynakamoto_11949/the-princess-bride-and-the-mystery-of-the-tether-business-model-d76a08c94734&#34;&gt;cryptocurrency&#xA;scams&lt;/a&gt; and &lt;a&#xA;href=&#34;https://www.howtogeek.com/359129/don%E2%80%99t-fall-for-the-new-cryptoblackmail-scam-here%E2%80%99s-how-to-protect-yourself/&#34;&gt;extortion&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Malware, crapware, or ‚Äòunwanted software‚Äô that people purposefully install.&#xA;(These are often listed in legitimate stores, shipped with the device drivers of&#xA;hardware, or bundled with marginalware.)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;The scourge of &lt;a&#xA;href=&#34;https://motherboard.vice.com/en_us/article/53vm7n/inside-stalkerware-surveillance-market-flexispy-retina-x&#34;&gt;spouseware&#xA;and stalkerware&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://www.theguardian.com/technology/2018/nov/05/energy-cost-of-mining-bitcoin-more-than-twice-that-of-copper-or-gold&#34;&gt;Proof-of-work&#xA;continues not to work&lt;/a&gt; üòµ, &lt;a&#xA;href=&#34;https://www.cl.cam.ac.uk/~rnc1/proofwork.pdf&#34;&gt;as foretold by prophecy&lt;/a&gt;&#xA;üòë. The coming decades are going to bring increasing climate, uh, ‚Äòchallenges‚Äô,&#xA;and all computing systems are going to have to prove their worth relative to the&#xA;sum of &lt;strong&gt;all&lt;/strong&gt; their costs ‚Äî¬†including carbon and e-waste. We won‚Äôt&#xA;be able to laugh those off as externalities any longer. Proof-of-work systems&#xA;will continue to be unable to show sufficient value for the cost, and may even&#xA;be the wedge for regulation (if they don‚Äôt starve themselves or crash&#xA;first).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://infrequently.org/2018/09/the-developer-experience-bait-and-switch/&#34;&gt;The&#xA;web performance crisis&lt;/a&gt; (see also &lt;a&#xA;href=&#34;https://idlewords.com/talks/website_obesity.htm&#34;&gt;a hotter take&lt;/a&gt; ü•µ) is a&#xA;similar situation: hugely wasteful, but not (yet...?) self-limiting. In the past&#xA;I‚Äôve had to argue that &lt;a&#xA;href=&#34;https://conferences.oreilly.com/web2expo/webexsf2009/public/schedule/speaker/1016&#34;&gt;security&#xA;is affordable&lt;/a&gt; even given performance constraints. It was possible to get&#xA;both performance and security then, by reducing obvious bloat and enabling&#xA;less-obvious optimizations, and it‚Äôs possible now. The root cause then was the&#xA;same as it is now: too many developers don‚Äôt use the same client systems as&#xA;their userbase does, and they don‚Äôt know what network, memory, and CPU costs&#xA;they are incurring. Previously, those costs were hard to see. Now, they are&#xA;definitely not: every browser has a very good Dev Tools console, and there is no&#xA;excuse for not using it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Dependency slurping systems like NPM, CPAN, &lt;code&gt;go get&lt;/code&gt;, and so on&#xA;continue to freak me out. They might potentially be more dangerous than manual&#xA;dependency management, despite the huge risks of that practice, precisely&#xA;because they make it ‚Äòeasy‚Äô to grow your project‚Äôs dependency graph ‚Äî¬†and hence&#xA;the number of individuals and organizations that you implicitly trust. (And &lt;a&#xA;href=&#34;https://www.theregister.co.uk/2018/11/26/npm_repo_bitcoin_stealer/&#34;&gt;their&#xA;trustworthiness can suddenly change for the worse&lt;/a&gt;.) When there are&#xA;significant gaps in a language‚Äôs standard library, third-party developers will&#xA;eagerly fill those gaps with new dependencies for you to (not always knowingly)&#xA;inherit. There is &lt;a&#xA;href=&#34;https://github.com/tc39/proposal-javascript-standard-library/issues/19&#34;&gt;an&#xA;effort underway to fill gaps in JavaScript‚Äôs standard library&lt;/a&gt;, which I&#xA;strongly support for this reason.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Social media continues to amplify the worst in people, and &lt;a&#xA;href=&#34;https://www.nytimes.com/2018/11/29/technology/george-soros-facebook-sheryl-sandberg.html&#34;&gt;some&#xA;executives of social media companies continue to be part of the problem&lt;/a&gt;.&#xA;Dealing with the toxicity and abuse of social media is a long-term,&#xA;multi-pronged effort, but 1 thing that we can immediately do as engineers, PMs,&#xA;designers, and managers is to push back on ‚Äòengagement‚Äô as the primary or only&#xA;metric for ‚Äòsuccess‚Äô. It‚Äôs game-able and heavily gamed, and does not remotely&#xA;capture the real experiences of real people on social media. People‚Äôs&#xA;experiences are often &lt;a&#xA;href=&#34;http://seriouspony.com/trouble-at-the-koolaid-point/&#34;&gt;profoundly&#xA;awful&lt;/a&gt;, and we as software developers are responsible for dealing with the&#xA;consequences of what we‚Äôve built. Are we empowering people to learn and grow, or&#xA;are we amplifying the fuckery of Nazis and Chekists? Clinging to &lt;a&#xA;href=&#34;https://www.eff.org/deeplinks/2018/04/platform-censorship-wont-fix-internet&#34;&gt;a&#xA;simplistic view of free speech&lt;/a&gt; is not going to get us out of having to&#xA;answer that question.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Future&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Unfortunately for me, I want to work on all of these problems. I had a good&#xA;fun time in 2018 working on defense at a low-level (&lt;a&#xA;href=&#34;/2018/07/19/application-principals/&#34;&gt;just one of many adventures&lt;/a&gt;), and&#xA;there‚Äôs still plenty of work to be done there. (There‚Äôs lots of ambient&#xA;privilege still crying out to be reduced!) It has been rewarding to play my&#xA;small part in helping get HTTPS where it needs to be.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And unfortunately, the problems that I find the most vexing ‚Äî¬†the abuse&#xA;category generally ‚Äî¬†are not in my area of greatest expertise. My heart is&#xA;really in the language problem: meaningful interfaces, ergonomic and safe&#xA;libraries, memory safety, and type safety. But it‚Äôs the abuse that makes my&#xA;heart sick.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Still, I see people really shipping software improvements that seemed&#xA;impossible 20 or 10 or 5 years ago. We really are making progress. Here‚Äôs what I&#xA;want to see in 2019:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Throwing away the idea of using ‚Äòengagement‚Äô as the sole or primary&#xA;metric.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Socializing policy thinking in the engineering community. It‚Äôs time to put&#xA;on our grown-up clothes. The stuff we do matters (otherwise we wouldn‚Äôt do it,&#xA;right?), and that means we need to think about and deal with the&#xA;consequences.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Affordances to improve web performance across the board: a larger JavaScript&#xA;standard library; performance improvements in frameworks; improvements in&#xA;tooling; client-side interventions and budgets.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Eroding the idea that memory-unsafety is acceptable, and shipping more&#xA;software in safe languages that would previously have been written in an unsafe&#xA;language. This includes not so much straight-up rewrites of existing&#xA;applications (&lt;a&#xA;href=&#34;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&#34;&gt;which&#xA;Joel says is bad&lt;/a&gt;); mostly, I see piecemeal, in-place rewrites of components&#xA;(like Servo), and also new applications in well-established categories (like Xi&#xA;and CrosVM). New applications also give us a chance to re-think old designs, as&#xA;Xi notably does (with its cross-platform, client/server, multiple-front-end&#xA;design).&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Socializing the value of simplicity, and throwing away complexity, at all&#xA;levels: UX, languages, libraries, frameworks. In particular, nobody should start&#xA;a new project in C++.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Smart people are already hard at work on all these things! We can get the&#xA;industry closer to where it needs to be, and serve people better. Tomorrow is&#xA;Monday...&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&lt;p&gt;Thanks to Alex Gaynor, Emily Schechter, Emily Stark, Eric Mill, Kate&#xA;Conger, Stephan Somogyi, and Tom Ptacek for feedback and encouragement. Errors,&#xA;omissions, and confusions are still mine, of course. You might also like &lt;a&#xA;href=&#34;https://alexgaynor.net/2019/jan/06/security-wish-list-2019/&#34;&gt;Alex‚Äô&#xA;security wishlist for 2019&lt;/a&gt;.&lt;/p&gt;&lt;/aside&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2019/01/06/state-of-security-2019/index.html</guid>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Pictures From Paris And Amsterdam</title>
      <link>https://noncombatant.org/2018/08/13/paris-2018-07/index.content</link>
      <description>&lt;h1&gt;Pictures From Paris And Amsterdam&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;13 August 2018&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This July I went to Paris and Amsterdam for a bit of work and a bit of&#xA;vacation. In Amsterdam, I presented at &lt;a&#xA;href=&#34;/2018/07/19/application-principals/&#34;&gt;a workshop for security engineers and&#xA;academics&lt;/a&gt;, and in Paris my manager and I met up with friendly Chrome people&#xA;there who do work adjacent to ours.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I didn‚Äôt do anything but the workshop/conference in Amsterdam, unfortunately.&#xA;I‚Äôve loved Amsterdam in the past and should have scheduled more time there. It‚Äôs&#xA;a chill town.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In Paris, I mostly walked around and ate food in neighborhoods I hadn‚Äôt&#xA;visited in previous trips. Here are some pictures!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(You can get full-size versions of each picture by clicking on the&#xA;picture.)&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3033.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;300&#34; src=&#34;3033.jpg&#34;&#xA;alt=&#34;Outbound airplane food #1&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;I was very&#xA;fortunate, and got to fly business class. Entr√©e: raw salmon with herbs, some&#xA;kind of p√¢t√©, bread, salad, wine.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3035.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;300&#34; src=&#34;3035.jpg&#34;&#xA;alt=&#34;Outbound airplane food #2&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Main plate:&#xA;chicken, mashed potatoes, cheese.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3036.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3036.jpg&#34;&#xA;alt=&#34;Outbound airplane foor #3&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Dessert:&#xA;confection squares, mint tea.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3039.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;300&#34; src=&#34;3039.jpg&#34;&#xA;alt=&#34;Outbound airplne food #4&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Breakfast:&#xA;omelette, bacon, potatoes, coffee, yogurt, fruit.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3047.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3047.jpg&#34;&#xA;alt=&#34;Address plate: ‚ÄúI‚Äôm Feeling Lucky‚Äù&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;The&#xA;Google Paris office entrance.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3049.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;399&#34; src=&#34;3049.jpg&#34;&#xA;alt=&#34;An overpacked brasserie&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;I arrived on the&#xA;Sunday that France won the World Cup. Every brasserie, bistro, bar, and coffee&#xA;shop was over-full of people eyeing the TV.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3050.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3050.jpg&#34;&#xA;alt=&#34;Belgian waffle pop-up store&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Down the&#xA;street from my hotel. I swore I‚Äôd get one, but literally&#xA;forgot!&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3051.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3051.jpg&#34;&#xA;alt=&#34;View of a bistro&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;While I was eating dinner&#xA;a relatively less-animated pizza place, the post-World Cup celebration was&#xA;heating up. And the weather was incredibly hot. Not pictured: people laying on&#xA;the hood of a taxi while it drove backwards down this 1-way street; person&#xA;dancing on top of a dumpster.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3053.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3053.jpg&#34;&#xA;alt=&#34;Hotel breakfast&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;The hotel breakfast was&#xA;the same every day, and very bad. The texture of the scrambled eggs was unholy,&#xA;and the beans were always cold. Good bread though.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3054.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3054.jpg&#34;&#xA;alt=&#34;P√¢tisserie&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Down the street from my hotel,&#xA;this fantastic p√¢tisserie. I got at least 1 thing here every day, until they&#xA;closed for vacation.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3055.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;300&#34; src=&#34;3055.jpg&#34;&#xA;alt=&#34;The Google campus courtyard&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Many doors on&#xA;Paris streets open into courtyards and building complexes like this. The Google&#xA;office ‚Äòcampus‚Äô.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3059.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3059.jpg&#34;&#xA;alt=&#34;An ourdoor pathway&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;The entrance to my&#xA;hotel.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3060.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3060.jpg&#34;&#xA;alt=&#34;Philosophy and psychoanalysis books in a bookstore window&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Interesting-looking bookstore, but closed for&#xA;vacation.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3061.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;300&#34; src=&#34;3061.jpg&#34;&#xA;alt=&#34;Evening traffic in a traffic circle&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;A nice&#xA;vibe in the evening.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3062.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3062.jpg&#34;&#xA;alt=&#34;A sign on a door saying ¬´ D√©fense d‚Äôuriner ¬ª&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;At Gare du Nord, this sign (‚ÄúNo urinating‚Äù) has&#xA;been ignored.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3067.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3067.jpg&#34;&#xA;alt=&#34;Inside Gare du Nord&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Inside Gare du Nord,&#xA;waiting for my train to Amsterdam.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3069.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3069.jpg&#34;&#xA;alt=&#34;Outside Amsterdam Centraal station&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Arrived&#xA;at Amsterdam Centraal station, going in circles trying to find the tram to my&#xA;hotel. It was marginally less burningly hot in Amsterdam.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3070.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;300&#34; src=&#34;3070.jpg&#34;&#xA;alt=&#34;View of a highway and a river&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;View from my&#xA;hotel room in Amsterdam.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3073.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;300&#34; src=&#34;3073.jpg&#34;&#xA;alt=&#34;Bimhuis and Muziekgebouw&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;View from outside&#xA;my hotel.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3075.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3075.jpg&#34;&#xA;alt=&#34;Picture of a traffic light Walk button&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Instructions on how to push the Walk button in&#xA;Amsterdam.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3081.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3081.jpg&#34;&#xA;alt=&#34;Classic-style ¬´ M√©tropolitain ¬ª sign at a M√©tro station entrance&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Back in Paris, riding on the&#xA;M√©troooooo.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3084.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;300&#34; src=&#34;3084.jpg&#34;&#xA;alt=&#34;More Paris traffic&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;More Paris&#xA;traffic.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3085.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3085.jpg&#34;&#xA;alt=&#34;2 lutherie shops at street level, below apartments&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Every building in this neighborhood had at least&#xA;1 lutherie shop, piano store, or sheet music store.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3086.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3086.jpg&#34;&#xA;alt=&#34;Restaurant: O‚ÄôCr√™pe&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;...they‚Äôre&#xA;closed.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3087.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3087.jpg&#34;&#xA;alt=&#34;A community library cubby&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Nice to see they&#xA;have community libraries in Paris, too!&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3088.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3088.jpg&#34;&#xA;alt=&#34;Le Moulin Rouge theater&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Le Moulin&#xA;Rouge.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3089.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3089.jpg&#34;&#xA;alt=&#34;A breakfast of hot chocolate, orange juice, and a croissant&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;A proper breakfast snack.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3090.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3090.jpg&#34;&#xA;alt=&#34;A graffiti sticker: ¬´ C‚Äôest le bon endroit et c‚Äôest le bon moment ¬ª&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;‚ÄúThis is the right place, and the right time.‚Äù&#xA;But they don‚Äôt say for what. ü§î&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3092.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3092.jpg&#34;&#xA;alt=&#34;Brasserie lunch&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Fantastic ham sandwich on&#xA;perfect toast, with perfect fries.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3094.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3094.jpg&#34;&#xA;alt=&#34;Sign alerting p√¢tisserie customers that they are closing for vacation&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;When the p√¢tisserie closed for vacation, it was&#xA;a sad day.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3096.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3096.jpg&#34;&#xA;alt=&#34;A logo on the wall of a building: sp ligature&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;I just like this shape.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3097.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3097.jpg&#34;&#xA;alt=&#34;Street sign: P, with a bicycle. Graffiti makes it say ¬´ Paix ¬ª&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Peace through bicycles.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3099.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3099.jpg&#34;&#xA;alt=&#34;Coffee shop named Braun Notes&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;A coffee&#xA;shop. ü§®&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3101.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3101.jpg&#34;&#xA;alt=&#34;Caf√© Jules: ¬´ Le hot dog √† la fran√ßais ! ¬ª&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;I did not try French hot&#xA;dogs.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3102.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;300&#34; src=&#34;3102.jpg&#34;&#xA;alt=&#34;View of the Seine&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;The river&#xA;Seine.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3103.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3103.jpg&#34;&#xA;alt=&#34;Dense buildings&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;On the bank of the&#xA;Seine.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3106.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3106.jpg&#34;&#xA;alt=&#34;Placard: ¬´ 1643 : Demeure de Philippe de Champaigne, Peintre et valet de&#xA;chambre de la Reine M√®re ¬ª&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Placard on the front&#xA;of one of the entrances.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3107.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3107.jpg&#34;&#xA;alt=&#34;Cappuccino and croissant&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Fantastic coffee&#xA;on the other side of the Seine.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3108.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3108.jpg&#34;&#xA;alt=&#34;Croque monsieur&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;More pastry&#xA;pictures.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3109.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3109.jpg&#34;&#xA;alt=&#34;Street art of a protester wearing a helmet and other gear&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Street art near the jazz venue that I literally&#xA;could not find, presumably nestled in among roughly 9,246 tiny&#xA;restaurants.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3110.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3110.jpg&#34;&#xA;alt=&#34;Hamburger and fries&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Extremely well-crafted&#xA;yet completely incorrect hamburger. Strangely tall and&#xA;steak-like.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3114.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3114.jpg&#34;&#xA;alt=&#34;Storefront: ¬´ Les Productions du GOLEM ¬ª&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;I&#xA;was not able to see the golem, or its productions. Alas.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3115.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3115.jpg&#34;&#xA;alt=&#34;Storefront: ¬´ Plus de Bruit ¬ª&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;‚ÄúMore&#xA;Noise‚Äù, buying and selling records, CDs, and comic books.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3116.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3116.jpg&#34;&#xA;alt=&#34;Salted caramel ice cream&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Ice cream in&#xA;Montmartre. A suggestion from one of our colleagues. This place also had great&#xA;beer, which we chugged as appropriate in that heat.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3117.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3117.jpg&#34;&#xA;alt=&#34;Sunset&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Sunset in&#xA;Montmartre.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3120.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3120.jpg&#34;&#xA;alt=&#34;Restaurant ¬´ Blabla ¬ª&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Blabla!&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3122.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3122.jpg&#34;&#xA;alt=&#34;Restaurant: Banh Mi &amp; You&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;I&#xA;mean...&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3124.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3124.jpg&#34;&#xA;alt=&#34;Electric motor scooter, chrome&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;This&#xA;electric scooter was right outside a shop selling more in different&#xA;colors.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3126.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3126.jpg&#34;&#xA;alt=&#34;Pasta lunch with prosciutto&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;The sauce on&#xA;this pasta (underneath the prosciutto) was perfect.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3127.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3127.jpg&#34;&#xA;alt=&#34;A large caff√® latte&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;This is what I got&#xA;when I ordered a cappuccino. It was good though.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3130.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3130.jpg&#34;&#xA;alt=&#34;Chicken in a pocket bread&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Chicken,&#xA;excellent fries, and soda.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3132.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3132.jpg&#34;&#xA;alt=&#34;Statue of Athena&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Athena doing a victory&#xA;dance.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3133.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3133.jpg&#34;&#xA;alt=&#34;The Eiffel Tower, from afar&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;The Eiffel&#xA;Tower, on an unreasonably hot and humid day.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3135.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3135.jpg&#34;&#xA;alt=&#34;Inside the Mus√©e d‚ÄôOrsay&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Inside the Mus√©e&#xA;d‚ÄôOrsay, a museum built inside a former train station.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3136.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3136.jpg&#34;&#xA;alt=&#34;An impressionist painting by Paul Signac, ¬´ Femmes au puits ¬ª&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;These paintings were lit to glow, but I think&#xA;they would have even without the light treatment.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3137.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3137.jpg&#34;&#xA;alt=&#34;¬´ Pierrot Pornographe ¬ª&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;A program from the&#xA;Black Cat Theater.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3138.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3138.jpg&#34;&#xA;alt=&#34;Cover of a program&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Another program&#xA;cover.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3141.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3141.jpg&#34;&#xA;alt=&#34;A long shot of the interior of the Mus√©e d‚ÄôOrsay&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Sculptures in the Mus√©e&#xA;d‚ÄôOrsay.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3145.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3145.jpg&#34;&#xA;alt=&#34;Restaurant: ¬´ L‚ÄôEp√©e de bl√© ¬ª&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Good bread&#xA;is a big deal.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3146.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3146.jpg&#34;&#xA;alt=&#34;Sign on a building: ¬´ Spectre ¬ª&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a&#xA;href=&#34;https://spectreattack.com/&#34;&gt;Technically&lt;/a&gt;, the reason I was&#xA;there.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3147.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3147.jpg&#34;&#xA;alt=&#34;Flower buds from trees on the ground after rain&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;It finally rained, and the heat broke. The&#xA;ground was covered in these buds.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3148.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3148.jpg&#34;&#xA;alt=&#34;Cheese and charcuterie plates&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Cheese and&#xA;charcuterie, with a colleague who sits next to me in SF but who was (unknown to&#xA;me) in Paris, and a friendly Parisian whom I know from security industry stuff.&#xA;At a hipster beer place suggested by another security friend on Twitter.&#xA;Everything was v tasty.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3152.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3152.jpg&#34;&#xA;alt=&#34;Street sign: ¬´ Place Henri Bergson ¬ª&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Henri_Bergson&#34;&gt;Henri&#xA;Bergson&lt;/a&gt;.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3154.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3154.jpg&#34;&#xA;alt=&#34;Elegant graffiti of a smoker, in an alcove where smokers hang out&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Fumeur.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3155.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3155.jpg&#34;&#xA;alt=&#34;Intersection&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Walking to l‚ÄôArc de&#xA;triomphe.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3156.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3156.jpg&#34;&#xA;alt=&#34;Croque monsieur and fries&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;A slightly&#xA;strange but tasty croque monsieur.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3159.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3159.jpg&#34;&#xA;alt=&#34;l‚ÄôArc de triomphe&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;Long shot of the&#xA;Arch.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;a href=&#34;original/3162.jpg&#34;&gt;&lt;img width=&#34;400&#34; height=&#34;400&#34; src=&#34;3162.jpg&#34;&#xA;alt=&#34;Salad with cheese and prosciutto&#34; loading=&#34;lazy&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;For some&#xA;reason, I ate a lot of prosciutto on this trip. This was dinner on my last&#xA;evening before coming home.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2018/08/13/paris-2018-07/index.html</guid>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Isolating Application-Defined Principals</title>
      <link>https://noncombatant.org/2018/07/19/application-principals/index.content</link>
      <description>&lt;h1&gt;Isolating Application-Defined Principals&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;19 July 2018&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I just published &lt;a href=&#34;/application-principals/&#34;&gt;a little article on&#xA;securing application-defined principals&lt;/a&gt;, which I used as a discussion piece&#xA;at the &lt;a&#xA;href=&#34;https://conf.researchr.org/track/wossca-2018/wossca-2018-papers&#34;&gt;Workshop&#xA;On Speculative Side-Channel Analysis&lt;/a&gt;. The workshop was pretty fun and&#xA;interesting, and I‚Äôm grateful to the organizers and program committee for&#xA;setting it up. And now I‚Äôm heading back down to Paris on the train for some more&#xA;vacation!&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2018/07/19/application-principals/index.html</guid>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Coping, Maybe Even Thriving, With Chronic Pain</title>
      <link>https://noncombatant.org/2018/06/01/coping-with-pain/index.content</link>
      <description>&lt;h1&gt;Coping, Maybe Even Thriving, With Chronic Pain&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;1 June 2018&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Normally in this blog, I write about software engineering and music. This&#xA;post is about a topic even more personal to me: coping with chronic pain, while&#xA;still functioning at a high level and enjoying life. If that feels weird to you,&#xA;feel free to skip this post. It‚Äôs OK. :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From birth, and in exciting new ways since then, my body has been&#xA;extraordinarily difficult to live in and with. I have several mostly-invisible&#xA;disabilities that severely limit what I can physically do, and when, and to what&#xA;extent. And they affect my emotional state and outlook. In spite of that, I have&#xA;managed to live a full and adventurous life.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm writing this because over the years people have asked me about it&#xA;privately, such as other people with some of the same disabilites as me, in my&#xA;profession, or whatever. Lately, some more people close to me are newly&#xA;experiencing chronic pain, too. This post is an expanded version of an answer I&#xA;posted on Twitter to someone who was asking how to cope.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are some thoughts about things that have worked for me. In the hope that&#xA;it helps someone else, here goes.&lt;/p&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;&lt;dt&gt;Manage your food and medications.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&#xA;&#xA;&lt;p&gt;Do not goof around with your prescribed medications. Take them all in exactly&#xA;the right doses at exactly the right times, and communicate regularly with your&#xA;doctor(s) about how they make you feel. Request and make changes if necessary.&#xA;Take notes so you don‚Äôt forget any details. Set alarms or notifications so you&#xA;don‚Äôt miss any.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you have pain related to eating, it is extra important to watch what, and&#xA;when, you eat. Cultivate a list of safe foods, happy foods, bad-but-fun foods to&#xA;eat rarely, and so on. Again, take notes if that helps.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Pretty much everyone needs to drink more water than they do.&lt;/p&gt;&#xA;&#xA;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Exercise as much as you can.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&#xA;&#xA;&lt;p&gt;I know this is good advice because I generally don‚Äôt follow it, and I&#xA;generally pay the price.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You might not be able to do much; I certainly can‚Äôt. But do what you can,&#xA;when you can, even if it‚Äôs just walking or stretching. Do it on your terms, but&#xA;do it. Over time you‚Äôll be able to do more.&lt;/p&gt;&#xA;&#xA;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Control your time and energy.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&#xA;&#xA;&lt;p&gt;Don‚Äôt let people take up what little energy you may have left on things that&#xA;are not valuable to you. Whenever you do spend energy, make it on your terms and&#xA;on your schedule, to the extent possible. You will not always be able to get as&#xA;much control as you want, but you can get some if you take it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, this can make you difficult to deal with. (People who know me&#xA;are nodding vigorously right now.) It‚Äôs your responsibility to explain to people&#xA;why you need to control your time and energy so carefully. That can mean you&#xA;have to talk about uncomfortable things, such as health and pain. You don‚Äôt have&#xA;to go into a whole lot of detail, but your colleagues, family, and friends do&#xA;need to know why you can‚Äôt do that thing that day or have to postpone the thing&#xA;until tomorrow, or whatever.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When you are able to do the thing, follow through. If people trust that you&#xA;will be reliable, you can sometimes retain more control.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another thing that helps you keep control, without incurring a cost on&#xA;others, is to reduce physical and schedule clutter. Every material thing in your&#xA;life, every digital thing, everything on your to-do list, and everything in your&#xA;calendar require your active management and engagement. Even if you don‚Äôt&#xA;realize it, they are all taking up ‚Äòspace‚Äô in your mind and emotions. Various&#xA;authors like &lt;a href=&#34;http://www.discardia.com/&#34;&gt;Dinah Sanders&lt;/a&gt; and &lt;a&#xA;href=&#34;https://konmari.com/&#34;&gt;Marie Kondo&lt;/a&gt; have books and blogs and so on&#xA;dedicated to helping people de-clutter. But you don‚Äôt necessarily need to buy or&#xA;read anything (unless that helps). Just be mindful of whether or not you need&#xA;the thing, whether or not you‚Äôre really going to ever use or do the thing. (Have&#xA;you even touched it in the past year?) If not, give it away or throw it&#xA;away.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This can be difficult, because it can mean giving up illusions. You‚Äôll say to&#xA;yourself, ‚ÄúI‚Äôll definitely build this robot someday! I can‚Äôt throw away all&#xA;these servo motors!‚Äù You might not ever build the robot ‚Äî¬†but giving it up can&#xA;free up resources for more realistic goals and dreams.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You don‚Äôt have to (and shouldn‚Äôt) go to some ‚Äòminimalist‚Äô extreme, and you&#xA;don‚Äôt have to (and shouldn‚Äôt) throw away things you love or need. And you don‚Äôt&#xA;necessarily need a ‚Äòreason‚Äô to love a thing. Just try to be mindful of whether&#xA;you really do love or need the thing.&lt;/p&gt;&#xA;&#xA;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Plan to rest.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&#xA;&#xA;&lt;p&gt;You‚Äôre going to need to rest, so plan to. This may require changing your work&#xA;or family schedule. This can be difficult, but it‚Äôs better than the alternative:&#xA;crashing hard. You can achieve more of your goals with work and rest than you&#xA;can by pretending that you don‚Äôt need to rest and trying to work through&#xA;pain.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Pain eats up &lt;strong&gt;a lot&lt;/strong&gt; of your energy. Even more than you&#xA;realize. When pain hits, you need to rest. Rest whenever you can, so that you&#xA;can work whenever you can.&lt;/p&gt;&#xA;&#xA;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Bring small pleasures and safety with you.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&#xA;&#xA;&lt;p&gt;I get a lot of physical and psychological comfort from knowing that I have&#xA;what I need with me at all times.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Find small pleasures, comforts, and safeties, and bring them with you in a&#xA;backpack or bag that you always carry. Be mindful to realize anything you feel&#xA;like you need: &lt;a href=&#34;https://en.wikipedia.org/wiki/Towel_Day&#34;&gt;a towel&lt;/a&gt;,&#xA;spare socks and underwear, snacks, water, hand sanitizer, whatever. Definitely&#xA;any necessary medications. Any time you find yourself wishing for something but&#xA;not having it, pack it in your bag.&lt;/p&gt;&#xA;&#xA;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Meditate.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&#xA;&#xA;&lt;p&gt;Meditation helps you focus on what you want to achieve and how you want to&#xA;feel. In my experience it is also a pretty good way to control pain, sometimes&#xA;including severe pain. &lt;strong&gt;Definitely take necessary medications that your&#xA;doctor has prescribed!&lt;/strong&gt; You can‚Äôt ignore pain through will alone any&#xA;more than you can levitate. But with meditation you can train yourself to keep&#xA;some perspective and control even in bad situations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are many books about various meditation techniques. Try reading a&#xA;couple different ones. But the gist of them all is: focus on 1 thing, such as&#xA;your breathing; and observe your mind, your body, and the world without&#xA;judgement and without letting them control you or each other. This is all easier&#xA;said than done, of course, but practice works.&lt;/p&gt;&#xA;&#xA;&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;p&gt;Please feel free to email me if you have more ideas that you think I should&#xA;add here. (I‚Äôll keep everything confidential, of course.)&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2018/06/01/coping-with-pain/index.html</guid>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>On Validating Inputs</title>
      <link>https://noncombatant.org/2018/01/15/on-validating-inputs/index.content</link>
      <description>&lt;h1&gt;On Validating Inputs&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;15 January 2018&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;h2&gt;Introduction&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;A principle of secure software development is that only the callee (sometimes&#xA;called the &lt;em&gt;relying party&lt;/em&gt;, RP) should trust itself to validate an input.&#xA;Typically, the callee has a higher degree of privilege than the caller, and will&#xA;use its privilege to perform some task for the caller if and only if the input&#xA;is valid.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Allowing the caller to assert that an input is valid is unsafe: &lt;em&gt;of&#xA;course&lt;/em&gt; a malicious caller will claim the input is valid. A classic example&#xA;of this mistake is when a web server trusts client-side validation in&#xA;JavaScript.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Problem&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;However, input validation functions are attack surface. Validating inputs is&#xA;dangerous, and difficult to do correctly. This is especially true when the input&#xA;language is complex or when the validator is implemented in an unsafe language.&#xA;Validators can suffer from a variety of bug classes:&lt;/p&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;&lt;dt&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_safety&#34;&gt;Memory&#xA;unsafety&lt;/a&gt;.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;In a memory-unsafe language, it‚Äôs too easy to write a validation function&#xA;that suffers from memory corruption bugs, such as out-of-bounds reads and&#xA;writes, and use-after-free. This is especially likely if the input language is&#xA;complex, but even simple input languages can be hard to process correctly in&#xA;primitive languages.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Type_safety&#34;&gt;Type unsafety&lt;/a&gt;.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;In a type-unsafe language, it can be easy to write a validation function&#xA;that confuses either the types of input objects or of intermediate types&#xA;particular to the function‚Äôs implementation. Attackers can often exploit such&#xA;type confusion (often, but not only, by turning it into memory&#xA;corruption).&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Semantic unsafety and application logic bugs.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;Some input languages are not necessarily a good match for their problem&#xA;domain. They may be overpowered, underpowered, or have a poor mapping to&#xA;concepts in the application domain.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Other input languages have semantics that don‚Äôt quite match those of the&#xA;validating function‚Äôs environment, or are underspecified. For example, &lt;a&#xA;href=&#34;http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf&#34;&gt;the&#xA;JSON ‚Äògrammar‚Äô&lt;/a&gt; allows for arbitrarily-long sequences of digits in numeric&#xA;value literals, but the JavaScript language uses fixed-size, 64-bit IEEE&#xA;floating point values to represent numbers. JavaScript can correctly represent&#xA;&lt;a&#xA;href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&#34;&gt;only&#xA;53-bit integers&lt;/a&gt;.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;h3&gt;The Paradox Of Validation&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;If the input language is sufficiently complex ‚Äî¬†&lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/XML&#34;&gt;which is all too likely in the real&#xA;world&lt;/a&gt; ‚Äî¬†it might be impossible to write a safe validator. In this case, we&#xA;have a paradox: the RP can only trust itself to validate its inputs, but cannot&#xA;safely do so. For example, consider a web server that needs to validate XML&#xA;inputs, or &lt;a&#xA;href=&#34;http://www.c7zero.info/stuff/ASN1_parsing_issues_in_crypto_Latincrypt2015.pdf&#34;&gt;applications&#xA;that handle ASN.1&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;What Could Go Wrong?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;There are (at least) 2 different kinds of complexity that create (at least) 2&#xA;different kinds of potential problems during input validation.&lt;/p&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;&lt;dt&gt;Grammatical complexity, and subsequent semantic complexity.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;Part of the language-theoretic security goal is to have inputs come from&#xA;languages low on the &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Chomsky_hierarchy&#34;&gt;Chomsky hierarchy&lt;/a&gt;.&#xA;This reduces the complexity of validators for such inputs, which increases the&#xA;likelihood that they will be correct.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Even if the validator is not compromised or exploited during validation,&#xA;there is still the problem of correct semantic interpretation. Complex languages&#xA;are harder to interpret correctly, giving rise to the problem that the RP might&#xA;misinterpret a correct and correctly-validated input.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Side-effect complexity.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;There is also a question as to the complexity of side-effects that an&#xA;input language is designed to cause on the operating environment when&#xA;interpreted. Side-effect complexity is orthogonal to grammatical complexity;&#xA;even a trivial input language can be used to cause unsafe or undesired&#xA;side-effects. For example, consider a shell command validator (perhaps as part&#xA;of a system status monitoring web application):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;def is_valid_command(command):&#xA;  return re.match(r&#34;^\w+$&#34;, command)&#xA;&#xA;def run_command(command):&#xA;  if not is_valid_command(command):&#xA;    raise ValueError(&#34;Nice try, goofball&#34;)&#xA;  os.system(command)&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Although the validator is trivially correct (assuming a design calling for&#xA;single-word commands with no parameters or shell syntactic metacharacters), and&#xA;is invoked correctly, the above code is unsafe. The triviality of the grammar&#xA;does lend itself to further validation though, which is another reason to prefer&#xA;simpler grammars.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A tighter validator can help us sleep a little easier:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;AllowedCommands = set((&#34;uptime&#34;, &#34;dmesg&#34;, &#34;netstat&#34;))&#xA;&#xA;def is_valid_command(command):&#xA;  return command in AllowedCommands&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(Presumably, the designers of the application have accepted the risks of&#xA;exposing the outputs of those commands to callers, presumably authenticated and&#xA;authorized somehow.)&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;h3&gt;What About Sandboxing?&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;What do we gain if the RP delegates validation to a privilege-reduced&#xA;validator (PRV; e.g. a sandboxed parser), and then trusts the PRV‚Äôs result? If&#xA;the PRV was compromised during validation, its result is no more trustworthy&#xA;than without sandboxing. But at least the RP would not itself have been&#xA;compromised.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Sandboxing can reduce the range of potential side-effects that the validator&#xA;can perform, ensuring that only intended side-effects take place (if any), even&#xA;if the validator is compromised.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Sandboxing does nothing for grammatical or semantic complexity, however, and&#xA;does not reduce the risks of later misinterpretation.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;What About Pre-processing?&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;You might also imagine that we can transform an input into a less complex or&#xA;dangerous form: either a normalized or minimized form of the original input&#xA;language, or a different, simpler language. I‚Äôll call this &lt;em&gt;downward&#xA;transformation&lt;/em&gt;, but it might have a more official name (please email me if&#xA;you know it!).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Downward transformation can be lossless or lossy. (It might seem that&#xA;downward transformation would be inherently lossy, but recall that input&#xA;languages are sometimes overly powerful. It may be possible to downwardly&#xA;transform such a language without semantic loss.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Lossy transformation can carry its own application-semantic risks. For&#xA;example, consider transforming XML into JSON: XML has the concept of a document&#xA;type definition (DTD), enabling XML parsers to enforce structural invariants of&#xA;an XML input. After a pre-processor has transformed the document to JSON, the&#xA;recipient of the JSON input would have to re-encode the assertions encoded in&#xA;the DTD, with attendant risks of semantic skew and divergence over time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although potentially useful, downward transformation is not a reduction in&#xA;overall system complexity. In fact, it‚Äôs an increase: the system must now be&#xA;able to handle 2 languages, not just 1. But it can be possible to separate the&#xA;processing of the 2 languages, including sandboxing 1 or both.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Approaching Solutions&lt;/h2&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;&lt;dt&gt;Implement validators in memory-safe languages.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;At a minimum, we can and must eliminate the most rinky-dink vulnerability&#xA;class: memory corruption.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Implement validators in type-safe languages.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;When it‚Äôs trustworthy, we can use the language‚Äôs type system to enforce&#xA;grammatical and semantic correctness, for example by encoding each syntactic&#xA;structure as a distinct type, with assertions about child structures and their&#xA;types. &lt;a&#xA;href=&#34;http://publications.lib.chalmers.se/records/fulltext/local_135303.pdf&#34;&gt;Proofs&#xA;for free!&lt;/a&gt;&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Accept only well-specified languages.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;Unfortunately, this is easier said than done, both because it‚Äôs hard to&#xA;specify a language, and because a few people are still using JSON. Still, we can&#xA;sometimes tighten the effective definitions of poor languages that we are forced&#xA;to accept, by defining subsets and dialects and by writing them into the API&#xA;definition. (E.g., for a JSON validator: ‚ÄúThis function will throw&#xA;&lt;code&gt;RangeException&lt;/code&gt; for integers not in the range ‚Äì(2&lt;sup&gt;53&lt;/sup&gt; ‚Äì 1)&#xA;.. 2&lt;sup&gt;53&lt;/sup&gt; ‚Äì¬†1, inclusive.‚Äù)&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Sandbox to constrain side-effects.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;This is ‚Äòobvious‚Äô, but it‚Äôs &lt;a&#xA;href=&#34;https://scarybeastsecurity.blogspot.com/2017/05/bleed-continues-18-byte-file-14k-bounty.html&#34;&gt;not&#xA;done nearly as often as it should be&lt;/a&gt;. &lt;a&#xA;href=&#34;https://android.googlesource.com/platform/external/minijail/&#34;&gt;Minijail is&#xA;a good sandboxing option for Linux&lt;/a&gt;. There is also &lt;a&#xA;href=&#34;https://github.com/google/nsjail&#34;&gt;NsJail&lt;/a&gt;.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Cross-implementation unit and integration tests.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;My favorite example is &lt;a&#xA;href=&#34;http://seriot.ch/parsing_json.php&#34;&gt;Nicolas Seriot‚Äôs JSON torture&#xA;test/freak show&lt;/a&gt;.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;h3&gt;Benefits Of Safety And Simplicity&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;A memory-safe implementation of a validator for a language with no&#xA;side-effects on the environment (e.g. no shell command intepreter) would allow&#xA;us to, potentially, skip sandboxing. This is valuable because, outside of &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Singularity_(operating_system)&#34;&gt;a type-safe&#xA;virtual machine&lt;/a&gt;, the fundamental sandboxing primitive is the OS‚Äô process&#xA;boundary. It can be surprisingly expensive, in both time and space, to create&#xA;new processes. The problem gets worse at a high degree of granularity (e.g. a&#xA;fresh sandbox per input, or even potentially 2 for downward transformation) and&#xA;especially with requirements for high throughput (many inputs) and/or low&#xA;latency.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;From a systems perspective, it‚Äôs reasonable to question if&#xA;unsafe-but-efficient languages are in fact efficient.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2018/01/15/on-validating-inputs/index.html</guid>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Pithy (?) Programming Guidelines (?)</title>
      <link>https://noncombatant.org/2017/11/11/pithy-programming-guidelines/index.content</link>
      <description>&lt;h1&gt;Pithy (?) Programming Guidelines (?)&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;11 November 2017&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&lt;p&gt;Slightly tweaked and expanded 19 January 2018.&lt;/p&gt;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;These guidelines are probably insufficiently pithy, and might not be wise at&#xA;all. But they seem to work for me.&lt;/p&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;&lt;dt&gt;&lt;a href=&#34;https://www.google.com/about/philosophy.html&#34;&gt;Focus on the user and&#xA;all else will follow&lt;/a&gt;.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;See also &lt;a&#xA;href=&#34;https://www.w3.org/TR/html-design-principles/#priority-of-constituencies&#34;&gt;the&#xA;priority of constituencies&lt;/a&gt;. Start with UX mocks and storyboards, user&#xA;documentation, API documentation, or whatever is appropriate for the kind of&#xA;programming you‚Äôre doing. Don‚Äôt start writing code first.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Assert what you assume.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;Of course, this requires you to know what you are assuming. Use every&#xA;&lt;code&gt;assert&lt;/code&gt;, &lt;code&gt;CHECK&lt;/code&gt;, &lt;code&gt;&lt;a&#xA;href=&#34;https://www.usenix.org/legacy/events/hotos03/tech/full_papers/candea/candea.pdf&#34;&gt;die&lt;/a&gt;&lt;/code&gt;,&#xA;or other assumption-checking construct you can. Do not turn them off in&#xA;production builds, unless profiling shows an assertion is actually making a hot&#xA;spot hotter. (Very little code is actually hot.)&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;&lt;a href=&#34;https://isocpp.org/wiki/faq/const-correctness&#34;&gt;&lt;code&gt;const&lt;/code&gt;&#xA;is correct.&lt;/a&gt;&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;Use whatever facilities your language provides for nailing things down,&#xA;and prefer languages that have such facilities. &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Referential_transparency&#34;&gt;This is what&#xA;functional programming people are always yelling about&lt;/a&gt;, and they have a&#xA;point.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Names are the best documentation ‚Äî especially the names of types.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;Comments are sometimes necessary. But if your interfaces and even your&#xA;implementations don‚Äôt explain themselves by their use of names, try using more&#xA;and better names and types instead of more comments. &lt;a&#xA;href=&#34;https://martinfowler.com/bliki/TwoHardThings.html&#34;&gt;This is hard&lt;/a&gt;, but&#xA;the effort pays off.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Constructor is best validator.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;Don‚Äôt even allow ill-defined or invalid objects to come into existence.&#xA;Raise an exception or return a well-defined sentinel value.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Theory becomes practice in compilers.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;The claims of academics ‚Äî &lt;a&#xA;href=&#34;https://www.imperialviolet.org/2014/09/11/moveprovers.html&#34;&gt;formal&#xA;verification being possible&lt;/a&gt;, static analysis discovering most or many bugs,&#xA;and so on ‚Äî gradually become increasingly solid enough to ship in production&#xA;compilers. Type systems are usable proof systems, and compiler warnings are&#xA;usable static analysis ‚Äî¬†and they‚Äôve been getting better every year. Turn on all&#xA;such options at their highest level. They will slow you down for a week and&#xA;speed you up for the rest of your life.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Every dependency is a debt and a nest of bugs.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;Think long and hard about each dependency you take on. Mere convenience&#xA;for you is inconvenience and unsafety for your users. Be certain that each&#xA;dependency is less buggy and debt-laden than what you could do yourself ‚Äî if it&#xA;really needs doing at all.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;&lt;a href=&#34;https://en.wikiquote.org/wiki/Albert_Einstein&#34;&gt;Everything should be&#xA;made as simple as possible, but no simpler&lt;/a&gt;.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;&lt;p&gt;If you‚Äôre not sure what to do yet, start with &lt;a&#xA;href=&#34;http://wiki.c2.com/?DoTheSimplestThingThatCouldPossiblyWork&#34;&gt;The Simplest&#xA;Thing That Could Possibly Work&lt;/a&gt;. It may end up being all you need.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, software that is too simple can be unnecessarily hard to&#xA;use.&lt;/p&gt;&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2017/11/11/pithy-programming-guidelines/index.html</guid>
      <pubDate>Sat, 11 Nov 2017 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Some Problems Of URLs</title>
      <link>https://noncombatant.org/2017/11/07/problems-of-urls/index.content</link>
      <description>&lt;h1&gt;Some Problems Of URLs&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;7 November 2017&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;  &lt;p&gt;Update 09 Dec 2017 18:09 UTC: A reader pointed me to &lt;a&#xA;      href=&#34;https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf&#34;&gt;this&#xA;      delightful Black Hat talk by Orange Tsai about exploiting URL grammar&#xA;      problems&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;h2&gt;Background&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&#34;https://tools.ietf.org/html/rfc1738&#34;&gt;uniform resource locator&#xA;    (URL)&lt;/a&gt; is a data structure and an associated serialization format that aims&#xA;  to uniquely identify any resource on the Internet (and other networks). (See&#xA;  also &lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34;&gt;uniform resource identifier&#xA;    (URI)&lt;/a&gt;.) That‚Äôs a lofty goal, but it has proven more or less tractable and&#xA;  practical. Which is astounding and great! A global network namespace enables&#xA;  powerful applications, and powerful interactions between applications.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, URLs have some problems of usability, security, and economics. Many&#xA;  of us have wished for a global namespace with fewer problems. I‚Äôll address that&#xA;  first, and then I‚Äôll have some fun with the technical aspects of the problem.&#xA;  You can skip that stuff, if you like.&lt;/p&gt;&#xA;&#xA;&lt;a id=&#34;names-are-power&#34;&gt;&lt;/a&gt;&#xA;&lt;h2&gt;Names Are Power&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;URLs have very poor usability both because they are structurally complex, and&#xA;  because their textual representation is unnecessarily ambiguous and ugly (&lt;a href=&#34;#syntaxyness&#34;&gt;syntaxy&lt;/a&gt;). Some of&#xA;  the structural complexity is&#xA;  necessary, and some of it is not.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The poor usability of URLs is a weak spot for advocates of semi-decentralized&#xA;  naming schemes like URLs and the DNS. People sometimes propose that a&#xA;  centralized naming scheme would be less chaotic and hence more usable and more&#xA;  safe. They do have a point, and we should address it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, my colleague &lt;a&#xA;    href=&#34;https://medium.com/@owencm/rethinking-url-bars-as-primary-browser-ui-e2118339d2c0&#34;&gt;Owen&#xA;    Campbell-Moore argues that URLs are un-fixably terrible&lt;/a&gt;, and advocates for&#xA;  search engines to provide the trusted, and hopefully trustworthy, mapping&#xA;  between human-meaningful names and origins or URLs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, that requires the search engine, or other centralized naming&#xA;  authority, to be trustworthy. This proves difficult:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;whatsapp-minefield.jpg&#34; width=&#34;552&#34; height=&#34;459&#34; alt=&#34;A&#xA;screenshot of Google Play Store showing search results for ‚Äúwhatsapp‚Äù, with&#xA;numerous perfect spoofs.&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;‚ÄúThis is horrible..&#xA;    minefield‚Äù ‚Äî¬†&lt;a href=&#34;https://mobile.twitter.com/deathy/status/926861685440249857&#34;&gt;Cristian Vat&#xA;      on Twitter&lt;/a&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Similarly, a Google search for [ &lt;a href=&#34;https://www.google.com/search?q=download+chrome&#34;&gt;download chrome&lt;/a&gt; ] has&#xA;  lots of legitimate and correct results up top, but there are still fakes on the&#xA;  first page of results (at least at the time of writing, and for as long as I can&#xA;  remember). In fact, we used to have a recurring problem that obvious spoofs were&#xA;  at the very top of the results. Google‚Äôs search engine could not reliably find&#xA;  Google‚Äôs browser. In one sense, that indicates trustworthiness ‚Äî¬†Google doesn‚Äôt&#xA;  seem to put its thumb on the scale. In another sense... sigh. ü§∑üèª‚Äç‚ôÇÔ∏è&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perhaps ‚ú® machine learning ‚ú® could be useful in identifying spoofs, such as&#xA;  by comparing names and icons for similarity and raising them for human review.&#xA;  That would speed up the process of finding potential spoofs, potentially&#xA;  improving the centralized naming authority‚Äôs trustworthiness. But we‚Äôd still be&#xA;  trusting the authority with a lot of power.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Obviously, in most of this post, I agree with Owen about the badness of URLs.&#xA;  But ultimately I do not agree that a centralized authority would be better, nor&#xA;  that we should switch to one.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think the problem Owen poses can be resolved by investigating this&#xA;  question:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;‚ÄúOrigins are not very user-friendly‚Äù&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I fully agree that &lt;strong&gt;URLs&lt;/strong&gt; are not usable, but I do believe&#xA;  that &lt;strong&gt;origins&lt;/strong&gt; (the &lt;a href=&#34;https://tools.ietf.org/search/rfc6454&#34;&gt;scheme, host, port tuple&lt;/a&gt;) are&#xA;  or can be made usable ‚Äî¬†and that if we succeed at that technical problem, we can&#xA;  reduce some of the pressure to centralize power.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Making Origins Usable&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;I think we can make origins more usable by doing the following things in the&#xA;  Location Bar:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;  &lt;li&gt;Show only the hostname. Not the port, not the scheme. If necessary or&#xA;    useful, we can also consider showing only the effective TLD + 1 label&#xA;    (eTLD+1). In fact I think it will prove necessary and useful.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Show a negative security indicator, like Chrome‚Äôs &lt;strong&gt;Not&#xA;      Secure&lt;/strong&gt; chip, for non-secure schemes.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Show no indicator for secure schemes.&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Continue to deprecate and remove non-secure schemes. Ideally, the ongoing&#xA;    project to HTTPS-ify the web could get the number of schemes people regularly&#xA;    see down to 1.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Note that Safari already does most of the above, although it commits what I&#xA;  consider an error: for sites with Extended Validation (EV) certificates, it&#xA;  shows the EV name instead of the eTLD+1. This opens a whole other can of&#xA;  goat-worms (which I have &lt;a&#xA;    href=&#34;/2017/02/15/decoding-chromes-https-ux/#what-about-extended-validation-certificates&#34;&gt;yelled&#xA;    about elsewhere&lt;/a&gt;). But you can get a glimpse of a better naming future by&#xA;  trying out Safari. Brave for desktop also shows only the hostname until you&#xA;  focus the Location Bar.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;safari-etld.png&#34; width=&#34;648&#34; height=&#34;135&#34; alt=&#34;A screenshot of&#xA;Safari showing only the eTLD+1.&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;Glorious, isn‚Äôt&#xA;    it?&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;As a practical matter, eTLD+1 names, hostnames, and copied-and-pasted blobs&#xA;  are all people really use in the real world. Very few people use URLs as such&#xA;  ‚Äî¬†and that is perfectly fine! To improve URL usability and safety, application&#xA;  and platform developers need only go with the flow. Let‚Äôs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, some more-or-less tractable problems remain even after we do all of&#xA;  the above.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;  &lt;li&gt;Ill-formed hostnames will still be confusing.&#xA;&#xA;    &lt;ul&gt;&#xA;&#xA;      &lt;li&gt;I believe confusingness is by itself a useful indicator for people, and that&#xA;        well-formed hostnames like ‚Äúfacebook.com‚Äù and ‚Äúbaidu.com‚Äù make good brands.&#xA;        Hostnames are ubiquitous in advertising and pop culture.&lt;/li&gt;&#xA;&#xA;      &lt;li&gt;Ill-formed hostnames are inherently fishy, and people have a decent chance&#xA;        to distinguish ‚Äúfacebook.com‚Äù from ‚Äúfacebook.com.wumpgarble.phishing.blog‚Äù,&#xA;        especially if we show only eTLD+1: ‚Äúphishing.blog‚Äù is clearly not&#xA;        ‚Äúfacebook.com‚Äù.&lt;/li&gt;&#xA;&#xA;      &lt;li&gt;As baidu.com and mixi.jp show, they are even usable across a language and&#xA;        character set barrier, although IDNs also exist and can help.&lt;/li&gt;&#xA;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;People will still need to share links, and developers will still need to&#xA;    read, write, and modify them.&#xA;&#xA;    &lt;ul&gt;&#xA;&#xA;      &lt;li&gt;I think we can handle this by making the full URL visible and editable when&#xA;        the Location Bar takes focus.&lt;/li&gt;&#xA;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&#xA;  &lt;li&gt;Homoglyph attacks will continue to exist.&#xA;&#xA;    &lt;ul&gt;&#xA;&#xA;      &lt;li&gt;Note that centralized naming authorities also have this problem.&lt;/li&gt;&#xA;&#xA;      &lt;li&gt;I believe that the mechanisms for coping with it can work either in&#xA;        centralized or decentralized naming schemes.&lt;/li&gt;&#xA;&#xA;    &lt;/ul&gt;&#xA;  &lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;The Problem&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;URLs became user interface components almost immediately: people are expected&#xA;  to be able to type in URLs, copy and paste them, and (at least partially) parse&#xA;  them to extract security-relevant information, and sometimes to modify them. All&#xA;  this, including on tiny phone screens.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This turns out to be not-so-great, because in order to meet their goal, URLs&#xA;  have to be fairly complex, and object serialization and deserialization is a&#xA;  surprisingly hard problem even in simple cases. The end result is that most&#xA;  people have a very hard time actually using URLs in practice.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;URLs Are Surprisingly Complex&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Although &lt;a href=&#34;https://cs.chromium.org/chromium/src/url/gurl.h?sq=package:chromium&amp;dr=CSs&amp;l=472&#34;&gt;the&#xA;    implementation Chrome uses is more complex&lt;/a&gt; (see also &lt;a&#xA;    href=&#34;https://cs.chromium.org/chromium/src/url/third_party/mozilla/url_parse.h?sq=package:chromium&amp;dr=CSs&amp;l=77&#34;&gt;&lt;code&gt;url::Parsed&lt;/code&gt;&lt;/a&gt;),&#xA;  we might imagine that the structure of a URL object need not be too complex. For&#xA;  example:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;class URL {&#xA;  string scheme&#xA;  string username&#xA;  string password&#xA;  string host&#xA;  string port&#xA;  string path&#xA;  string query&#xA;  string ref    // Also called &#34;fragment&#34;.&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Well, that‚Äôs a bit too simple. First, TCP and UDP port numbers are unsigned&#xA;  16-bit integers, not arbitrary strings. Then, the host could be an IPv4 address,&#xA;  an IPv6 address, or an address in another network type. Or it could be a DNS&#xA;  hostname, a NetBIOS hostname, or a name in some other domain. Even considering&#xA;  just DNS and NetBIOS names, simple strings don‚Äôt quite capture the type&#xA;  information we need.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;  &lt;li&gt;The DNS is hierarchical (having up to 127 levels), and a name consists of 1&#xA;    or more &lt;em&gt;labels&lt;/em&gt;, each containing 1 to 63 octets, and the total length of&#xA;    the internal representation of a name can be at most 255 octets. (&lt;a&#xA;      href=&#34;https://en.wikipedia.org/wiki/Domain_Name_System#Domain_name_syntax&#34;&gt;Wikipedia&lt;/a&gt;)&lt;/li&gt;&#xA;&#xA;  &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/NetBIOS#Name_service&#34;&gt;Wikipedia&#xA;      says&lt;/a&gt; that ‚ÄúNetBIOS names are 16 octets in length and vary based on the&#xA;    particular implementation. Frequently, the 16th octet, called the NetBIOS&#xA;    Suffix, designates the type of resource, and can be used to tell other&#xA;    applications what type of services the system offers.‚Äù That leaves a lot of&#xA;    questions open, but we won‚Äôt dig into them here.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;So, we‚Äôll have to complicate our representation a bit. Let‚Äôs try this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;abstract class NetworkAddress { ... }&#xA;&#xA;class IPv4NetworkAddress extends NetworkAddress { ... }&#xA;&#xA;class IPv6NetAddress extends NetworkAddress { ... }&#xA;&#xA;abstract class HostName { ... }&#xA;&#xA;class DNSName extends HostName { ... }&#xA;&#xA;class NetBIOSName extends HostName { ... }&#xA;&#xA;class HostIdentifier {&#xA;  enum Type {&#xA;    Address,&#xA;    Name&#xA;  }&#xA;&#xA;  union {&#xA;    NetworkAddress address&#xA;    HostName name&#xA;  }&#xA;}&#xA;&#xA;class URL {&#xA;  string scheme&#xA;  string username&#xA;  string password&#xA;  HostIdentifier host&#xA;  uint16_t port&#xA;  string path&#xA;  string query&#xA;  string ref  // Also called &#34;fragment&#34;.&#xA;}&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We‚Äôve more tightly specified the port, and &lt;code&gt;HostIdentifier&lt;/code&gt; is a&#xA;  sum type of 2 abstract &lt;code&gt;NetworkAddress&lt;/code&gt; and &lt;code&gt;HostName&lt;/code&gt;&#xA;  types. In turn, the abstract types are made concrete for specific addressing and&#xA;  naming systems; we‚Äôve given some modern examples for each.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although the real details are madness-inducing, let‚Äôs further assume for the&#xA;  moment that the &lt;code&gt;string&lt;/code&gt; type is a sequence of Unicode&#xA;  characters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The real-world analogues to each of these hypothetical classes has at least 1&#xA;  serialization function and least 1 deserialization function or parsing&#xA;  constructor. Even the IPv4 address, a humble 4-octet data structure, has a&#xA;  delightfully wacky set of representations. &lt;a href=&#34;ipv4-parser.c&#34;&gt;A simple&#xA;    program&lt;/a&gt; that uses the BSD functions &lt;code&gt;inet_aton&lt;/code&gt; (deserializer)&#xA;  and &lt;code&gt;inet_ntoa&lt;/code&gt; (serializer) produces the following&#xA;  equivalencies:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;Serialized       Deserialized  Reserialized   &#xA;222.173.190.239  0xDEADBEEF    222.173.190.239&#xA;0xDEADBEEF       0xDEADBEEF    222.173.190.239&#xA;033653337357     0xDEADBEEF    222.173.190.239&#xA;222.11386607     0xDEADBEEF    222.173.190.239&#xA;222.173.48879    0xDEADBEEF    222.173.190.239&#xA;127.0.0.1        0x7F000001    127.0.0.1      &#xA;0x7F000001       0x7F000001    127.0.0.1      &#xA;127.1            0x7F000001    127.0.0.1      &#xA;127.0.1          0x7F000001    127.0.0.1&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As of this writing, Chrome will indeed take &lt;code&gt;http://0x9765C143&lt;/code&gt;,&#xA;  convert it to &lt;code&gt;http://151.101.193.67/&lt;/code&gt;, and navigate to it. Firefox&#xA;  navigates directly to &lt;code&gt;http://0x9765C143&lt;/code&gt; without first converting it&#xA;  to dotted decimal in the Location Bar.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;IPv6 addresses have their own various representations, &lt;a&#xA;    href=&#34;https://en.wikipedia.org/wiki/IPv6_address#Representation&#34;&gt;as Wikipedia&#xA;    discusses&lt;/a&gt;. Notably, to disambiguate colon-separated hextets of the IPv6&#xA;  address from the colon-separated port number in URL string representations, IPv6&#xA;  addresses must be surrounded with square braces in URLs:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;https://[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443/foo/bar/noodles&#xA;         +------- IPv6 address -------------+   ^&#xA;                                                |&#xA;                                               port&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;a id=&#34;syntaxyness&#34;&gt;&lt;/a&gt;&#xA;&lt;h3&gt;Syntaxyness&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Whenever a language has lots of syntactic meta-characters, especially when&#xA;  some of the meta-characters have multiple meanings depending on their context, I&#xA;  say the language is ‚Äúsyntaxy‚Äù. If you try to write a URL parser, you‚Äôll find&#xA;  that it has to keep a fair amount of state to know whether this &lt;code&gt;:&lt;/code&gt;&#xA;  is part of the scheme separator &lt;code&gt;://&lt;/code&gt;, or a hextet separator, or the&#xA;  port number separator. Similarly, &lt;code&gt;/&lt;/code&gt; has at least 2 meanings.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unconsciously perhaps, humans need to build the same state machine in their&#xA;  minds to parse URLs ‚Äî¬†or fail to, and get confused. Add on top of that the fact&#xA;  that many URL schemes are not real words, &lt;code&gt;/&lt;/code&gt; looks kind of like&#xA;  &lt;code&gt;\&lt;/code&gt;, and so on, and and pretty soon people are just plain confused&#xA;  about the URL language. It‚Äôs not a language people can speak easily.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Goals For A Solution&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;An ideal solution to the URL usability problem would have (at least) the&#xA;  following properties:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;  &lt;li&gt;unambiguous grammar&lt;/li&gt;&#xA;  &lt;li&gt;clear delineation of the security-relevant origin&lt;/li&gt;&#xA;  &lt;li&gt;not too tedious to write&lt;/li&gt;&#xA;  &lt;li&gt;not too tedious to read (low in syntaxyness)&lt;/li&gt;&#xA;  &lt;li&gt;fewer components to avoid confusion and to reduce the need for syntactic&#xA;    complexity&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;Mitigations&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;We can‚Äôt truly solve the problem without fundamentally re-thinking URLs. URLs&#xA;  are ubiquitous, and their problems are &lt;code&gt;struct&lt;/code&gt;ural: there are just&#xA;  too many things in the data structure.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perhaps what we can do is mitigate the badness somewhat. Arguably, it is fun&#xA;  to brainstorm about how.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Deprecate And Remove Fields From URLs&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;First, we can remove parts of the URL we don‚Äôt need or which exacerbate our&#xA;  problems. There is a beautiful example of syntaxyness gone wrong in &lt;a&#xA;    href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=661005&#34;&gt;Chromium&#xA;    issue 661005&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;Steps to reproduce the problem:&#xA;1. navigate to https://www.google.com:443+q=elon@tesla.com&#xA;2. the resulting page should be https://www.tesla.com&#xA;&#xA;What is the expected behavior?&#xA;Warn the user that they are about to post credentials&#xA;      - username : &#34;www.google.com&#34;&#xA;      - password : &#34;443+q=elon&#34;&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A more important problem with usernames and passwords in URLs is that they&#xA;  obfuscate the URL‚Äôs hostname, potentially improving the effectiveness of&#xA;  phishing attacks. For example, people might think that the URL&#xA;  &lt;code&gt;https://paypal@phishing.com&lt;/code&gt; points to PayPal, but in fact it points&#xA;  to phishing.com.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;    href=&#34;https://support.microsoft.com/en-us/help/834489/internet-explorer-does-not-support-user-names-and-passwords-in-web-sit&#34;&gt;Internet&#xA;    Explorer dropped support for credentials embedded in URLs a long-ass time&#xA;    ago&lt;/a&gt;. Wisely, Edge has not resumed supporting them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Firefox supports embedded credentials, but warns you about the ambiguity.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;firefox-warning.png&#34; width=&#34;671&#34; height=&#34;261&#34; alt=&#34;Firefox&#xA;warns you when you browse to a URL that contains embedded credentials.&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;Firefox warns you when you browse to a URL that&#xA;    contains embedded credentials.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Chrome does not support embedded credentials in URLs for subresources, but &lt;a&#xA;    href=&#34;https://xkcd.com/1172/&#34;&gt;inevitably&lt;/a&gt;, &lt;a&#xA;    href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=779116&#34;&gt;that broke&#xA;    someone‚Äôs use case&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If we consider that the problem with embedded credentials is that they&#xA;  confuse people, it would seem that we could break as few use cases as possible&#xA;  by allowing them in subresource URLs, and (like Firefox) warning the person&#xA;  about the ambiguity for top-level navigations.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But if we consider that the problem is not only that embedded credentials&#xA;  confuse people, but that they also increase the complexity, decrease the&#xA;  reliability, and decrease the uniformity of our URL parsers, then that suggests&#xA;  the minimal-breakage approach does not solve the whole problem.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since IE and Edge do not support embedded credentials, they are effectively&#xA;  dead as a reliable web platform feature, and have been for over a decade. Why&#xA;  should Chrome and Firefox continue to indulge this phishiness?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(Other &lt;a href=&#34;http://seriot.ch/parsing_json.php&#34;&gt;partially-specified&#xA;    languages, like JSON, suffer from terrible reliability and uniformity&#xA;    problems&lt;/a&gt;. A forward-looking platform, as I believe the web should be, should&#xA;  seek to gradually, gently, definitely shed these ambiguous legacy interfaces.&#xA;  And here‚Äôs an interesting &lt;a href=&#34;https://github.com/brave/browser-laptop/issues/10825&#34;&gt;problem related to&#xA;    the non-uniformity of URL parsers&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Deprecate And Remove Weird Host Address Representations&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;There‚Äôs no credible, user-focused reason to support hexadecimal, octal, or&#xA;  other strange IP address representations. They might be used in attacks to&#xA;  obscure things somewhat (although even a dotted-quad representation might&#xA;  sufficiently obscure the nature of the host). &lt;a&#xA;    href=&#34;https://blogs.msdn.microsoft.com/ieinternals/2014/03/06/browser-arcana-ip-literals-in-urls/&#34;&gt;Internet&#xA;    Explorer once granted special privileges (‚ÄòIntranet Zone‚Äô) to URLs with no dots&#xA;    in the host component&lt;/a&gt; ‚Äî¬†including URLs using these obscure forms.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Other than for attacks, I would bet that nobody uses or wants these address&#xA;  forms. Probably at least some people reading this, already a technical audience,&#xA;  were surprised to learn that the strange representations exist at all. So let‚Äôs&#xA;  just get rid of these historical quirks.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Imaginary Approaches&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;These are mitigation approaches that perhaps might be nice to do, but which I&#xA;  suspct it‚Äôs too late to try. Alas. But still...&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Hierarchical Names That Go In The Same Direction&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;2 of the several namespaces in URLs, DNS hostnames and pathnames, are&#xA;  hierarchical. But textually, they go in opposite directions!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the DNS name www.example.com, com is the parent of example is the parent&#xA;  of www. The labels go left to right, child to parent. I‚Äôll call this &lt;a&#xA;    href=&#34;https://en.wikipedia.org/wiki/Endianness&#34;&gt;little-endian&lt;/a&gt; naming.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the pathname /noodles/doodles/poodles.php, noodles is the parent of&#xA;  doodles is the parent of poodles.php. The components go left to right, parent to&#xA;  child ‚Äî¬†the opposite relationship of DNS names. I‚Äôll call this big-endian&#xA;  naming.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;https://www.example.com/noodles/doodles/poodles.php&#xA;        --------------- +++++++++++++++++++++++++++&#xA;        little-endian   big-endian&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That‚Äôs confusing enough on its own, but it gets weirder when you consider &lt;a&#xA;    href=&#34;https://en.wikipedia.org/wiki/Internationalized_domain_name&#34;&gt;internationalized&#xA;    domain names&lt;/a&gt;, and other Unicode URL components. What makes it extra tricky&#xA;  is that some languages read right to left (RTL), like Arabic or Hebrew, instead&#xA;  of left to right (LTR), like English. Consider further that URLs can contain&#xA;  both LTR and RTL components. (Indeed, all URLs with RTL hostnames still have to&#xA;  have at least one LTR component: the leading &lt;code&gt;https&lt;/code&gt; or other&#xA;  scheme.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/typhoonfilsy/status/927701344185491456&#34;&gt;typhoonfilsy&lt;/a&gt;&#xA;  provided a nice example of this:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;mixed-ltr-rtl-url.png&#34; alt=&#34;URL with both Arabic and English&#xA;in both the hostname and path components.&#34; width=&#34;399&#34; height=&#34;42&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;URL with both Arabic and English in both the hostname&#xA;    and path components.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;So now we have both little- and big-endian names, each containing&#xA;  sub-components that go LTR and RTL. Imagine trying to read that (a) at all; and&#xA;  (b) correctly; and (c) when trying to make a security decision about an&#xA;  origin!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So it sure would be helpful if the namespace hierarchies all went in the same&#xA;  direction, you know? That would reduce at least 1 aspect of the confusion.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;https://com.example.www/noodles/doodles/poodles.php&#xA;        +++++++++++++++ +++++++++++++++++++++++++++&#xA;        big-endian      big-endian&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This would be less confusing in an RTL language:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;php.seldoop/seldood/seldoon/www.elpmaxe.moc://https&#xA;+++++++++++++++++++++++++++ +++++++++++++++&#xA;                 big-endian      big-endian&#xA;                        RTL             RTL     LTR&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, the &lt;a &#34;href=&#34; https://en.wikipedia.org/wiki/List_of_Internet_top-level_domains&#34;&gt;proliferation&#xA;    of new top-level domain names&lt;/a&gt; (TLDs) reduces the effectiveness of the&#xA;  hypothetical plan to make DNS names big-endian. For example, both blog.google&#xA;  and google.blog are legal DNS hostnames with valid TLDs. (Only the former is&#xA;  currently registered and serving a live site. Another huge problem with the&#xA;  proliferation of TLDs is the creation of new spoofing opportunities.) Swapping&#xA;  the endianness of the names would create more confusion, not less, at least for&#xA;  these pathological cases.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Minimizing Syntaxyness&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;We could also imagine a new URL syntax, with fewer and less ambiguous&#xA;  syntactic meta-characters. Just as a thought experiment and not as a serious&#xA;  proposal, imagine using only the comma &lt;code&gt;,&lt;/code&gt; to separate URL&#xA;  components, and using the slash &lt;code&gt;/&lt;/code&gt; only to separate tokens in&#xA;  namespaces:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;https,com/example/www,,noodles/doodles/poodles.php&#xA;https,com/example/www,443,noodles/doodles/poodles.php&#xA;https,com/example/www,,noodles/doodles/poodles.php,q=cute%20puppies&#xA;https,com/example/www,,noodles/doodles/poodles.php,q=cute%20puppies,table-of-contents&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As always, the meta-characters must be escaped when used inside a given&#xA;  component. Here, the &lt;code&gt;,&lt;/code&gt; is escaped as &lt;code&gt;%2C&lt;/code&gt; in the query&#xA;  string:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;https,com/example/www,,noodles/doodles/poodles.php,q=cute%2C%20puppies&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If the &lt;code&gt;,,&lt;/code&gt; indicating the default port for the scheme bothers&#xA;  you, and it probably should, we could imagine something like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;https/443,com/example/www,noodles/doodles/poodles.php&#xA;https/8443,com/example/www,noodles/doodles/poodles.php&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We could also imagine tagging each component with its name, rather than&#xA;  relying on their order. This would remove the requirement of empty placeholders&#xA;  for optional or default components. The result is harder to write, but perhaps&#xA;  easier to read:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;scheme:https,port:443,host:com/example/org&#xA;scheme:https,port:443,host:com/example/org,path:a/b/c&#xA;scheme:https,host:com/example/org,path:a/b/c&#xA;host:com/example/org,path:a/b/c,scheme:https&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Now we have a third meta-character to escape (&lt;code&gt;,&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;,&#xA;  and now &lt;code&gt;:&lt;/code&gt;) as well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Anyway, you get the idea: other, arguably better and/or differently-bad&#xA;  syntaxes are possible. Or, were possible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;That‚Äôs more than enough for now. Time for beeeeeeerrrr...&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;  &lt;p&gt;Thanks to Eric Lawrence and Yan Zhu for providing some additional&#xA;    examples of problems, and thanks to Emily Stark-Dunn and Owen Campbell-Moore for&#xA;    reading an early draft and providing helpful thoughts.&lt;/p&gt;&#xA;&lt;/aside&gt;</description>
      <author>Chris Palmer</author>
      <guid>2017/11/07/problems-of-urls/index.html</guid>
      <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Decoding Chrome‚Äôs HTTPS UX</title>
      <link>https://noncombatant.org/2017/02/15/decoding-chromes-https-ux/index.content</link>
      <description>&lt;h1&gt;Decoding Chrome‚Äôs HTTPS UX&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;15 February 2017&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;    &lt;p&gt;Update, 26 August 2017: My colleague &lt;a&#xA;            href=&#34;https://textslashplain.com/2017/05/02/inspecting-certificates-in-chrome/&#34;&gt;Eric&#xA;            Lawrence has replaced your cheese&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;h2&gt;Introduction&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;In this post I‚Äôll try to illuminate and explain Chrome‚Äôs HTTPS-, TLS-, and&#xA;    X.509-related security UX surfaces. They are a bit complicated, and they‚Äôve&#xA;    changed recently, and &lt;a href=&#34;https://en.wikipedia.org/wiki/Public_key_infrastructure&#34;&gt;the Web PKI&lt;/a&gt;&#xA;    is very weird, so I think they bear some explanation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(People who already know this stuff might want to skim through this section.&#xA;    The more contentious/fun stuff comes after the basics.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As &lt;a href=&#34;https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html&#34;&gt;Emily&#xA;        Schechter explains&lt;/a&gt;, we‚Äôve recently made some changes in Chrome to make&#xA;    non-secure web pages look markedly non-secure, rather than merely ‚Äòneutral‚Äô.&#xA;    And, we‚Äôve made HTTPS pages actually say ‚ÄúSecure‚Äù. Here‚Äôs a secure page in&#xA;    Chrome 56:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;facebook-location-bar.png&#34; alt=&#34;Facebook.com is&#xA;labeled ‚ÄúSecure‚Äù in Chrome‚Äôs Location Bar, because it uses valid HTTPS.&#34; width=&#34;273&#34; height=&#34;42&#34; /&gt;&#xA;    &lt;figcaption&gt;Facebook.com is labeled ‚ÄúSecure‚Äù in&#xA;        Chrome‚Äôs Location Bar, because it uses valid HTTPS.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;If you click on the lock icon or on the word ‚ÄúSecure‚Äù, you get more&#xA;    information in a pop-up view we call the Origin Info Bubble. (Or, at least,&#xA;    &lt;em&gt;I&lt;/em&gt; call it that. Most other people on my team call it the Page Info&#xA;    Bubble, or PIB.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The first thing it says is, ‚ÄúSecure connection. Your information (for&#xA;    example, passwords or credit card numbers) is private when it is sent to this&#xA;    site.‚Äù&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;facebook-secure.png&#34; alt=&#34;Chrome‚Äôs PIB&#xA;explaining that the connection to Facebook.com is secure.&#34; width=&#34;336&#34; height=&#34;141&#34; /&gt;&#xA;    &lt;figcaption&gt;Chrome‚Äôs PIB explaining that the connection to&#xA;        Facebook.com is secure.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;But for non-secure sites, it has a somewhat sad message: ‚ÄúYour connection to&#xA;    this site is not secure. You should not enter any sensitive information on this&#xA;    site (for example, passwords or credit cards), because it could be stolen by&#xA;    attackers.‚Äù&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;cnn-not-secure.png&#34; alt=&#34;Chrome‚Äôs PIB&#xA;explaining that the connection to CNN.com is not secure.&#34; width=&#34;330&#34; height=&#34;153&#34; /&gt;&#xA;    &lt;figcaption&gt;Chrome‚Äôs PIB explaining that the connection to CNN.com&#xA;        is not secure.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;The PIB actually has a bunch of controls in it that let you manage the site‚Äôs&#xA;    access to special permissions and features of the web platform. You can turn&#xA;    these on or off with the click of a button:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;inbox-oib.png&#34; alt=&#34;Chrome‚Äôs PIB, showing the&#xA;permission settings for inbox.google.com.&#34; width=&#34;162&#34; height=&#34;327&#34; /&gt;&#xA;    &lt;figcaption&gt;Chrome‚Äôs PIB, showing the permission settings for&#xA;        inbox.google.com.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2&gt;Site Security Details&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Experienced Chrome nerds will notice that something else has changed: where&#xA;    the PIB now shows a link that says ‚ÄúLearn more‚Äù, there used to be a button&#xA;    saying Show Certificate that would open up Chrome‚Äôs Certificate Viewer UX.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We didn‚Äôt remove the button; we just moved it to the new Security tab in&#xA;    Chrome‚Äôs Developer Tools UX. Emily Stark, Lucas Garron, Max Walker, and Paul&#xA;    Irish worked hard to design and implement the Security tab. It‚Äôs pretty cool&#xA;    because we have more room there to show you more details than there was room for&#xA;    in the PIB. Here you can see the Security tab for inbox.google.com.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;inbox-security-tab-dt.png&#34; alt=&#34;Chrome‚Äôs&#xA;Security tab in Developer Tools shows that inbox uses modern ciphers and the&#xA;QUIC secure transport protocol.&#34; width=&#34;659&#34; height=&#34;581&#34; /&gt;&#xA;    &lt;figcaption&gt;Chrome‚Äôs&#xA;        Security tab in Developer Tools shows that inbox uses modern ciphers and the&#xA;        QUIC secure transport protocol.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;For sites with sub-resources from several different origins, we can show you&#xA;    that, and the security details for each different origin. Sometimes they are not&#xA;    all secure. Yikes!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(Chrome will not evaluate or execute code ‚Äî¬†&lt;em&gt;script content&lt;/em&gt; ‚Äî¬†from&#xA;    non-secure origins when they are included in a page that is from an origin that&#xA;    is otherwise secure. Chrome will, however, show you images and other &lt;em&gt;display&#xA;        content&lt;/em&gt; from non-secure origins in an a page from a secure origin. It would&#xA;    be strictly better to also not show non-secure display content, but we have had&#xA;    to make a trade-off for web site compatibility: some origins simply have to&#xA;    include non-secure display content.)&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;‚ÄúYou Moved My Cheese!‚Äù&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Some people really like using the Certificate Viewer (CV), and have been&#xA;    unpleasantly surprised that we moved it. &lt;a href=&#34;https://textslashplain.com/&#34;&gt;Eric Lawrence&lt;/a&gt; says that we ‚Äúmoved&#xA;    people‚Äôs cheese‚Äù, and I really feel that because if someone moved my cheese I‚Äôd&#xA;    be unpleasantly surprised, too.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I feel very strongly about cheese.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most people are mostly happy once they find out that the View Certificate&#xA;    button still exists, although there is some understandable grumbling about how&#xA;    it now takes more clicks to get to it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We made that trade-off knowingly, on the belief that the PIB is a ‚Äòprimary‚Äô&#xA;    UX surface ‚Äî¬†it has that juicy permissions control panel, after all¬†‚Äî¬†and hence&#xA;    it should be optimized to serve a more mainstream audience. By contrast, the&#xA;    people who want to do things like examine the X.509 certificate details are most&#xA;    likely engineers and network administrators, and they‚Äôd be better served by a UI&#xA;    that shows more detail than just the CV. So, Emily, Lucas, Max, and Paul built&#xA;    that.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;X.509 Certificates And HTTPS Authentication&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;However, it raises a question: What value is there in the full certificate&#xA;    details, and who needs or wants those details?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, let‚Äôs take a look at an example certificate.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;inbox-cv-01.png&#34; alt=&#34;Chrome‚Äôs CV, showing lots&#xA;of details.&#34; width=&#34;297&#34; height=&#34;489&#34; /&gt;&#xA;    &lt;figcaption&gt;Chrome‚Äôs CV, showing lots of&#xA;        details.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Oh, it keeps going, all right:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;inbox-cv-02.png&#34; alt=&#34;Even more detail in the&#xA;CV.&#34; width=&#34;294&#34; height=&#34;486&#34; /&gt;&#xA;    &lt;figcaption&gt;Even more detail in the&#xA;        CV.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;In these views we can see that the certificate for inbox.google.com was&#xA;    issued by ‚ÄúGoogle Internet Authority G2‚Äù, which in turn was issued by ‚ÄúGeoTrust&#xA;    Global CA‚Äù. We can see that the certificate has serial number 483316...382, what&#xA;    algorithm it was signed with and what kind of public key cryptography it uses,&#xA;    and so on. And if we selected ‚ÄúGoogle Internet Authority G2‚Äù or ‚ÄúGeoTrust Global&#xA;    CA‚Äù in the top pane, we‚Äôd see the information for those certificates, too.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;‚ÄúBut what does it all &lt;em&gt;mean&lt;/em&gt;, Basil?‚Äù&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;(As Austin Powers famously asked.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It means a few surprisingly limited (and even fraught) things:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;Your computer‚Äôs operating system trusts a company that calls itself&#xA;        ‚ÄúGeoTrust Global CA‚Äù to issue (cryptographically sign) certificates that can&#xA;        issue certificates for any site on the internet.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Whether or not your computer‚Äôs (operating system‚Äôs) vendor was wise to trust&#xA;        these &lt;em&gt;root certificates&lt;/em&gt; (or &lt;em&gt;trust anchors&lt;/em&gt;) is an entirely&#xA;        different issue. (Indeed, historically there has been some &lt;a href=&#34;/2015/02/21/superfish-round-up/&#34;&gt;&lt;em&gt;trust&#xA;                rancor...&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;GeoTrust has issued a certificate to an organization calling itself ‚ÄúGoogle&#xA;        Internet Authority G2‚Äù (GIA2).&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;GIA2 has issued a certificate for names that end in characters that look on&#xA;        your screen like ‚Äú.google.com‚Äù, with at most 1 label before the ‚Äú.google.com‚Äù.&#xA;        (DNS hostnames are subdivided into &lt;em&gt;labels&lt;/em&gt;. The name ‚Äúinbox.google.com‚Äù&#xA;        has 3 labels: ‚Äúinbox‚Äù, ‚Äúgoogle‚Äù, and ‚Äúcom‚Äù.)&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Chrome has verified that the certificate is allowed (by GIA2) to be used&#xA;        with the hostname in the URL, which appears on my screen as&#xA;        ‚Äúhttps://inbox.google.com/‚Äù.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;The certificate you‚Äôre viewing is from the browser‚Äôs current connection to&#xA;        the server ‚Äî¬†but that can include revalidating a cached resource. It can happen&#xA;        that the resource as cached is still live, but that it was previously retrieved&#xA;        on a connection validated by a different certificate chain! So although you can&#xA;        check the certificate chain for every connection involved in fetching a page‚Äôs&#xA;        resources, that is super tedious ‚Äî¬†and it can‚Äôt mean what one might hope it&#xA;        means.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;And the CV pointedly does &lt;em&gt;not&lt;/em&gt; mean a few other things:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;Not all strings of text that look the same on the screen are actually the&#xA;        same byte values underneath. This is terrible and bad, and is due to the fact&#xA;        that &lt;a&#xA;            href=&#34;https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&#34;&gt;there&#xA;            are many &lt;em&gt;character sets&lt;/em&gt; in the world&lt;/a&gt;, and some of them have&#xA;        &lt;em&gt;characters&lt;/em&gt; that are very similar, and some of them are displayed with&#xA;        similar or identical &lt;a href=&#34;https://en.wikipedia.org/wiki/Glyph&#34;&gt;&lt;em&gt;glyphs&lt;/em&gt;&lt;/a&gt; by design, and&#xA;        sometimes even not by design due to limitations in your operating system‚Äôs font&#xA;        libraries. And, even if they were always visually distinct, you wouldn‚Äôt&#xA;        necessarily be able to tell them apart at a glance. This is called the &lt;em&gt;&lt;a&#xA;                href=&#34;https://en.wikipedia.org/wiki/IDN_homograph_attack&#34;&gt;homograph&#xA;                attack&lt;/a&gt;&lt;/em&gt;. For an example, compare the Latin ‚ÄòA‚Äô (byte value 0x29) to the&#xA;        Cyrillic ‚Äò–ê‚Äô (byte values 0xd090). On my machine, they are pixel-for-pixel&#xA;        identical.&#xA;    &lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Thus, a certificate issuer might issue a certificate that is perfectly valid&#xA;        for a name that looks to humans like, but is not equal to, some other name.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Not all of the information in an X.509 certificate, such as Organization,&#xA;        Country, Locality, and so on is necessarily true. Many fields in an X.509&#xA;        certificate are under the control of attackers trying to forge certificates that&#xA;        look good but aren‚Äôt. Issuers generally control or validate the many DNS Name&#xA;        sub-fields in the Subject Alternative Name field, and the public key is the pair&#xA;        of a private key that is computationally infeasible for the attacker to fake.&#xA;        (That is, it is not feasible to make a fake public key that would match&#xA;        google.com‚Äôs real private key.) But the rest... no guarantees.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;If a certificate chain is valid according to the browser‚Äôs validation&#xA;        process, that does not actually mean that it is the chain that the true site&#xA;        operator intends to use at this time. For example, perhaps 1 of the issuers in&#xA;        the chain has been hacked, and attackers are issuing valid but false&#xA;        certificates. Or perhaps the certificate chain was valid yesterday, but the site&#xA;        operator rotated their keys after a server compromise ‚Äî¬†and the attacker now&#xA;        has, and is using, the old one. Thus, even if you have memorized that&#xA;        PayPal.com‚Äôs certificate has historically been issued by ‚ÄúSymantec Class 3 EV&#xA;        SSL CA - G3‚Äù, that doesn‚Äôt necessarily mean that‚Äôs what PayPal intends&#xA;        today.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;a id=&#34;what-about-extended-validation-certificates&#34;&gt;&lt;/a&gt;&#xA;&lt;h4&gt;What About Extended Validation Certificates?&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;Some web sites use a special mode called Extended Validation (EV), and some&#xA;    people believe (not without reason) that the EV process results in an X.509&#xA;    certificate in which all the information is true, or at least more true. Or at&#xA;    least the Organization and Country fields.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And, on desktop platforms (only ‚Äî not mobile), Chrome will show those fields&#xA;    in the Location Bar. For example, here is Twitter‚Äôs EV certificate:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;twitter-ev.png&#34; alt=&#34;Twitter.com uses an EV&#xA;certificate calling itself ‚ÄúTwitter, Inc. [US]‚Äù.&#34; width=&#34;330&#34; height=&#34;139&#34; /&gt;&#xA;    &lt;figcaption&gt;Twitter.com uses an EV certificate calling itself&#xA;        ‚ÄúTwitter, Inc. [US]‚Äù.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Surely, this is good? It indicates a stronger relationship between the DNS&#xA;    name ‚Äútwitter.com‚Äù and the Delaware corporation ‚ÄúTwitter, Inc.‚Äù?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Well, yes and no. First, it‚Äôs a &lt;em&gt;Delaware&lt;/em&gt; corporation ‚Äî¬†hence the&#xA;    ‚Äú[US]‚Äù. In other legal jurisdictions, some other entity may call itself&#xA;    ‚ÄúTwitter, Inc.‚Äù. So, no guarantees. But also, what are we to think when there is&#xA;    no obvious relationship between the DNS name and the Organization name?&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; src=&#34;yell-ev-hibu.png&#34; alt=&#34;Yell.com is owned by&#xA;something called ‚ÄúHibu‚Äù, which is located either in the United Kingdom or in&#xA;Great Britain.&#34; width=&#34;353&#34; height=&#34;140&#34; /&gt;&#xA;    &lt;figcaption&gt;Yell.com is owned by&#xA;        something called ‚ÄúHibu‚Äù, which is located either in the United Kingdom or in&#xA;        Great Britain.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;I enjoy the irony that yell.com is ‚Äúthe UK‚Äôs leading online business&#xA;    directory‚Äù ‚Äî¬†an organization that should have this name-mapping problem&#xA;    solved. Right?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In addition to having less-than-ideal security UX implications, EV&#xA;    certificates do not create a new technical security boundary. The &lt;a href=&#34;https://tools.ietf.org/html/rfc6454&#34;&gt;web&#xA;        origin&lt;/a&gt; is the primary&#xA;    defensible security boundary in the open web platform, and &lt;em&gt;it does not&#xA;        include any aspect of the certificate&lt;/em&gt;: not the public keys, not the&#xA;    Organization name, and not the issuance criteria (EV or other). The origin&#xA;    consists only of the scheme, host, and port number that the browser uses to&#xA;    connect to the server. For example, for Twitter the tuple is (https,&#xA;    twitter.com, 443).&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;So What Does HTTPS Definitely Do?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;At this point, you might be doubting every pixel on your screen and every&#xA;    data field in the obscure 1980s military-grade kludgefest we lovingly call&#xA;    ‚ÄúX.5ohgodtheburning‚Äù. What can you do to know if you‚Äôre connecting to the web&#xA;    site you really want to? People don‚Äôt have to, &lt;em&gt;and shouldn‚Äôt have to&lt;/em&gt;,&#xA;    do a whole lot.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assuming you have a modern web browser that is up-to-date, you can be&#xA;    reasonably certain of some basic facts when you use HTTPS sites:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;If there were anything truly horrible about the server‚Äôs TLS protocol&#xA;        version, ciphersuites negotiated, or certificate signature crypto, the browser&#xA;        would have rejected the connection. (This does happen, and periodically we&#xA;        tighten the screws as old crypto dies. Other times, &lt;a&#xA;            href=&#34;https://blog.chromium.org/2014/09/gradually-sunsetting-sha-1.html&#34;&gt;we&#xA;            cause the old crypto to die&lt;/a&gt;.)&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;The certificate was issued for a name that matches the hostname in the&#xA;        URL.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;The site‚Äôs cookies, local storage, and JavaScript are evaluated in a context&#xA;        (the origin) that is more-or-less tied to that hostname. (Sometimes the rules&#xA;        are loosened, such that example.com can mix in with foo.example.com. &lt;a&#xA;            href=&#34;https://code.google.com/archive/p/browsersec/wikis/Part2.wiki&#34;&gt;The&#xA;            particulars are complicated&lt;/a&gt;.)&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Also, the site may have included script content from any number of other&#xA;        sites. Unfortunately, you must simply assume that the site‚Äôs operators verified&#xA;        that doing so was safe. (It often isn‚Äôt. A really secure site will pull in&#xA;        resources only from its own origin.)&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;However, as mentioned above, the browser will not execute script from&#xA;        non-secure origins on a page that is otherwise secure.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;And, as always, sites that do not use HTTPS provide no guarantees at all.&#xA;        When there is an active attacker on the network ‚Äî &lt;a&#xA;            href=&#34;https://arstechnica.com/tech-policy/2014/09/why-comcasts-javascript-ad-injections-threaten-security-net-neutrality/&#34;&gt;and&#xA;            when isn‚Äôt there, really?&lt;/a&gt; ‚Äî¬†all non-secure sites are essentially evaluated&#xA;        in the same privilege domain: the anonymous, unauthenticated, surveillable&#xA;        origin.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The good news is that most people have nothing to learn from, and thus no&#xA;    need for, the level of technical security detail I‚Äôve described in this post.&#xA;    Indeed, all this detail is pretty hard even for experts to interpret. It‚Äôs&#xA;    pretty much only useful to the people actually developing and deploying the web&#xA;    site ‚Äî¬†which is why we moved it to the Developer Tools.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Future&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;There is still the problem that phishing is real (even prevalent), and is a&#xA;    highly effective mode of attack. I‚Äôm not convinced, at all, that phishing is a&#xA;    problem that we can solve with labels, indicators, or icons in an application‚Äôs&#xA;    UX. Instead, &lt;a&#xA;        href=&#34;https://www.facebook.com/notes/facebook-security/security-key-for-safer-logins-with-a-touch/10154125089265766/&#34;&gt;we&#xA;        now have nice origin-bound 2-factor authentication&lt;/a&gt;, and hopefully more and&#xA;    more sites will start supporting such very-hard-to-phish credentials.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the meantime, we also have the Safe Browsing service (which Safari and&#xA;    Firefox also use; it‚Äôs open) and Microsoft‚Äôs browsers use a similar technology&#xA;    called SmartScreen. These services are basically rapidly-updated blacklists of&#xA;    known phishing domains. Browsers consult the lists on each page-load.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To detect certificate misissuance, we have the growing &lt;a&#xA;        href=&#34;https://www.certificate-transparency.org/&#34;&gt;Certificate Transparency&lt;/a&gt;&#xA;    (CT) system, in which issuers publicly announce each certificate they‚Äôve issued.&#xA;    Site operators who are worried about misissuance for their sites can scan the&#xA;    public CT logs (using nifty front-ends like &lt;a href=&#34;https://crt.sh/&#34;&gt;crt.sh&lt;/a&gt;, or a service like &lt;a&#xA;        href=&#34;https://sslmate.com/certspotter/&#34;&gt;Cert Spotter&lt;/a&gt; that does it for you).&#xA;    Eventually, we want to get to where browsers refuse to validate a certificate&#xA;    chain that cannot prove that its issuance was announced publicly. We hope this&#xA;    will significantly curtail misissuance, possibly including homograph attacks (as&#xA;    the log scanners get more sophisticated).&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;    &lt;p&gt;Thanks to Adrienne Porter Felt, Emily Stark, and Eric Lawrence for&#xA;        comments that improved this post! The remaining errors are my fault, of&#xA;        course.&lt;/p&gt;&#xA;&lt;/aside&gt;</description>
      <author>Chris Palmer</author>
      <guid>2017/02/15/decoding-chromes-https-ux/index.html</guid>
      <pubDate>Wed, 15 Feb 2017 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Looking Backward To Move Forward In Software Engineering</title>
      <link>https://noncombatant.org/2016/09/16/looking-backward-to-move-forward/index.content</link>
      <description>&lt;h1&gt;Looking Backward To Move Forward In Software Engineering&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;16 September 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://ascii.textfiles.com/archives/5054&#34;&gt;Jason Scott has a&#xA;delightful blog post&lt;/a&gt; about a hacker, &lt;a&#xA;href=&#34;https://twitter.com/jbrooksbsi&#34;&gt;John Brooks&lt;/a&gt;, who released an update to&#xA;Apple‚Äôs legacy operating system ProDOS. Without access to source code, Brooks&#xA;took the object code of ProDOS 2.0.3 and fixed some of its bugs, added features,&#xA;and bundled in some new programs. This is amazing on several levels. I‚Äôll quote&#xA;liberally from Scott, but do read the whole enjoyable post:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;&lt;p&gt;The project is understatement itself, simply called Prodos 2.4. It updates&#xA;ProDOS, the last version of which, 2.0.3, was released in 1993.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[...] compatibility has been repaired for the entire Apple II line, from the&#xA;first Apple II through to the Apple IIgs, as well as cases of various versions&#xA;of 6502 CPUs [...]. Important utilities related to disk transfer, disk&#xA;inspection, and program selection have joined the image. The footprint is&#xA;smaller, and it runs faster than its predecessor (a wonder in any case of OS&#xA;upgrades).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, the pure unique experience of a &lt;em&gt;23-year-gap between upgrades&lt;/em&gt;&#xA;means that you can see a rare example of what happens when a computer&#xA;environment just sits tight for decades, with many eyes on it and many notes&#xA;about how the experience can be improved, followed by someone driven enough to&#xA;go through methodically and implement all those requests. [...]&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next is that this is an operating system upgrade &lt;em&gt;free of commercial and&#xA;marketing constraints and drives&lt;/em&gt;. Compared with, say, an iOS upgrade that&#xA;trumpets the addition of a search function or blares out a proud announcement&#xA;that they broke maps because Google kissed another boy at recess. Or Windows 10,&#xA;the 1968 Democratic Convention Riot of Operating Systems, which was designed&#xA;from the ground up to be compatible with a variety of mobile/tablet products&#xA;that are on the way out, and which were shoved down the throats of current users&#xA;with a cajoling, insulting methodology with misleading opt-out routes and&#xA;freakier and freakier fake-countdowns.&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;(Emphasis in original.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I had a great time playing with BASIC in &lt;a&#xA;href=&#34;https://archive.org/details/ProDOS_2_4&#34;&gt;the ProDOS 2.4 emulator on&#xA;archive.org&lt;/a&gt; last night, and it got me thinking. This ‚Äòprimitive‚Äô computing&#xA;environment has some advantages that modern systems sometimes lack.&lt;/p&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;&lt;dt&gt;Immediacy.&lt;/dt&gt; &#xA;&#xA;&lt;dd&gt;Because it‚Äôs small and simple, BASIC starts fast. Some machines of the time&#xA;even had BASIC in ROM; some even booted directly into BASIC. Apple BASIC&#xA;provides graphics (&lt;code&gt;GR&lt;/code&gt; and &lt;code&gt;HGR&lt;/code&gt;) as well, enabling&#xA;people to immediately get started drawing pictures as well as using text mode.&#xA;(Python, in a sense a modern BASIC, has &lt;a&#xA;href=&#34;http://effbot.org/tkinterbook/canvas.htm&#34;&gt;similar functionality&lt;/a&gt;, which&#xA;is awesome.)&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Simplicity and constraints.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;Like spreadsheets, BASIC presents an extremely simplified ‚Äî¬†some would say&#xA;fatally limited ‚Äî¬†model of computation. For example, all variables are global&#xA;(!). BASIC has &lt;code&gt;GOTO&lt;/code&gt; and &lt;code&gt;GOSUB&lt;/code&gt;, but most dialects have&#xA;no true function calls or exceptions. And so on. But these limitations are not a&#xA;problem if the person using the language doesn‚Äôt need the features ‚Äî¬†and it‚Äôs&#xA;possible to write plenty of useful applications without them. &lt;a&#xA;href=&#34;http://gizmodo.com/how-steve-wozniak-wrote-basic-for-the-original-apple-fr-1570573636&#34;&gt;Steve&#xA;Wozniak intended Apple BASIC to be a game development platform&lt;/a&gt;, and &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Business_Basic&#34;&gt;BASIC got a lot of attention&#xA;in the business world as well&lt;/a&gt;.&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Learnability.&lt;/dt&gt;&#xA;&#xA;&lt;dd&gt;BASIC‚Äôs simplicity and constraints make it much easier for people to learn.&#xA;There‚Äôs simply less to know. We all love C for its compact simplicity, and we&#xA;all revile C++ for its complex bloat. And we love how slim our K&amp;amp;Rs are next&#xA;to the other tech books on the shelf. But BASIC is so simple that &lt;a&#xA;href=&#34;http://www.calormen.com/jsbasic/reference.html&#34;&gt;Joshua Bell‚Äôs Quick&#xA;Reference&lt;/a&gt; gives people most of what they would need to write programs near&#xA;the upper range of what BASIC is capable of.&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;p&gt;Obviously, I don‚Äôt want to give up the nice modern goodness we have. I like&#xA;my hundreds of gigabytes of music, wifi, maps, and the modern web. But I think&#xA;it‚Äôs hugely important for all software engineers to at least dabble in&#xA;retrocomputing once in a while, so that we can see what we‚Äôve lost and what good&#xA;lessons we‚Äôve forgotten over the decades.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We have, in fact, lost and forgotten many things. Software is not, in fact,&#xA;necessarily getting better over time; I often feel that we are treading water&#xA;and only making insignificant changes in the margins. Worse, basic&#xA;infrastructure code for the entire Internet is &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Libtiff#Website_hijacking&#34;&gt;close to being&#xA;unmaintained&lt;/a&gt; and is &lt;a&#xA;href=&#34;http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm&#34;&gt;at risk of&#xA;exploding randomly&lt;/a&gt;. We‚Äôve forgotten that stability, by itself, is a feature.&#xA;Simplicity, by itself, is a feature. Knowability, learnability, and hackability&#xA;are features. (Hackability: I‚Äôd bet it‚Äôs easier to learn 6502 assembly and patch&#xA;a binary than it is to get a truly great result while maintaining code written&#xA;in a modern JavaScript front-end framework.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A lot of what we are building now seems to be what engineers and other&#xA;technical people want, or what their host corporations want, rather than&#xA;directly responding to real people‚Äôs real computing needs. When Bricklin and&#xA;Frankston shipped &lt;a href=&#34;https://en.wikipedia.org/wiki/VisiCalc&#34;&gt;VisiCalc&lt;/a&gt;,&#xA;it directly responded to people‚Äôs needs. Even though spreadsheets present a very&#xA;limited model of computation, they present a model that people can learn and use&#xA;and which is sufficient to solve real problems. You really can run a business&#xA;from Microsoft Excel, and people do. Meanwhile, Apple iTunes seems to get more&#xA;mazelike with each release...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At this point, hackers in the audience are getting nervous about all my&#xA;cheerleading for non-general-purpose computers. What about &lt;a&#xA;href=&#34;http://papers.ssrn.com/sol3/papers.cfm?abstract_id=847124&#34;&gt;generativity&lt;/a&gt;,&#xA;for which we require fully general models of computing? Obviously we&#xA;&lt;em&gt;technical people&lt;/em&gt; need that. But general models of computing are not&#xA;necessarily what most people need from a machine or software product. And many&#xA;or most of the problems people have with computers ‚Äî unexplainable errors,&#xA;malware, unnecessary bugs, and more ‚Äî¬†are the direct or indirect result of&#xA;giving people hacker machines when what they wanted was a spreadsheet&#xA;machine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Presenting limited models of computing is &lt;em&gt;not&lt;/em&gt; (necessarily) ‚Äòdumbing&#xA;the system down‚Äô. A system whose users perceive it to be dumbed down is one that&#xA;is not sufficient for its purpose, and sufficiency is still our minimum bar for&#xA;shipping. Rather, by presenting people systems that they can learn and use to&#xA;solve problems, we are &lt;em&gt;enhancing the human&lt;/em&gt;. Consider that presenting a&#xA;bash prompt, although it‚Äôs incredibly powerful, does not actually empower most&#xA;people. Instead, it confuses and disheartens ‚Äî¬†disempowers ‚Äî¬†them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We technical people need to change our recipe for building and delivering&#xA;software. We should not serve only ourselves; we should make sure we‚Äôre not&#xA;doing something just because we can; we should not love complexity for its own&#xA;sake. I‚Äôd like to see us follow a recipe more like this:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&#xA;&lt;li&gt;Find out what someone‚Äôs problem is.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Produce something that is sufficient to solve that problem.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;At this point, the solution is likely to be simple, because it is merely&#xA;sufficient. Make the most of the glorious limitations:&lt;/li&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;The system is small enough for you to document comprehensively. Maybe you&#xA;can even document the internals a bit, so that nerds can tinker with it.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Spend time polishing the simple UX. Go through every possible flow, and make&#xA;sure they are all necessary, and as smooth as possible.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;There are fewer bugs, right?&lt;/li&gt;&#xA;&#xA;&lt;li&gt;It should be fast (to run, download, install, et c.), since it‚Äôs sufficient&#xA;(small) instead of general (large). Make sure that‚Äôs that case.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;li&gt;Iterate, but only if necessary and in response to people‚Äôs needs. Take your&#xA;time, even as long as 23 years.&lt;/li&gt;&#xA;&#xA;&lt;/ol&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2016/09/16/looking-backward-to-move-forward/index.html</guid>
      <pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Getting Into Security Engineering</title>
      <link>https://noncombatant.org/2016/06/20/get-into-security-engineering/index.content</link>
      <description>&lt;h1&gt;Getting Into Security Engineering&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;20 June 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&lt;p&gt;Update 2016-07-06: I added 2 additional books to the reading&#xA;suggestions at the bottom.&lt;/p&gt;&lt;/aside&gt;&#xA;&#xA;&lt;aside&gt;&lt;p&gt;Update 2016-07-28: You‚Äôll definitely also want to read my excellent&#xA;colleague &lt;a&#xA;href=&#34;https://medium.com/@laparisa/so-you-want-to-work-in-security-bc6c10157d23&#34;&gt;Parisa&#xA;Tabriz‚Äô take on the same topic&lt;/a&gt;.&lt;/p&gt;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;I‚Äôve been talking with various people lately about how to get started in&#xA;software security engineering. I noticed I‚Äôve been having similar conversations&#xA;with both newbies and experienced engineers, and I figured I should write things&#xA;down in 1 place rather than keep repeating myself! I hope someone will find this&#xA;useful.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Know Your Reasons&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Know your reasons for wanting to specialize in security. Here are some&#xA;examples; you‚Äôll probably have more of your own:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;The intellectual challenge excites you&lt;/li&gt;&#xA;&#xA;&lt;li&gt;You want to help people by making software safer&lt;/li&gt;&#xA;&#xA;&lt;li&gt;You want to help people by stopping or catching crime&lt;/li&gt;&#xA;&#xA;&lt;li&gt;You want to refute, ‚ú®with science‚ú®, the false and dangerous claims that&#xA;software vendors sometimes make&lt;/li&gt;&#xA;&#xA;&lt;li&gt;You want to help people by &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Privilege_escalation#Jailbreaking&#34;&gt;giving&#xA;them control of closed platforms&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;You like the money&lt;/li&gt;&#xA;&#xA;&lt;li&gt;...&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;You might want to rank your reasons, so that when you‚Äôre faced with career&#xA;choices you know what path to follow. For example, you might have a job you like&#xA;because it‚Äôs intellectually challenging, but someone comes along and offers you&#xA;more money to do less-interesting work. You‚Äôll have to decide which is more&#xA;important to you. I find it comforting to have ranked my reasons and goals ahead&#xA;of time, because for me it makes the choices much less stressful. And you will&#xA;most certainly need a moral compass as you progress through this adventure.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Go For It!&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;You can, and should, get started right away! Yes, there is a lot to learn,&#xA;but you can do it, and you can start being effective immediately. I know this&#xA;from first-hand experience, and from seeing other people do it. You might feel&#xA;daunted by the size of the problem ‚Äî everyone is, whether they admit it or not.&#xA;The only way anyone has ever made progress is bit by bit, and you can too.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are more security problems right now than there are problem solvers. We&#xA;need you!&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Security Engineering Is Just Engineering&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Security is a specialization within the overall field of software&#xA;engineering. In that sense, it is no different than any other specialization&#xA;like networking, databases, performance, games, or whatever else. And software&#xA;engineering is much more than just reading and writing code ‚Äî¬†it also includes&#xA;design, technical and non-technical writing and communication, interpersonal and&#xA;political skills, at least some understanding of business and economics, and&#xA;more. Security engineers need those skills, too. Code is definitely important&#xA;but it is not the whole story.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can learn the general partly by focusing on the specific ‚Äî and you can&#xA;learn the specific by learning the general. That is, you can learn engineering&#xA;by diving right into security specifically, and you can also learn about&#xA;security by learning engineering generally. (After all, security is really just&#xA;another form of engineering quality.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I find it‚Äôs best to try to view things from both perspectives. In my&#xA;experience, it has been productive to focus on security specifically for a&#xA;while, then focus on application development for a while, and then iterate.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Within the field of software security engineering, there are&#xA;sub-specializations. My main area is application security engineering: figuring&#xA;out what kinds of assets and attacks on those assets are relevant in a&#xA;particular application‚Äôs domain, and then trying to design and implement the&#xA;application to best defend its assets. But there are other sub-specializations&#xA;in security, such as digital forensics and incident response (DFIR), network&#xA;security, anti-fraud (a close relative of actuarial science and statistics),&#xA;anti-abuse/pro-social design, and more.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Security Mindset: Doubt Abstractions And Dependencies&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The most important thing about a good security engineer is their mindset:&#xA;skeptical. A regular engineer is trying to build something that works; a&#xA;security engineer is anxious until they‚Äôve found a few new ways in which it&#xA;doesn‚Äôt work.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Much of computing science and software engineering is about managing&#xA;complexity by creating abstractions. For example, consider this Python code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;f = open(&#34;something.txt&#34;, &#34;r&#34;)&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Python gives us this simple way to say, ‚ÄúGive me an object that represents a&#xA;persistent data store, and let me read that data.‚Äù But that straightforward code&#xA;hides tons and tons of complexity. For example, we have no idea (without reading&#xA;the Python interpreter and standard library source code) exactly how that object&#xA;&lt;code&gt;f&lt;/code&gt; works (nor what it costs). It could be a thin wrapper around the&#xA;C library‚Äôs &lt;code&gt;FILE&lt;/code&gt; type, which itself is a rather thick (and useful)&#xA;wrapper around the operating system‚Äôs &lt;em&gt;file descriptor&lt;/em&gt; or&#xA;&lt;em&gt;handle&lt;/em&gt; concept. In turn, file descriptors are abstract representations&#xA;of a wide variety of hardware and software systems:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Possibly volatile, possibly not&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Possibly stored on a device attached to this computer ‚Äî¬†or possibly&#xA;remote, retrieved over the network in a way that might violate your expectations&#xA;for integrity or confidentiality&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Possibly stored on any kind of hardware: spinning disk, tape, SSD ‚Äî¬†all with&#xA;wildly different performance and reliability properties&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Possibly cached at 1 or more places in the &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Memory_hierarchy&#34;&gt;memory hierarchy&lt;/a&gt; ‚Äî¬†and&#xA;possibly stale or inconsistent&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The &lt;em&gt;pathname&lt;/em&gt; of the file, in this case &lt;code&gt;something.txt&lt;/code&gt;,&#xA;is also a very high-level abstraction. Different platforms implement different&#xA;pathname interpretation semantics, but most do a lot of work to hide complexity.&#xA;For example, on Unix-like platforms, pathnames can refer to a variety of kinds&#xA;of things:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Hardware devices (e.g. &lt;code&gt;/dev/disk1&lt;/code&gt;)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Software ‚Äòpseudo-devices‚Äô (e.g. &lt;code&gt;/dev/pty0&lt;/code&gt;)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Special operating system facilities (e.g. &lt;code&gt;/dev/bpf3&lt;/code&gt;,&#xA;&lt;code&gt;/dev/urandom&lt;/code&gt;)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Remote services on the network (e.g.&#xA;&lt;code&gt;/mnt/nfs/your-companys-file-server/accounting/FY2016Q3&#xA;Report.xls&lt;/code&gt;)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;And more...&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://googleprojectzero.blogspot.com/2016/02/the-definitive-guide-on-win32-to-nt.html&#34;&gt;Windows&#xA;systems have even stranger pathname semantics&lt;/a&gt;. PHP will also interpret&#xA;pathnames as URLs and &lt;a href=&#34;http://php.net/manual/en/wrappers.php&#34;&gt;will&#xA;perform certain transformations of the data based on the URL scheme!&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Abstractions Are Lossy ‚Äî¬†And Vulnerable&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;They have to be ‚Äî¬†that‚Äôs their value! The purpose of an abstraction is to&#xA;hide complexity, and thereby help you get work done faster. An abstraction that&#xA;does not hide something from its caller is not an abstraction at all.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But a security engineer is always skeptical, because they know that in the&#xA;gap between what the abstraction &lt;em&gt;seems to provide&lt;/em&gt; and what it&#xA;&lt;em&gt;actually provides&lt;/em&gt;, there are exploitable vulnerabilities.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Neal Stephenson called this &lt;em&gt;metaphor shear&lt;/em&gt; (like windshear) in his&#xA;hilarious essay &lt;a&#xA;href=&#34;https://www.amazon.com/Beginning-was-Command-Line/dp/0380815931/&#34;&gt;In The&#xA;Beginning Was The Command Line&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In general, it‚Äôs good engineering practice to &lt;strong&gt;understand the layer&#xA;below where you‚Äôre working, and understand the layer above&lt;/strong&gt;. Another way&#xA;to say this is, &lt;a&#xA;href=&#34;/2014/08/10/security-as-a-class-of-interface-guarantee/&#34;&gt;&lt;strong&gt;know your&#xA;callees, and know your callers&lt;/strong&gt;&lt;/a&gt;. The difference between an engineer&#xA;and a security engineer is that the security engineer is looking for the tension&#xA;and friction in those edges.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Skills&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;For the rest of this post, I‚Äôll talk about what skills I have found useful in&#xA;application security. But there are other areas, and other paths into them&#xA;‚Äî¬†this is just one person‚Äôs perspective!&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Foundations&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Certain skills will be of use throughout your career and will help you build&#xA;a foundation from which you can learn anything else you need to learn.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Know at least 1 programming language (C, Ruby, Python, Java, et c.) in&#xA;depth.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Know the standard library of your programming language as well as possible.&#xA;This includes collections types (lists, &lt;a&#xA;href=&#34;/2014/03/02/maps-and-their-applications/&#34;&gt;maps&lt;/a&gt;, et c.), basic file&#xA;I/O, basic networking, basic text processing, and so on.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Know at least 1 platform (iOS, Linux, web, Windows, et c.) in depth.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Know at least the basics of TCP/IP. Spend some quality time with &lt;a&#xA;href=&#34;https://www.amazon.com/TCP-Illustrated-Protocols-Addison-Wesley-Professional/dp/0321336313/&#34;&gt;&lt;em&gt;TCP/IP&#xA;Illustrated&lt;/em&gt;&lt;/a&gt; and &lt;a&#xA;href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3&gt;Progressing&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;After some years building your foundations, there are more things to learn&#xA;and more adventures to enjoy. Here are some:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Master additional languages and platforms&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Contribute to the implementation of a language or platform&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Learn about cryptography, and what it does and does not provide&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Learn about hardware engineering&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Learn programming language theory&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Branch out into platform security engineering (changing platforms, and&#xA;developing new platforms, to better serve application security needs)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Study distributed systems theory&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Learn about performance engineering ‚Äî¬†it‚Äôs important to make sure that&#xA;security mechanisms are not the cause of performance problems!&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Learn user experience design, so you can build secure &lt;a&#xA;href=&#34;https://eprint.iacr.org/2007/399.pdf&#34;&gt;&lt;em&gt;ceremonies&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;Some Light Reading&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;To thoroughly learn a programming language, I find it useful to read 1 very&#xA;well written book that covers the language‚Äôs syntax, semantics, standard&#xA;library, and usage conventions. I like to read the book cover to cover, and then&#xA;re-read all or part of it periodically. Preferably, 1 or more of the language‚Äôs&#xA;inventors or implementors should have written the book. The canonical example is&#xA;&lt;em&gt;The C Programming Language&lt;/em&gt; by Kernighan and Ritchie, and other books&#xA;have continued and improved on the tradition: &lt;em&gt;The Go Programming&#xA;Language&lt;/em&gt; by Donovan and Kernighan; &lt;em&gt;JavaScript: The Definitive&#xA;Guide&lt;/em&gt; by Flanagan; &lt;em&gt;The Java Programming Language&lt;/em&gt; by Arnold,&#xA;Gosling, and Holmes; and &lt;em&gt;Effective C++&lt;/em&gt; by Meyers. People on Twitter say&#xA;that &lt;a href=&#34;http://docs.python-guide.org/en/latest/&#34;&gt;&lt;em&gt;The Hitchhiker‚Äôs&#xA;Guide To Python&lt;/em&gt;&lt;/a&gt; by Reitz is a good Python book.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Saltzer and Schroeder‚Äôs &lt;a&#xA;href=&#34;http://www.cs.virginia.edu/~evans/cs551/saltzer/&#34;&gt;&lt;em&gt;The Protection Of&#xA;Information In Computer Systems&lt;/em&gt;&lt;/a&gt; is a foundational text.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For web security, I recommend &lt;em&gt;The Tangled Web&lt;/em&gt; by &lt;a&#xA;href=&#34;http://lcamtuf.coredump.cx/&#34;&gt;Michal Zalewski&lt;/a&gt;. Zalewski also has&#xA;another excellent book, &lt;em&gt;Silence On The Wire&lt;/em&gt;, about techniques for&#xA;passive surveillance in a variety of domains. Zalewski is also the author of &lt;a&#xA;href=&#34;http://lcamtuf.coredump.cx/afl/&#34;&gt;American Fuzzy Lop&lt;/a&gt;, an excellent &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Fuzz_testing&#34;&gt;fuzzer&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Cryptography Engineering&lt;/em&gt; by Ferguson, Schneier, and Kohno is a good&#xA;introduction to applied cryptography.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;TCP/IP Illustrated&lt;/em&gt;, at least volume 1, is crucial.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For understanding C and doing reverse engineering, you‚Äôll want a good&#xA;assembly language book, such as &lt;a&#xA;href=&#34;https://www.nostarch.com/assembly2.htm&#34;&gt;&lt;em&gt;Art Of Assembly Language&lt;/em&gt;&#xA;by Hyde&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Ross Anderson‚Äôs excellent omnibus, &lt;em&gt;Security Engineering&lt;/em&gt;, is &lt;a&#xA;href=&#34;http://www.cl.cam.ac.uk/~rja14/book.html&#34;&gt;available online&lt;/a&gt; and on&#xA;paper. Another great book is &lt;a&#xA;href=&#34;https://www.amazon.com/Art-Software-Security-Assessment-Vulnerabilities/dp/0321444426&#34;&gt;&lt;em&gt;The&#xA;Art Of Software Security Assessment&lt;/em&gt;&lt;/a&gt; by Dowd, McDonald, and Schuh.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are many also good blogs and magazines. A random sampling might include&#xA;&lt;a href=&#34;https://googleprojectzero.blogspot.com/&#34;&gt;the Project Zero blog&lt;/a&gt;, &lt;a&#xA;href=&#34;https://www.alchemistowl.org/pocorgtfo/&#34;&gt;PoC||GTFO&lt;/a&gt;, &lt;a&#xA;href=&#34;http://blog.invisiblethings.org/&#34;&gt;Joanna Rutkowska‚Äôs blog&lt;/a&gt;, and &lt;a&#xA;href=&#34;http://blog.cryptographyengineering.com&#34;&gt;Matthew Green‚Äôs blog&lt;/a&gt;.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2016/06/20/get-into-security-engineering/index.html</guid>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Building A Telecaster</title>
      <link>https://noncombatant.org/2016/06/12/building-guitar/index.content</link>
      <description>&lt;h1&gt;Building A Telecaster&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;12 June 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Last week, I built a Telecaster guitar from scratch, under the excellent&#xA;    tutelage of luthier &lt;a href=&#34;http://www.meredithcoloma.com/&#34;&gt;Meredith&#xA;        Coloma&lt;/a&gt;, in Vancouver. It was an exciting and at times harrowing adventure!&#xA;    We spent 7 rather exhausting but rewarding days in Meredith‚Äôs shop. Meredith is&#xA;    a fantastic luthier but also a great teacher! And she went above and beyond the&#xA;    call of duty several times for me, so I feel super lucky!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I have built many guitars and basses (all the ones I play regularly) from &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Milling_(machining)&#34;&gt;CNC-milled&lt;/a&gt;, pre-fab&#xA;    parts (thanks, &lt;a href=&#34;http://www.warmoth.com/&#34;&gt;Warmoth!&lt;/a&gt;), but I had never&#xA;    before built a guitar from scratch ‚Äî¬†just chunks of wood. Meredith offers&#xA;    classes in guitar building, so I signed up!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It was really stressful to be a total newbie. I had never used most of the&#xA;    tools Meredith taught me to use, and I was very afraid of wrecking the wood. But&#xA;    now I know at least 1 thing about instrument building, and I‚Äôm already planning&#xA;    my next instrument. :)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here‚Äôs a sound sample:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;afrerika.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;afrerika.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;Here are some pictures:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;1648.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1649.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1650.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1651.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1652.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1653.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1654.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1655.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1657.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1659.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1660.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1661.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1662.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1663.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1666.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1667.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1668.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1670.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1671.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1672.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1673.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1674.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1675.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1676.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1678.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1682.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1683.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1691.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1695.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1696.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1697.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1698.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1699.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1705.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1709.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1710.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1711.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1712.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1713.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1715.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1720.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1721.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1724.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1725.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1726.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1727.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1729.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1731.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1734.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1735.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1736.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1737.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1738.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1739.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1740.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1742.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1746.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1748.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1749.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1750.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1751.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1752.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1753.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1755.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1756.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1757.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1758.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1759.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1762.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1763.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1764.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1767.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1768.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1769.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1770.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1771.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1772.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1773.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1775.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1778.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1780.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1781.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;1787.jpg&#34; loading=&#34;lazy&#34; width=&#34;512&#34; height=&#34;512&#34; alt=&#34;Photo&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;/figcaption&gt;&#xA;&lt;/figure&gt;</description>
      <author>Chris Palmer</author>
      <guid>2016/06/12/building-guitar/index.html</guid>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>To Make Good Software, Make Software For People</title>
      <link>https://noncombatant.org/2016/06/01/constituencies-and-quality/index.content</link>
      <description>&lt;h1&gt;To Make Good Software, Make Software For People&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;1 June 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Reading the new &lt;a href=&#34;https://duo.com/assets/pdf/out-of-box-exploitation_oem-updaters.pdf&#34;&gt;Duo&#xA;        Labs report on Windows OEM bloatware vulnerabilities, ‚ÄúOut-Of-Box&#xA;        Exploitation‚Äù&lt;/a&gt;, I was struck by a thought: the reason Apple hardware does not&#xA;    have the vulnerable bloatware problem is that Apple does not have a bloatware&#xA;    problem at all. And the reason for that is that Apple prioritizes the customer‚Äôs&#xA;    happiness above all, and the out-of-box experience in particular. So much so, in&#xA;    fact, that people fetishize taking the product out of its packaging. This video,&#xA;    one of who-knows-how-many, has 737,414 views on YouTube:&lt;/p&gt;&#xA;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LzEi3aJtde0&#34; frameborder=&#34;0&#34; allowfullscreen&#xA;    loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;p&gt;So although Microsoft employs very good engineers, including very good&#xA;    security engineers, the end result is awful. What went wrong?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Microsoft famously (historically, and apparently still) catered first to&#xA;    application developers (independent software vendors, or ISVs) and to OEMs.&#xA;    Microsoft saw, or sees, OEMs and large enterprises as their true customers;&#xA;    Apple sees individuals as their true customers. Apple wants to make money by&#xA;    making you love their machines, while Microsoft wants to make money by helping&#xA;    OEMs make money.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Obviously, both approaches work great, even though the results are wildly&#xA;    different and have huge implications for software security internet-wide.&#xA;    Interesting to note is that when you can be Microsoft‚Äôs direct customer, such as&#xA;    when you are buying thousands of MSDN seats or large IIS and SQL Server&#xA;    deployments, you do in fact get Apple-level care and quality.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One way of understanding that is to observe that, of course, paying customers&#xA;    get the quality they want. But I don‚Äôt think that fully explains what‚Äôs going&#xA;    on; after all, Dell‚Äôs and Acer‚Äôs customers paid money. Is it simply a matter of&#xA;    margins?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm not sure it is, because Duo Labs found the same problems even with the&#xA;    premium Microsoft Signature Edition machines, even the premium-/business-grade&#xA;    Lenovos. I think Microsoft baked the security and user-experience quality&#xA;    problems into the platform when they decided to prioritize the needs and&#xA;    preferences of OEMs and large enterprises over those of individual people using&#xA;    the systems.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Especially now that we increasingly live in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Bring_your_own_device&#34;&gt;mixed&#xA;        enterprise/personal computing environment&lt;/a&gt; ‚Äî¬†BYOD started because executives&#xA;    wanted to use their fancy iDevices at work, because the devices were so good! ‚Äî&#xA;    &lt;a href=&#34;https://www.w3.org/TR/html-design-principles/#priority-of-constituencies&#34;&gt;prioritizing&#xA;        the needs and preferences of the people actually using the systems&lt;/a&gt; to actually&#xA;    do work seems increasingly like a fundamentally good decision for security, user&#xA;    experience, and quality generally.&#xA;&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2016/06/01/constituencies-and-quality/index.html</guid>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>More New Electronic Music: Time 1</title>
      <link>https://noncombatant.org/2016/05/31/time-1/index.content</link>
      <description>&lt;h1&gt;More New Electronic Music: Time 1&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;31 May 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Hot off the cyberpresses, I wrote/improvised and recorded 3 new songs this&#xA;afternoon: &lt;a href=&#34;https://noncombatant.bandcamp.com/album/time-1&#34;&gt;&lt;em&gt;Time&#xA;1&lt;/em&gt;&lt;/a&gt;. I really like just jamming with the Fingerlab DM1 drum machine app&#xA;for the iPad. They keep updating the app with new features and drum kits/sample&#xA;sets. A super cool thing now is the ability to apply effects to particular&#xA;instruments, rather than to the mix as a whole. These tracks are entirely&#xA;off-the-cuff, unlike &lt;a&#xA;href=&#34;/2016/03/29/object-lifetime/&#34;&gt;&lt;em&gt;Object.lifetime&lt;/em&gt;&lt;/a&gt;, which was&#xA;somewhat more premeditated and rehearsed. I hope you enjoy!&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2016/05/31/time-1/index.html</guid>
      <pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>New Electronic Music EP: Object.lifetime</title>
      <link>https://noncombatant.org/2016/03/29/object-lifetime/index.content</link>
      <description>&lt;h1&gt;New Electronic Music EP: Object.lifetime&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;29 March 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;After letting it sit for 4 years (?!), I have finally released this EP of&#xA;electronic music I wrote shortly after recording &lt;a&#xA;href=&#34;https://dotpunto.bandcamp.com/album/agua-viva&#34;&gt;the 2nd Dot Punto. EP I&#xA;worked on, &lt;em&gt;Agua Viva&lt;/em&gt;&lt;/a&gt;. It‚Äôs called &lt;a&#xA;href=&#34;https://noncombatant.bandcamp.com/album/object-lifetime&#34;&gt;&lt;em&gt;Object.lifetime&lt;/em&gt;&lt;/a&gt;,&#xA;and after thinking about it for all these years I don‚Äôt hate it, so maybe it&#xA;isn‚Äôt too bad. :) You can listen to it on Bandcamp, or you could even pay money&#xA;for it, if you were so inclined.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2016/03/29/object-lifetime/index.html</guid>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Advice For Myself</title>
      <link>https://noncombatant.org/2016/03/27/advice-for-myself/index.content</link>
      <description>&lt;h1&gt;Advice For Myself&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;27 March 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Maybe other people might find this useful, too.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mudita&#34;&gt;Contribute to someone&#xA;else&lt;/a&gt;‚Äôs safety, health, or pleasure. Secure your own oxygen mask before&#xA;helping others ‚Äî so that you can help others.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Do 1 thing at a time. Multitasking is counter-productive.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Eat a moderate amount of a wide variety of foods. Eat breakfast. Reduce (but&#xA;don‚Äôt completely eliminate) sugar and alcohol.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Listen to even more kinds of music, even more often.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Read even more kinds of text, even more often. Read more long-form than&#xA;short-form.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;The mind is the body. Meditate, in some form, for at least 30 minutes each&#xA;day. Walk at least 10,000 steps each day.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Clean your body, clean your clothes, clean your home.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Prefer craft and technique to tools. But do use the best tools, and take&#xA;care of them.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Doubt yourself ‚Äî but not too much. Doubt yourself before doubting others,&#xA;but do avoid confirmed fools.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Nail the fundamentals. Be open to improvising around the fundamentals.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;‚ÄúThe shortest answer is doing the thing.‚Äù ‚Äî¬†Ernest Hemingway&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Habits are free. (That can be bad.) Be aware of your habits and break them&#xA;if necessary, or even just to change perspective.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2016/03/27/advice-for-myself/index.html</guid>
      <pubDate>Sun, 27 Mar 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Security Engineering As Caring-For</title>
      <link>https://noncombatant.org/2016/03/27/security-as-caring-for/index.content</link>
      <description>&lt;h1&gt;Security Engineering As Caring-For&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;27 March 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;On security nihilism ‚Äî I recently read &lt;a&#xA;href=&#34;https://www.dukeupress.edu/the-theater-of-operations&#34;&gt;Joe Masco‚Äôs&#xA;&lt;em&gt;Theater of Operations: National Security Affect from the Cold War to the War&#xA;on Terror&lt;/em&gt;&lt;/a&gt; (VERY GOOD). I was struck by the massive extent to which the&#xA;discourse around [computer] security borrows from and follows military discourse&#xA;and metaphor. We see this in the increasing departure from probabilistically&#xA;provable models to black swan paranoia ‚Äî the terrorist with the WMD, the hacker&#xA;and the power grid. We accept that we must defend against catastrophe without a&#xA;good way to estimate its likelihood, and so our defenses and imaginations have&#xA;no limits. The hunched paranoid position forever. Any fallibility is a loss, any&#xA;weakness a crisis. We are aligned forever against a bad ‚Äúother.‚Äù Who wouldn‚Äôt be&#xA;exhausted, say fuckit it‚Äôs impossible? But...what if we reimagined computer&#xA;security as an act of caring-for, as a practice of maintenance and nurturing, as&#xA;a vigilant attention to whether the machines and systems we instruct are&#xA;respecting the right boundaries, and ensuring others respect them, and working&#xA;for those they are meant to serve respectfully? This stance seems much easier to&#xA;sustain indefinitely, and IMO much more closely captures the daily nuts and&#xA;bolts of security engineering anyway. (I‚Äôm sure it makes crappier movie plots,&#xA;but...) ‚Äî &lt;a&#xA;href=&#34;https://www.facebook.com/permalink.php?story_fbid=231689823833308&amp;id=100009768763867&amp;comment_id=232319317103692&amp;comment_tracking=%7B%22tn%22%3A%22R%22%7D&#34;&gt;Meredith&#xA;Whittaker&lt;/a&gt;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Meredith makes an important point well (something she often does). I have&#xA;seen so many of my past and present colleagues struggle to find ways to cope&#xA;with the pain of dealing with what seems like a Sisyphean task. I developed a&#xA;pretty severe eye twitch and an ambient low-grade panic when I was doing the&#xA;security consulting gig, for example.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the problem of security engineering were merely &lt;em&gt;difficult&lt;/em&gt;, that&#xA;would be one thing. (Indeed, that‚Äôs the part of this job I most love!) But then&#xA;there‚Äôs the negligence, efforts to externalize costs and avoid accountability,&#xA;the sexism and racism, the juvinility, the &lt;a&#xA;href=&#34;http://www.theatlantic.com/technology/archive/2015/11/programmers-should-not-call-themselves-engineers/414271/&#34;&gt;ignorant&#xA;hootings  of nay-sayers&lt;/a&gt;... well, it wears a person down pretty quick.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Part of the low-grade panic comes from the moral and ethical dilemmas we&#xA;sometimes face. I‚Äôm sure we could all tell hair-raising stories. (And I think we&#xA;should. Perhaps in a future post...)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Even when there‚Äôs nothing shady going on, the ability of programmers to avoid&#xA;learning anything is as confounding as it is depressing. Many engineers know&#xA;what they know from early in their careers, and have never felt the need to&#xA;learn much new ‚Äî¬†even as the junior engineers rely on them for mentorship.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One winter, after doing a series of unnecessarily frightening security&#xA;reviews at healthcare and financial institutions, I did a very short (1 person,&#xA;2 weeks) engagement at a small startup. They didn‚Äôt have much money, but their&#xA;thing was important enough that they decided they needed some security review,&#xA;so they paid for as much as they could afford. This company was small but&#xA;staffed by experienced engineers from [redacted], and they had done a very good&#xA;job at minimizing their attack surface, sticking to secure network protocols,&#xA;using a memory-safe language well, and so on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If this company had their service compromised, it definitely would matter.&#xA;The people who use the company‚Äôs service (probably numbering now in the 10s of&#xA;millions?) would have some of their definitely-somewhat-interesting information&#xA;leaked, and it could spell the end of the company. It probably would hurt the&#xA;entire (emerging) market. But, they had their security situation as well in-hand&#xA;as I had yet seen. By contrast, I know first-hand that many of the systems that&#xA;affect people‚Äôs lives are compromised. I have seen the security engineers (when&#xA;there are any) at the organizations that run those systems despair, and I have&#xA;seen the executives egregiously deprioritize utter pwnage that wouldn‚Äôt even be&#xA;too expensive to fix.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In my experience, the more important a system is, the worse its security is.&#xA;(You might think the problem is particular to large, old enterprises, and that&#xA;new business segments and small startups in old segments are doing well because&#xA;they are new or small. Well, &lt;a href=&#34;https://twitter.com/internetofshit&#34;&gt;about&#xA;that&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Many security engineers feel like, or fear feeling like, &lt;a&#xA;href=&#34;http://www.npr.org/sections/thetwo-way/2016/02/25/466555217/your-letters-helped-challenger-shuttle-engineer-shed-30-years-of-guilt&#34;&gt;Bob&#xA;Ebeling, who warned about the dangers of launching the Space Shuttle&#xA;Challenger&lt;/a&gt; but was overruled. As Meredith characterizes it, we feel we must&#xA;‚Äúdefend against catastrophe without a good way to estimate its likelihood‚Äù.&#xA;Sometimes, we even do know the likelihood, but find that we can‚Äôt get the&#xA;resources we need to protect people.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, sometimes we cope by getting angry, or mean, or indulging in gallows&#xA;humor, or pretending like we don‚Äôt really care (‚ÄúI‚Äôm just in this for the &lt;a&#xA;href=&#34;http://web.cs.ucdavis.edu/~rogaway/papers/moral-fn.pdf&#34;&gt;interesting&#xA;puzzles&lt;/a&gt;‚Äù), or whatever. It‚Äôs not good, and I don‚Äôt think any of us enjoys&#xA;resorting to those coping mechanisms. I certainly engage in all of them myself,&#xA;and I hate doing it, and I hate myself for it. Which, of course, only&#xA;exacerbates the feelings of burn-out and despair, which leads to more coping,&#xA;which...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It‚Äôs certainly not good engineering practice. Good engineering requires&#xA;actually believing in the possibility of a real solution, being pro-social,&#xA;communicating well, and engaging with the full difficulty of the problems.&#xA;Security problems are, after all, most often social problems and communication&#xA;problems. (Does your root cause analysis really go all the way to the&#xA;&lt;em&gt;real&lt;/em&gt; root?)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So how can we do our jobs ‚Äî¬†making driverless cars safe, keeping health&#xA;records accurate and private, keeping voting accurate and not coerced,&#xA;maintaining people‚Äôs rights to read and speak, keeping fraud and theft down to a&#xA;dull roar ‚Äî¬†without falling into despair? Can we even dream of... &lt;em&gt;being&#xA;happy?&lt;/em&gt; Can we not fall into a siege mentality? Can we not blame&#xA;technology‚Äôs victims for its failures?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Following Meredith‚Äôs advice, I believe that we can. When we re-frame security&#xA;engineering as caring-for, progress starts seeming possible. Each small victory&#xA;starts looking like a tile in a mosaic, rather than as a futile gesture. We can&#xA;see the faces of people we‚Äôve helped in the mosaic. We can expand the scope of&#xA;our work ‚Äî¬†yes, security engineering includes securing the right to read! ‚Äî¬†not&#xA;with fatigue or dread, but with purpose and meaning. And we must argue for &lt;a&#xA;href=&#34;/2016/01/28/against-security-nihilism/&#34;&gt;what we know works, and against&#xA;what we know does not work&lt;/a&gt; with confidence.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As we do this, our skills and usefulness will increase. Our ability to&#xA;negotiate and plan, rather than make demands as we frantically react, will&#xA;improve. We can leave unethical and dysfunctional organizations and communities,&#xA;and move to ethical and functional ones. We must, &lt;a&#xA;href=&#34;http://www.sheepdressedlikewolves.com/self-care/&#34;&gt;because we cannot care&#xA;for others until we have begun to care for ourselves&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;The viability of technology, like democracy, depends in the end on&#xA;the practice of justice and on the enforcement of limits to power. ‚Äî¬†Ursula M.&#xA;Franklin, &lt;em&gt;The Real World Of Technology&lt;/em&gt;, p. 5&lt;/blockquote&gt;&#xA;&#xA;&lt;!--&#xA;&lt;blockquote&gt;At this momentous event in my life ‚Äî the acceptance of the Nobel&#xA;Peace Prize ‚Äî I want to speak as a scientist, but also as a human being. From my&#xA;earliest days I had a passion for science. But science, the exercise of the&#xA;supreme power of the human intellect, was always linked in my mind with benefit&#xA;to people. I saw science as being in harmony with humanity. I did not imagine&#xA;that the second half of my life would be spent on efforts to avert a mortal&#xA;danger to humanity created by science. ‚Äî¬†Joseph Rotblat, &lt;a&#xA;href=&#34;http://www.nobelprize.org/nobel_prizes/peace/laureates/1995/rotblat-lecture.html&#34;&gt;‚ÄúRemember&#xA;Your Humanity‚Äù&lt;/a&gt;&lt;/blockquote&gt;&#xA;--&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2016/03/27/security-as-caring-for/index.html</guid>
      <pubDate>Sun, 27 Mar 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Everyone Needs Secure Usability</title>
      <link>https://noncombatant.org/2016/01/30/everyone-needs-secure-usability/index.content</link>
      <description>&lt;h1&gt;Everyone Needs Secure Usability&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;30 January 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There‚Äôs an interesting &lt;a href=&#34;https://lwn.net/Articles/586838/&#34;&gt;article in&#xA;LWN about C11 atomic variables and the kernel&lt;/a&gt; that struck me for a few&#xA;reasons:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Atomics and concurrency are always weird and fun and surprising&lt;/li&gt;&#xA;&#xA;&lt;li&gt;I keep hoping for C11 to be kind of awesome, or at least interesting, and it&#xA;is!&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Although they might not frame it this way, secure usability ‚Äî &lt;a&#xA;href=&#34;https://docs.google.com/presentation/d/1Qmpl-5epx0B5C2t4XsUTyjgbwab_rXfK_4iHqX3IC30/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.gf44795496_0_1&#34;&gt;in&#xA;the same sense that we worry about it in Chrome&lt;/a&gt; (&lt;a&#xA;href=&#34;https://www.youtube.com/watch?v=XfFjde0UPbY&#34;&gt;see also&lt;/a&gt;) ‚Äî¬†is a&#xA;make-or-break concern for these Linux kernel developers and C standardizers&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;In Chrome Land, we‚Äôre always trying to improve people‚Äôs ability to understand&#xA;and effectively use Chrome‚Äôs security indicators and controls, such as the&#xA;Location Icon (the green padlock, the red padlock, et c.), the Origin Info&#xA;Bubble (the bubble you get when you click on the Location Icon), the &lt;a&#xA;href=&#34;https://developers.google.com/web/updates/2015/12/security-panel?hl=en&#34;&gt;Security&#xA;Panel in the Dev Tools&lt;/a&gt;, the permissions and Content Settings, the security&#xA;exceptions in the JavaScript Console, and so on. (By ‚Äúpeople‚Äù, you can see that&#xA;I mean everyone: ‚Äòend-users‚Äô, web developers, system and network administrators,&#xA;et al. Those categories are fluid.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Similarly, the LWN article describes how the Linux kernel developers and C11&#xA;standardizers are trying to improve C developers‚Äô ability to understand and&#xA;effectively use atomic variables so that we can all enjoy efficient yet safe&#xA;concurrent programs. If the mechanisms that enable concurrency (like locks and&#xA;atomics) are confusing, we‚Äôre going to get buggy (and vulnerable) programs. But&#xA;if they‚Äôre too slow or heavyweight, people won‚Äôt use them ‚Äî¬†and we‚Äôll get buggy&#xA;(and vulnerable) programs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So the first thing to do is to find out what it is that the community using&#xA;the product needs and can effectively use. So the C11 standards people, academic&#xA;programming language researchers, and kernel developers are all working together&#xA;to figure out the shape of the thing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is a representative example of the kinds of problems that crop up:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;&lt;p&gt;Another area of concern is control dependencies: situations where atomic&#xA;variables and control flow interact. Consider a simple bit of code:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;x = atomic_load(&amp;a, memory_order_relaxed);&#xA;if (x)&#xA;    atomic_store(&amp;y, 42, memory_order_relaxed);&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The setting of &lt;code&gt;y&lt;/code&gt; has a control dependency on the value of&#xA;&lt;code&gt;x&lt;/code&gt;. But the C11 standard does not currently address control&#xA;dependencies at all, meaning that the compiler or processor could play with the&#xA;order of the two atomic operations, or even try to optimize the branch out&#xA;altogether; see &lt;a href=&#34;https://lwn.net/Articles/586854/&#34;&gt;this explanation from&#xA;GCC developer Torvald Riegel&lt;/a&gt; for details. Again, the results of this kind of&#xA;optimization in the kernel context could be disastrous.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For cases like this, Paul suggested that some additional source-code markup&#xA;and a new &lt;code&gt;memory_order_control&lt;/code&gt; memory model could be used in the&#xA;kernel to make the control dependency explicit:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;x = atomic_load(&amp;a, memory_order_control);&#xA;if (control_dependency(x))&#xA;    atomic_store(&amp;b, 42, memory_order_relaxed);&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;But this approach is unlikely to be taken, given just how unhappy Linus was&#xA;with the idea. From his point of view, the control dependency should be obvious&#xA;‚Äî the code is testing the value of &lt;code&gt;x&lt;/code&gt;, after all. Any compiler that&#xA;would move the &lt;code&gt;atomic_store()&lt;/code&gt; operation in an externally visible&#xA;way, he said, is simply broken.&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Just as with ‚Äòend-user‚Äô interfaces, these low-level APIs must adapt to the&#xA;needs and expectations of the people who use them. Despite the tendency to&#xA;consider ‚Äòend-users‚Äô as ‚Äòignorant‚Äô or ‚Äònot computer-literate‚Äô, and the tendency&#xA;to consider kernel hackers as ‚Äòelite‚Äô, these different groups have concerns&#xA;about and problems with the usability of their every-day tools that are more&#xA;similar than people sometimes imagine.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another thing that struck me is that magic simply may not be possible, and&#xA;our best recourse might just be to live with the limitations of simplicity.&#xA;Linus‚Äô way of saying this is arresting:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;&lt;p&gt;Yet another concern is global optimization. Compiler developers are&#xA;increasingly trying to optimize programs at the level of entire source files, or&#xA;even larger groups of files. This kind of optimization can work well as long as&#xA;the compiler truly understands how variables are used. But the compiler is not&#xA;required to understand the real hardware that the program is running on; it is,&#xA;instead, required to prove its decisions against a virtual machine defined by&#xA;the standard. If the real computer behaves in ways that differ from the virtual&#xA;machine, things can go wrong.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Consider this example raised by Linus: the compiler might look at how the&#xA;kernel accesses page table entries and notice that no code ever sets the ‚Äúpage&#xA;dirty‚Äù bit. It might then conclude that any tests against that bit could simply&#xA;be optimized out. But that bit can change; it‚Äôs just that the hardware makes the&#xA;change, not the kernel code. So any optimizations made based on the notion that&#xA;the compiler can ‚Äúprove‚Äù that bit will never be set will lead to bad things.&#xA;Linus concluded: ‚ÄúAny optimization that tries to prove anything from more than&#xA;local state is by definition broken, because it assumes that everything is&#xA;described by the program.‚Äù&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The article describes the existing concurrency tools that the Linux kernel&#xA;developers built for themselves, that the C11 mechanisms would attempt to&#xA;replace. The kernel developers understand the tools they made, and they seem to&#xA;work, and maybe that‚Äôs sufficient.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I can‚Äôt help but be reminded of how a web browser cannot always ‚Äòdecide‚Äô for&#xA;the person that a certificate validation error is or is not important: it&#xA;depends on context that is simply not available to the program interpreting its&#xA;impoverished input. Whether it‚Äôs the compiler trying to interpret kernel source&#xA;code or the browser trying to interpret an X.509 certificate chain, there‚Äôs&#xA;often simply not enough information to produce an output that is both correct&#xA;and optimal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is also a problem of unaligned incentives that contribute to the secure&#xA;usability problem, just as we often see happen in the Web PKI and in the design,&#xA;implementation, and use of the Open Web Platform: different groups of people&#xA;have different interests and are under different pressures, and sometimes their&#xA;goals come into conflict.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;The problem is that compilers tend to be judged on the speed of the&#xA;code they generate, so compiler developers have a strong incentive to optimize&#xA;code to the greatest extent possible. Sometimes those optimizations can break&#xA;code that is not written with an attentive eye toward the standard; the kernel&#xA;developers‚Äô perspective is that compiler developers will often rely on a&#xA;legalistic reading of standards to justify ‚Äúoptimizations‚Äù that (from the kernel&#xA;developer‚Äôs viewpoint) make no sense and break code needlessly. Highly&#xA;concurrent code, as is found in the kernel, tends to be more susceptible to&#xA;optimization-caused problems than just about anything else. So kernel developers&#xA;have learned to be careful.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;This pressure ‚Äî speed, speed, speed! ‚Äî¬†leads compiler developers to make the&#xA;language opaque, and to break the conceptual integrity of the language in a way&#xA;that can actually make it unsafe and unusable:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;&lt;blockquote&gt;There are too many compiler optimisations for people to reason&#xA;directly in terms of the set of all transformations that they do, so we need&#xA;some more concise and comprehensible envelope identifying what is allowed, as an&#xA;interface between compiler writers and users.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;The C11 standard is meant to be that ‚Äúenvelope,‚Äù though, as Peter admitted,&#xA;it is ‚Äúnot yet fully up to that task.‚Äù But if the remaining uncertainties and&#xA;problems can be addressed, C11 atomics could become a common language with which&#xA;developers can reason about concurrency and allowable optimizations. Developers&#xA;might come to understand the issues better, and kernel code might become a bit&#xA;more widely accessible to developers who understand the standard.&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Cryptographer Dan Bernstein &lt;a&#xA;href=&#34;https://cr.yp.to/talks/2015.04.16/slides-djb-20150416-a4.pdf&#34;&gt;has been&#xA;saying a similar thing&lt;/a&gt;: Do compilers actually &lt;em&gt;need&lt;/em&gt; to produce&#xA;high-performance code, in the general case? Where needed, &lt;em&gt;can&lt;/em&gt; they? And&#xA;if not, is the damage to the language‚Äôs conceptual integrity worth it? He&#xA;contends (as I read him, at least) that the answer to these questions is No:&#xA;Most code is not hot (run often and hence in need of optimization); and, true&#xA;hot spots require optimizations that compilers cannot yet perform ‚Äî only humans,&#xA;locally optimizing, understand their application domain and their machine well&#xA;enough to get a good result. (Bernstein is generally working on cryptographic&#xA;algorithms that he optimizes to work absolutely as well as possible on each&#xA;distinct chip ‚Äî¬†local optimizables that the general-purpose (‚Äòglobal‚Äô, if you&#xA;will) compiler optimizations don‚Äôt really help with.) From Bernstein‚Äôs&#xA;presentation:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;Mike Pall, LuaJIT author, 2011: ‚ÄúIf you write an interpreter loop in&#xA;assembler, you can do much better... There‚Äôs just no way you can reasonably&#xA;expect even the most advanced C compilers to do this on your&#xA;behalf.‚Äù&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Thus it might not be that people need optimizing compilers; instead, they may&#xA;benefit more from dumb-but-conceptually-integral compilers, and more usable&#xA;tools for writing, profiling, and testing hand-written assembly code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think we can learn a few widely-applicable UX design lessons from all this&#xA;compiler talk:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Augment the human, rather than try (and fail) to replace them.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Optimize locally only ‚Äî¬†we know that we don‚Äôt know everything we need to&#xA;know to best serve people.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Check that the local optimizations are actually optimizations.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Never violate the conceptual integrity of the system.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Sometimes it‚Äôs better to give people tools to build their own tools, rather&#xA;than try to build The Ultimate Thing.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2016/01/30/everyone-needs-secure-usability/index.html</guid>
      <pubDate>Sat, 30 Jan 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Against Security Nihilism</title>
      <link>https://noncombatant.org/2016/01/28/against-security-nihilism/index.content</link>
      <description>&lt;h1&gt;Against Security Nihilism&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;28 January 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There‚Äôs a lot of security nihilism in the technology community, and in the&#xA;culture generally. Many people believe that ‚Äúdefense is impossible‚Äù, that&#xA;‚Äúsecurity is a losing battle‚Äù, that nothing can be done, that we should stop&#xA;trying and divert resources spent on security to other worthy things like&#xA;features and performance. There is even nihilism in the security community&#xA;itself ‚Äî although, I suspect, moreso from the offensive side.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I disagree that defensive security is impossible. Yes, the software&#xA;equivalent of this:&lt;/p&gt;&#xA;&#xA;&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/j-zczJXSxnw&#34;&#xA;frameborder=&#34;0&#34; allowfullscreen loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;p&gt;does happen often. However, software engineering, and software security&#xA;engineering in particular, are very young engineering disciplines. Imagine how&#xA;bad bridge building was in year 70; then imagine how bad it was given that&#xA;randos and governments kept trying to destroy them all the time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But in the short time we‚Äôve had to learn how to engineer software, we have&#xA;learned techniques that definitely do work, and some that definitely don‚Äôt. I‚Äôd&#xA;say we‚Äôve learned a lot, fast. And we know we have, all too often, ignored&#xA;things we already knew.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, the early programming language designer C. A. R. Hoare&#xA;recognized that security is really just an ‚Äòextreme‚Äô form of correctness, and&#xA;that a language‚Äôs first duty is to enable programmers to write correct programs.&#xA;In &lt;a&#xA;href=&#34;http://zoo.cs.yale.edu/classes/cs422/2011/bib/hoare81emperor.pdf&#34;&gt;‚ÄúThe&#xA;Emperor‚Äôs Old Clothes‚Äù&lt;/a&gt; he says:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;The first principle was &lt;em&gt;security&lt;/em&gt;: The principle that&#xA;every syntactically incorrect program should be rejected by the compiler and &#xA;that every syntactically correct program should give a result or an error&#xA;message that was predictable and comprehensible in terms of the source&#xA;language program itself. Thus no core dumps should ever be necessary. It was &#xA;logically impossible for any source language program to cause the computer&#xA;to run wild, either at compile time or at run time. A consequence of this&#xA;principle is that every occurrence of every subscript of every subscripted&#xA;variable was on every occasion checked at run time against both the upper&#xA;and the lower declared bounds of the array. Many years later we asked our &#xA;customers whether they wished us to provide an option to switch off these&#xA;checks in the interests of efficiency on production runs. Unanimously, they&#xA;urged us not to ‚Äî they already knew how frequently subscript errors occur on&#xA;production runs where failure to detect them could be disastrous. I note&#xA;with fear and horror that even in 1980, language designers and users have&#xA;not learned this lesson. In any respectable branch of engineering, failure&#xA;to observe such elementary precautions would have long been against the &#xA;law.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;...and yet here we are, in 2016, shipping new software in languages we know&#xA;are unsafe.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Big Problem in security engineering is not that it‚Äôs impossible. I‚Äôd even&#xA;argue that some sound techniques are not even (technically) difficult. Often,&#xA;the problems are economic, political, and even inter-personal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I also often find that software engineers are simply unaware of sound&#xA;security techniques. Even simple things like &lt;a&#xA;href=&#34;https://golang.org/pkg/html/template/&#34;&gt;HTML templating libraries that&#xA;automatically defang HTML metacharacters&lt;/a&gt; ‚Äî which are now common and&#xA;widely-available, and which enable developers to get a solid handle on the XSS&#xA;problem ‚Äî are unknown to many working programmers (!).&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Things We Know Work&lt;/h2&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.lucacardelli.name/Papers/TypefulProg.pdf&#34;&gt;Typeful&#xA;programming&lt;/a&gt;, and &lt;a&#xA;href=&#34;http://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf&#34;&gt;propositions&#xA;as types&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unit_testing&#34;&gt;Unit testing&lt;/a&gt; for&#xA;propositions we can‚Äôt easily represent as types&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Privilege_separation&#34;&gt;Privilege&#xA;separation&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_privilege&#34;&gt;Privilege&#xA;reduction&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_safety&#34;&gt;Memory-safe&#xA;languages&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Type_safety&#34;&gt;Type-safe&#xA;languages&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;http://langsec.org/&#34;&gt;Language-theoretic security&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Choosers to grant resources, rather than broad ambient authority to access&#xA;resources&lt;/li&gt;&#xA;&#xA;&lt;li&gt;APIs resilient against misuse and developer confusion (for example, &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Authenticated_encryption&#34;&gt;AEAD ciphers&lt;/a&gt;;&#xA;consider also high-level languages with real string types instead of the&#xA;standard C library‚Äôs impoverished string handling)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Frequent, &lt;a&#xA;href=&#34;https://www.chromium.org/chromium-os/chromiumos-design-docs/filesystem-autoupdate&#34;&gt;safe&#xA;(A/B)&lt;/a&gt;, signed, and automatic updates&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;https://www.chromium.org/chromium-os/chromiumos-design-docs/firmware-boot-and-recovery&#34;&gt;Authenticating&#xA;the bootstrapping process&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Not overpromising in the UX&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;http://lcamtuf.coredump.cx/afl/&#34;&gt;Fuzzing&lt;/a&gt; and &lt;a&#xA;href=&#34;http://clang.llvm.org/docs/AddressSanitizer.html&#34;&gt;dynamic&#xA;analysis&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Minimizing dependencies&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Defense in depth: 2 mechanisms, each of which could work in principle;&#xA;well-defined and -defended fallback guarantees in case the primary guarantee is&#xA;broken&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Integrating development, operations/deployment, business requirements, and&#xA;QA (see for example &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt;)&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;Things We Know Don‚Äôt Work&lt;/h2&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;a&#xA;href=&#34;http://www.ranum.com/security/computer_security/editorials/dumb/&#34;&gt;Enumerating&#xA;badness&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Antivirus_software&#34;&gt;Evaluating&#xA;Turing-complete languages to infer&lt;/a&gt; an &lt;a&#xA;href=&#34;https://www.ietf.org/rfc/rfc3514.txt&#34;&gt;evil bit&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Layers of cruft, or what I call ‚Äúfalse defense in depth‚Äù (many speedbumps&#xA;don‚Äôt make a wall)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Dis-integrating development, operations/deployment, business requirements,&#xA;and QA&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2016/01/28/against-security-nihilism/index.html</guid>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Episode 72 Of The Code Newbie Podcast</title>
      <link>https://noncombatant.org/2016/01/27/code-newbie-podcast/index.content</link>
      <description>&lt;h1&gt;Episode 72 Of The Code Newbie Podcast&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;27 January 2016&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://bloggytoons.com/&#34;&gt;Saron Yitbarek&lt;/a&gt; interviewed me for the&#xA;&lt;a href=&#34;http://www.codenewbie.org/podcast/security-newbie&#34;&gt;Code Newbie&lt;/a&gt;&#xA;podcast (&lt;a href=&#34;code-newbie-72.mp3&#34;&gt;local copy&lt;/a&gt;) 2 weekends ago, and she&#xA;published it this past Monday. &lt;a href=&#34;http://www.codenewbie.org/&#34;&gt;The Code&#xA;Newbie community&lt;/a&gt; is ‚Äúthe most supportive community of programmers and people&#xA;learning to code‚Äù. &lt;a href=&#34;/2014/07/31/my-curvy-career-trajectory/&#34;&gt;I was&#xA;fortunate&lt;/a&gt; to have a group of friends to learn from and with when I was a&#xA;newbie, and I‚Äôve found that when I lacked such a community, my progress&#xA;faltered.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;While you‚Äôre there, do check out some of the previous episodes. By listening,&#xA;we in the technology community ‚Äî¬†which you may have noticed is skewed white and&#xA;male ‚Äî¬†can learn a lot about what we‚Äôre building, and for whom, and why. We&#xA;won‚Äôt really be living in the future until &lt;em&gt;everyone&lt;/em&gt; is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Saron has done a great job curating and documenting these stories. I have not&#xA;yet listened to all the episodes, but I do plan to. (I can listen to at least&#xA;1.5 per day, on my commute!)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this episode I talk about how I got into software, and security&#xA;specifically, and about how I think the fields are still so new that none of us&#xA;entirely know what we‚Äôre doing. That‚Äôs especially true for security and privacy,&#xA;goals that are not always even clearly defined ‚Äî let alone achieved. I think&#xA;there is still an openness in the field; it‚Äôs very much the the case that a code&#xA;newbie can arrive and make a significant contribution.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2016/01/27/code-newbie-podcast/index.html</guid>
      <pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>‚ÄúAirbag‚Äù</title>
      <link>https://noncombatant.org/2015/12/21/airbag/index.content</link>
      <description>&lt;h1&gt;‚ÄúAirbag‚Äù&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;21 December 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;airbag.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;airbag.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;This weekend I went down to South Pasadena to hang with my friends &lt;a href=&#34;http://shannoncurtis.net/&#34;&gt;Shannon&#xA;        Curtis&lt;/a&gt; and &lt;a href=&#34;http://secretagentaudio.com/&#34;&gt;Jamie Hill&lt;/a&gt;, to record a cover of one of&#xA;    my favorite tunes: ‚ÄúAirbag‚Äù by &lt;a href=&#34;http://www.radiohead.com/&#34;&gt;Radiohead&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Like the narrator of the song, I feel very grateful for having survived many&#xA;    deadly mishaps through incredible luck and incredible technology.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I had a ton of fun working with my talented friends, who have worked hard to&#xA;    create an autonomous zone for music. Dissecting Radiohead‚Äôs complex arrangement&#xA;    was a great learning experience. We stuck pretty close to ‚Äòcanon‚Äô, but I think&#xA;    the things we changed are pretty cool. I‚Äôm very happy with all the performances.&#xA;    The original has lots of Easter eggs for the attentive listener, and we put in&#xA;    some of our own. Listen with headphones!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&#xA;    &lt;strong&gt;Shannon Curtis:&lt;/strong&gt; voice&lt;br /&gt;&#xA;    &lt;strong&gt;Jamie Hill:&lt;/strong&gt; production, engineering, drum programming,&#xA;    synthesizers&lt;br /&gt;&#xA;    &lt;strong&gt;Chris Palmer:&lt;/strong&gt; guitar, bass, synthesizers, voice&#xA;&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2015/12/21/airbag/index.html</guid>
      <pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Some Interface Examples</title>
      <link>https://noncombatant.org/2015/12/13/some-interface-examples/index.content</link>
      <description>&lt;h1&gt;Some Interface Examples&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;13 December 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In &lt;a href=&#34;/2015/12/12/interface-design-principles/&#34;&gt;my previous post on&#xA;    interface design principles&lt;/a&gt;, I sort of assumed that people would know what I&#xA;  meant by ‚Äúprimary interface definition‚Äù. In &lt;a href=&#34;/2014/08/10/security-as-a-class-of-interface-guarantee/&#34;&gt;Security&#xA;    As A&#xA;    Class Of Interface Guarantee&lt;/a&gt; I defined it it as follows:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;The &lt;strong&gt;primary interface definition&lt;/strong&gt; is the immediately&#xA;  accessible surface of the interface itself, e.g. a function or method&#xA;  declaration, an IDL specification or other code generation/specification system&#xA;  for network protocols, the grammar of a programming language, or a user-facing&#xA;  GUI or CLI. A &lt;strong&gt;secondary interface definition&lt;/strong&gt; is supplementary&#xA;  material; usually documentation, annotation, post-facto errata, entries in issue&#xA;  trackers, commit log messages, et c.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Our ideal is, or should be, to make interfaces so simple to use that people&#xA;  can learn them immediately, and use them readily. Additionally, it should be&#xA;  impossible (or at least difficult) to use the interface unsafely. (‚ÄúUnsafety‚Äù&#xA;  could mean whatever you like: deleting important information, not deleting&#xA;  information that the person needs deleted, sending information to the wrong&#xA;  person, not sending information to the right person, crashing the machine, and&#xA;  so on.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A learnable interface explains itself upon contact ‚Äî the person using it has&#xA;  no need of secondary interface definitions such as documentation. Like a&#xA;  screwdriver, the shape of the head either fits or does not fit the screw. If the&#xA;  person somehow manages to crank the wrong screwdriver into a screw head, the&#xA;  damage will be immediate, obvious, and commensurate with how hard the person&#xA;  cranked it. (Unlike so much software that explodes silently, a week&#xA;  later...)&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;screws.jpg&#34; alt=&#34;Picture of screwdrivers and their matching&#xA;screw heads.&#34; width=&#34;456&#34; height=&#34;232&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;From &lt;a href=&#34;http://universalscrewdriver.com/&#34;&gt;Universal Screwdriver&lt;/a&gt;. Maybe we can&#xA;    make software interfaces more universal.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;I also assumed people would know what it means for an interface to be as&#xA;  simple as possible, but no simpler. For example, maybe the &lt;a href=&#34;http://universalscrewdriver.com/&#34;&gt;Universal&#xA;    Screwdriver&lt;/a&gt; really works ‚Äî&#xA;  but maybe it doesn‚Äôt. It seems unlikely to perfectly fit the different types of&#xA;  screw heads. It‚Äôs worth a try, but we should fall back to regular screwdrivers&#xA;  if necessary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are 2 more examples. I am a fan of dialog boxes that really offer&#xA;  choice, rather than the often meaningless &lt;strong&gt;OK&lt;/strong&gt; and&#xA;  &lt;strong&gt;Cancel&lt;/strong&gt; ‚Äònon-dialog‚Äô boxes. Sometimes, those 2 choices are just&#xA;  not enough to give the person what they need.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;3-choice-2.png&#34; alt=&#34;Screenshot of 3 choices when deleting a&#xA;recurring calendar event: Only This Instance, All Following, and All Events In&#xA;The Series.&#34; width=&#34;755&#34; height=&#34;253&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;Screenshot of&#xA;    3 choices when deleting a recurring calendar event: &lt;strong&gt;Only This&#xA;      Instance&lt;/strong&gt;, &lt;strong&gt;All Following&lt;/strong&gt;, and &lt;strong&gt;All Events In The&#xA;      Series&lt;/strong&gt;.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;3-choice-1.png&#34; alt=&#34;Screenshot of 3 choices when exiting a&#xA;text editor: Close Without Saving, Cancel, and Save As.&#34; width=&#34;714&#34; height=&#34;559&#34; loading=&#34;lazy&#34; /&gt;&#xA;  &lt;figcaption&gt;Screenshot of 3 choices when exiting a&#xA;    text editor: &lt;strong&gt;Close Without Saving&lt;/strong&gt;, &lt;strong&gt;Cancel&lt;/strong&gt;, and&#xA;    &lt;strong&gt;Save As&lt;/strong&gt;.&#xA;  &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;The only way to simplify the calendar example would be to over-simplify it:&#xA;  to remove meaningful choices. The safest choice, &lt;strong&gt;Only This&#xA;    Instance&lt;/strong&gt;, is first, followed by the still-pretty-safe &lt;strong&gt;All&#xA;    Following&lt;/strong&gt;. But &lt;strong&gt;All Events In The Series&lt;/strong&gt; is sometimes&#xA;  necessary. And of course, Google Calendar does offer &lt;strong&gt;Undo&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The text editor example could be simplified; for example, Mac OS X&#xA;  TextEdit.app and Google Docs both constantly auto-save. They entirely get rid of&#xA;  the concept of saving, which is great because people throughout the Cyber Age&#xA;  have lost tons of work because they forgot to save. All that remains of the old&#xA;  &lt;strong&gt;Save&lt;/strong&gt;/&lt;strong&gt;Save As...&lt;/strong&gt; paradigm is the&#xA;  still-meaningful &lt;strong&gt;Export...&lt;/strong&gt;, &lt;strong&gt;Rename...&lt;/strong&gt;, and&#xA;  &lt;strong&gt;Make A Copy...&lt;/strong&gt;.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note that auto-saving applications must either automatically name files (&lt;a&#xA;    href=&#34;https://developer.apple.com/library/mac/documentation/General/Conceptual/MOSXAppProgrammingGuide/CoreAppDesign/CoreAppDesign.html&#34;&gt;Mac&#xA;    OS X&lt;/a&gt;; see ‚ÄúThe Document Architecture Provides Many Capabilities for Free‚Äù),&#xA;  or do away with the concept of the filesystem by replacing it with search&#xA;  (Google Drive).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One could argue, as I probably would, that a programmer‚Äôs or engineer‚Äôs text&#xA;  editor still needs a concept of &lt;em&gt;explicit commit&lt;/em&gt;, and hence should not&#xA;  auto-save or at least not auto-name. Therefore, such editors do still need to&#xA;  raise a dialog if there are un-committed buffers on exit; given that, Gedit‚Äôs&#xA;  3-choice dialog seems to fit people‚Äôs needs well. On the other hand, one could&#xA;  argue that the revision control system (e.g. Git; ideally integrated into the&#xA;  editor as in most IDEs) exists to provide explicit commit, and that the editor&#xA;  could and hence should auto-save (possibly into a temporary, private branch in&#xA;  the RCS). But it probably still could not auto-name.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus, even in the case of the engineer‚Äôs text editor, no further&#xA;  simplification is possible. You can move the complexity around, creating 1&#xA;  giant complex system (e.g. Eclipse) or integrating many small tools with&#xA;  glue code (e.g. bash + vim + git), but you can‚Äôt eliminate it without losing&#xA;  something crucial.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Although the examples so far have been of UIs, we can apply the same&#xA;  interface design principles to APIs. APIs are, after all, UIs for engineers.&#xA;  (The same is true of a programming language‚Äôs syntax, and the principles apply&#xA;  there, too.) Consider the &lt;code&gt;get&lt;/code&gt; method of the Java&#xA;  &lt;code&gt;HashMap&lt;/code&gt; class. From &lt;a&#xA;    href=&#34;https://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html#get(java.lang.Object)&#34;&gt;the&#xA;    documentation&lt;/a&gt;:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;  &lt;code&gt;public V get(Object key)&lt;/code&gt;&#xA;&#xA;  &lt;p&gt;Returns the value to which the specified key is mapped, or null if this map&#xA;    contains no mapping for the key.&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;More formally, if this map contains a mapping from a key k to a value v such&#xA;    that (&lt;code&gt;key==null ? k==null : key.equals(k)&lt;/code&gt;), then this method&#xA;    returns v; otherwise it returns &lt;code&gt;null&lt;/code&gt;. (There can be at most one&#xA;    such mapping.)&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;A return value of &lt;code&gt;null&lt;/code&gt; does not &lt;em&gt;necessarily&lt;/em&gt; indicate&#xA;    that the map contains no mapping for the key; it‚Äôs also possible that the map&#xA;    explicitly maps the key to &lt;code&gt;null&lt;/code&gt;. The &lt;code&gt;containsKey&lt;/code&gt;&#xA;    operation may be used to distinguish these two cases.&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;&lt;strong&gt;Specified by:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;&lt;code&gt;get&lt;/code&gt; in interface &lt;code&gt;Map&amp;lt;K,V&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;&lt;strong&gt;Overrides:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;&lt;code&gt;get&lt;/code&gt; in class &lt;code&gt;AbstractMap&amp;lt;K,V&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;key - the key whose associated value is to be returned&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;the value to which the specified key is mapped, or &lt;code&gt;null&lt;/code&gt; if this&#xA;    map contains no mapping for the key&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;&lt;strong&gt;See Also:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;  &lt;p&gt;&lt;code&gt;put(Object, Object)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Look how verbose the documentation is. Part of the verbosity is ‚Äònecessary‚Äô&#xA;  to explain the interface‚Äôs unfortunate ambiguity (the meaning of a&#xA;  &lt;code&gt;null&lt;/code&gt; return value), and part of the verbosity is gratuitous (the&#xA;  meaning of the &lt;code&gt;key&lt;/code&gt; parameter, whose name and type make it obvious&#xA;  to a reader who has read and understood the &lt;code&gt;Map&lt;/code&gt; interface).&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Note also that the documentation as verbose as it is, does not explain the&#xA;  exceptions that the implementation might throw. The reader has to follow the &lt;a&#xA;    href=&#34;http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#get(java.lang.Object)&#34;&gt;links&#xA;    up the inheritance chain to find the exceptions&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Still, this interface does have the virtue of explaining itself immediately&#xA;  upon contact, somewhat like the screwdriver. Compare it to Python‚Äôs online&#xA;  help:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;&gt;&gt;&gt; &lt;strong&gt;help({}.__getitem__)&lt;/strong&gt;&#xA;Help on built-in function __getitem__:&#xA;&#xA;__getitem__(...)&#xA;    x.__getitem__(y) &lt;==&gt; x[y]&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;And of course, Python exceptions are all run-time exceptions; there is no&#xA;  equivalent of Java‚Äôs checked exceptions (which make up part of the declared and&#xA;  statically-checked type of an interface).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Between these extremes of annoying verbosity and useless terseness, there is&#xA;  the admirably concise but eye-rollingly gnomic &lt;a&#xA;    href=&#34;https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system&#34;&gt;Hindley-Milner&#xA;    type system&lt;/a&gt; notation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It‚Äôs easy to imagine, and in C++ and Java easy to actually achieve, interface&#xA;  definitions that explain themselves concisely like Hindley-Milner, but without&#xA;  the gnomic Greek. For example, a better &lt;code&gt;Map.get&lt;/code&gt; in Java:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;public V get(K key) throws NoSuchKeyException&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Or, if you dislike exceptions and like Maybe types as I do,&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;public MaybeV get(K key)&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Either way, the interface explains itself in 1 concise line, without the&#xA;  ambiguity of &lt;code&gt;null&lt;/code&gt;, with no need for verbosity, and with no need to&#xA;  crawl up the inheritance chain for more clues. Just as the labels in buttons&#xA;  like &lt;strong&gt;All Events In The Series&lt;/strong&gt; and &lt;strong&gt;Close Without&#xA;    Saving&lt;/strong&gt; explain themselves concisely, the names of types and identifiers&#xA;  explain themselves to readers who have understood the 1-paragraph definitions of&#xA;  &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Maybe&lt;/code&gt;. Callers that violate the interface&#xA;  simply won‚Äôt compile, let alone run ‚Äî no nasty run-time surprises like in&#xA;  Python.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(Note that in defining the key type &lt;code&gt;K&lt;/code&gt; as the argument type of&#xA;  &lt;code&gt;get&lt;/code&gt;, we avoid another ambiguity in the Java &lt;code&gt;Map&lt;/code&gt;&#xA;  interface: the possibility of &lt;code&gt;ClassCastException&lt;/code&gt; (&lt;a&#xA;    href=&#34;https://docs.oracle.com/javase/7/docs/api/java/util/Map.html#get(java.lang.Object)&#34;&gt;documented&#xA;    as ‚Äúoptional‚Äù&lt;/a&gt;). Recall from the documentation above that Java‚Äôs&#xA;  &lt;code&gt;Map.get&lt;/code&gt; takes &lt;code&gt;Object&lt;/code&gt; as the argument type ‚Äî which may&#xA;  not correctly cast, at run-time (!), to &lt;code&gt;K&lt;/code&gt;.)&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There is a whole rant to be written on another topic I touched on in the last&#xA;  post: Whether or not an interface‚Äôs guarantee is &lt;em&gt;computable&lt;/em&gt;. But, it&#xA;  will have to wait; for now, it is time to compose these 2 interfaces:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;class Person {&#xA;  // ...&#xA;  MaybeSatisfaction eat(Eatable* eatable) mutable;&#xA;  // ...&#xA;}&#xA;&#xA;class ChocolateChipPancake : public Eatable {&#xA;  // ...&#xA;}&#xA;&lt;/pre&gt;</description>
      <author>Chris Palmer</author>
      <guid>2015/12/13/some-interface-examples/index.html</guid>
      <pubDate>Sun, 13 Dec 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Interface Design Principles</title>
      <link>https://noncombatant.org/2015/12/12/interface-design-principles/index.content</link>
      <description>&lt;h1&gt;Interface Design Principles&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;12 December 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For any kind of interface. See also: &lt;a&#xA;href=&#34;/2014/08/10/security-as-a-class-of-interface-guarantee/&#34;&gt;Security As A&#xA;Class Of Interface Guarantee&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Provide choices ‚Äî not warnings or notifications.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Provide contextually-relevant choices ‚Äî&#xA;&#xA;  &lt;ul&gt;&#xA;  &lt;li&gt;but not relying on context that only a strong AI could perceive;&lt;/li&gt;&#xA;  &lt;li&gt;don‚Äôt confuse mere statistics for strong AI;&lt;/li&gt;&#xA;  &lt;li&gt;don‚Äôt use implicit context to take away relevant choices.&lt;/li&gt;&#xA;  &lt;/ul&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Make the interface as simple as possible ‚Äî but no simpler.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Assume that the people using the interface are intelligent and motivated ‚Äî&#xA;but busy and focused on their ultimate goal.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Promise only computable guarantees.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Prefer to surface all guarantees in the primary interface definition ‚Äî&#xA;callers are unlikely to consult secondary definitions.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2015/12/12/interface-design-principles/index.html</guid>
      <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>What Is HPKP For?</title>
      <link>https://noncombatant.org/2015/11/24/what-is-hpkp-for/index.content</link>
      <description>&lt;h1&gt;What Is HPKP For?&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;24 November 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;    &lt;p&gt;Note: Slightly edited for clarity 25 Nov 2015 03:40 UTC.&lt;/p&gt;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;Every time &lt;a href=&#34;https://www.duosecurity.com/blog/dude-you-got-dell-d-publishing-your-privates&#34;&gt;something&#xA;        like this happens&lt;/a&gt; (&lt;a href=&#34;/2015/02/21/superfish-round-up/&#34;&gt;...again&lt;/a&gt;),&#xA;    people start clamoring for public key pinning to ‚Äòsolve‚Äô the problem.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The core problem here is that, although the people who bought the computers&#xA;    did not want a certificate installed that makes MITM attacks easy, the computer&#xA;    vendors sold them that way anyway. The people who bought the computers did not,&#xA;    in effect, really have full ownership of what they bought. Additionally, people&#xA;    did not come to realize this until many months after the computers were sold!&#xA;    (See also &lt;a&#xA;        href=&#34;http://arstechnica.com/security/2015/11/dell-does-superfish-ships-pcs-with-self-signed-root-certificates/&#34;&gt;Ars&#xA;        Technica‚Äôs coverage&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;People who want HPKP to solve the problem wish that, when setting public key&#xA;    pins, servers should be able to expect clients to perform Pin Validation&#xA;    unconditionally ‚Äî to &lt;em&gt;always&lt;/em&gt; obey the server‚Äôs requirements, regardless&#xA;    of the client‚Äôs configuration. Even, if necessary, taking priority over the&#xA;    requirements of the client machine‚Äôs owner. This would be a weak form of Remote&#xA;    Attestation. The goal, in this case, is to make things like the Superfish and&#xA;    Dell certificates ineffective for use in attacks or mischief: the interloper&#xA;    certificates just wouldn‚Äôt work, and would hence be discovered immediately.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, it is not possible for a low-privilege application to defend against&#xA;    the platform it runs on, if the platform is intent on undermining the&#xA;    application‚Äôs expectations. To try would be futile, and would necessarily also&#xA;    violate a crucial digital rights principle: The computer‚Äôs owner should get to&#xA;    decide how the computer behaves. Dell and Lenovo let their customers down in&#xA;    that way, but for better and for worse, it‚Äôs not something that a web browser&#xA;    can fix.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Our idea when designing HPKP was to &lt;a href=&#34;/2015/05/01/about-http-public-key-pinning/&#34;&gt;allow a site to reduce the&#xA;        number of issuers that can issue certificates for the site&lt;/a&gt; ‚Äî assuming the&#xA;    client is not already compromised. We assumed that because we must: as &lt;a&#xA;        href=&#34;https://www.chromium.org/Home/chromium-security/security-faq&#34;&gt;the Chromium&#xA;        Security FAQ&lt;/a&gt; and &lt;a&#xA;        href=&#34;http://blogs.technet.com/b/rhalbheer/archive/2011/06/16/ten-immutable-laws-of-security-version-2-0.aspx&#34;&gt;Microsoft‚Äôs&#xA;        10 Immutable Laws Of Security&lt;/a&gt; document, if a computer‚Äôs operating system is&#xA;    compromised, there is nothing certain that a mere userland application ‚Äî which&#xA;    must depend on the underlying layers, including the OS ‚Äî can do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Specifically, browsers do not perform Pin Validation when the presented&#xA;    certificate chain chains up to a locally-installed, ‚Äòprivate‚Äô, or ‚Äònon-system‚Äô&#xA;    trust anchor. (Microsoft ships a standard set of trust anchors for the system,&#xA;    but also enables the system‚Äôs administrators/owners to install additional, local&#xA;    anchors.) There are 3 reasons for this:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;There are legitimate reasons to proxy TLS connections ‚Äî &lt;a href=&#34;http://www.telerik.com/fiddler&#34;&gt;not least of&#xA;            which is debugging&lt;/a&gt;.&#xA;        Personally I am extremely skeptical of the value of AV/IDS/IPS/DLP proxies, but&#xA;        some people use them on the computers they own. To them, that‚Äôs legitimate use,&#xA;        too.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;A user program cannot defend against software running at the same or a&#xA;        higher level of privilege, and it is pointless to try. The effort will be either&#xA;        entirely wasted, or will outweigh any marginal, temporary gains.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Computers should do what their owners want, or at least give the owner&#xA;        priority over the desires of a remote server operator.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;All the same, people seem to wish that servers could say to clients, ‚ÄúHere&#xA;    are my expected keys, and you should fail to connect to me if I seem to present&#xA;    different keys, &lt;em&gt;even if the person who owns the computer wants to connect&#xA;        anyway&lt;/em&gt;.‚Äù That would be beneficial in that non-consensual proxying would be&#xA;    exposed sooner and with somewhat more certainty. But if a server could get such&#xA;    a guarantee, it could also be used in ways very much counter to the open&#xA;    Internet we know and love. Thus, frankly, I‚Äôm glad that Remote Attestation is&#xA;    impossible. (Or, if you prefer, so impractical and theoretical as to be&#xA;    impossible for now.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are many, many ways in which the higher-privilege operating system or&#xA;    other software can force the lower-privilege client program to connect through a&#xA;    proxy, in spite of a hypothetical ‚Äòstrict‚Äô HPKP behavior. Here are a few&#xA;    examples ‚Äî I don‚Äôt imagine this list is exhaustive:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;Installing a new trust anchor in the local store&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Installing a new trust anchor in the system store&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Injecting a DLL that overrides the usual Pin Validation and X.509 validation&#xA;        code&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Overwriting the application‚Äôs code on disk&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Overwriting the application‚Äôs code in memory at run-time&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Installing a &lt;a href=&#34;https://en.wikipedia.org/wiki/Layered_Service_Provider&#34;&gt;layered service&#xA;            provider&lt;/a&gt; (LSP)&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The ironic thing is that, if clients did implement the ‚Äòstrict‚Äô form of Pin&#xA;    Validation, many of the same people who are now calling for it would either&#xA;    resort to the above means to do their legitimate proxying, or would buy their&#xA;    proxy software from someone who does.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2015/11/24/what-is-hpkp-for/index.html</guid>
      <pubDate>Tue, 24 Nov 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>What Is A ‚ÄòPermission‚Äô?</title>
      <link>https://noncombatant.org/2015/10/28/what-is-a-permission/index.content</link>
      <description>&lt;h1&gt;What Is A ‚ÄòPermission‚Äô?&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;27 October 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;    &lt;p&gt;Updated 28 October 2015 to clarify a bit, and to elaborate on what&#xA;        choosers provide.&lt;/p&gt;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;Every application platform needs to decide on 1 or more &lt;em&gt;protection&#xA;        mechanisms&lt;/em&gt; to protect &lt;em&gt;principals&lt;/em&gt; from each other ‚Äî and thereby to&#xA;    protect the &lt;em&gt;assets&lt;/em&gt; that the principals operate on. (If you are&#xA;    wondering what those words mean, start by reading the classic &lt;a&#xA;        href=&#34;http://www.cs.virginia.edu/~evans/cs551/saltzer/&#34;&gt;‚ÄúThe Protection Of&#xA;        Information In Computer Systems‚Äù&lt;/a&gt; by Saltzer and Schroeder.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Of course, platforms don‚Äôt &lt;em&gt;need&lt;/em&gt; to provide a protection mechanism; I&#xA;    was being a bit hyperbolic in the previous paragraph. For example, DOS and Mac&#xA;    OS Classic had no protection mechanisms. But, well, they‚Äôre dead, aren‚Äôt they?&#xA;    It‚Äôs no coincidence: they are dead in part due to their lack of protection.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, platforms need to provide some protection mechanism to be viable on the&#xA;    modern internet. This includes &lt;a href=&#34;https://en.wikipedia.org/wiki/Open_Web_Platform&#34;&gt;the Open Web Platform&lt;/a&gt;&#xA;    (OWP). As a Chrome security engineer, I am obviously interested in what&#xA;    protection mechanisms the OWP provides; as a Chrome secure usability engineer, I&#xA;    am interested in how well people can understand and use those protection&#xA;    mechanisms, and how we can improve their effectiveness and usability.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most platforms, including the OWP, use a hybrid design in which more than 1&#xA;    protection mechanism is at play. As we‚Äôll see, there are reasons for this.&#xA;    However, the more mechanisms there are, the more complicated their interaction&#xA;    and the more complicated the overall system. That complexity makes it more&#xA;    difficult it is for the system‚Äôs designers, developers, and users to build&#xA;    accurate mental models of the system.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus, we should like to have a ‚Äòpure‚Äô system: a system that uses a single,&#xA;    solid, understandable protection mechanism. When that is not possible, the&#xA;    system should strive to make 1 of the mechanisms primary, and use the other&#xA;    mechanism(s) to bootstrap the primary mechanism.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the context of the OWP, we want to understand what we call ‚Äòpermissions‚Äô:&#xA;    special powers that the person browsing a web origin gives to that origin, such&#xA;    as the ability to determine the person‚Äôs computer‚Äôs geolocation, to read and&#xA;    upload a file from the computer‚Äôs local storage, to listen on the computer‚Äôs&#xA;    microphone, and so on.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Definitions&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;A &lt;em&gt;permission&lt;/em&gt; is a (possibly persistent, possibly ephemeral)&#xA;    capability grant. Think of a &lt;code&gt;Permission&lt;/code&gt; as a hypothetical abstract&#xA;    superclass that the hypothetical subclasses &lt;code&gt;ObjectCapability&lt;/code&gt; and&#xA;    &lt;code&gt;SymbolicCapability&lt;/code&gt; implement. I‚Äôll try to explain what I mean by&#xA;    that in the rest of this post.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I use the term &lt;em&gt;capability&lt;/em&gt; in the sense of a &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Capability-based_security&#34;&gt;capability-based&#xA;        protection mechanism&lt;/a&gt; (as opposed to an &lt;a href=&#34;https://en.wikipedia.org/wiki/Access_control_list&#34;&gt;access&#xA;        control&#xA;        list-based protection mechanism&lt;/a&gt;). (In other contexts ‚Äòcapability‚Äô can mean&#xA;    other things ‚Äî naming things remains a Hard Problem in computing science.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The key features of capabilities are:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;&lt;strong&gt;Unforgeability&lt;/strong&gt;: A process cannot falsely claim to hold a&#xA;        capability. The system will detect and reject false claims.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;&lt;strong&gt;Transferability&lt;/strong&gt;: A process can (generally) pass a&#xA;        capability on to another process. In some systems (‚Äòpure‚Äô capability systems),&#xA;        this may be the only way any process ever gets any capabilities.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;&lt;strong&gt;Inherent authorization&lt;/strong&gt;: A process that holds a capability&#xA;        is &lt;em&gt;by that fact alone&lt;/em&gt; known to be authorized to use the capability.&#xA;&#xA;        &lt;blockquote&gt;In some systems, that is not true, or sometimes not true. &lt;a&#xA;                href=&#34;http://blogs.technet.com/b/markrussinovich/archive/2005/10/19/the-bypass-traverse-checking-or-is-it-the-change-notify-privilege.aspx&#34;&gt;Windows&#xA;                includes an option to re-check that the bearer of a capability is still&#xA;                authorized on each access&lt;/a&gt;. This setting is almost always disabled ‚Äî except&#xA;            in Chrome‚Äôs sandboxed renderer processes! Weird but true.&lt;/blockquote&gt;&#xA;    &lt;/li&gt;&#xA;&#xA;    &lt;li&gt;&lt;strong&gt;Opacity&lt;/strong&gt;: A capability is some kind of opaque reference ‚Äî&#xA;        the value of the reference has no special meaning to its holder. Different&#xA;        processes holding the same capability might possibly have different opaque&#xA;        representations of a reference to the same underlying object. (Compare e.g. a&#xA;        pointer in C, on which the ++ operator is meaningful, to a POSIX file&#xA;        descriptor.) Opacity and unforgeability are closely related but distinct.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;By contrast, &lt;em&gt;access control list&lt;/em&gt;-based mechanisms have only&#xA;    unforgeability. As an example, consider the POSIX file permissions model (which&#xA;    is relatively simple, compared to e.g. Windows). For each file, there are 3&#xA;    principals: the user-owner, the group-owner, and ‚Äòother‚Äô (all other principals).&#xA;    Each principal has 0 or more of 3 access rights on the file: read, write, or&#xA;    execute. Whenever a process tries to &lt;code&gt;open&lt;/code&gt; the file, the operating&#xA;    system kernel checks the process‚Äô principal (user ID and group ID) against the&#xA;    file‚Äôs access control list.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;$ &lt;strong&gt;ls -l /Music/Thelonious\ Monk/Brilliant\ Corners/&lt;/strong&gt;&#xA;total 48392&#xA;-rwxr-xr-x 1 chris chris  8392333 Sep  8  2009 01 Brilliant Corners.mp3&#xA;-rwxr-xr-x 1 chris chris 15283234 Sep  8  2009 02 Ba-Lue Bolivar Ba-Lues-Are.mp3&#xA;-rwxr-xr-x 1 chris chris 10443816 Sep  8  2009 03 Pannonica.mp3&#xA;-rwxr-xr-x 1 chris chris  7029272 Sep  8  2009 04 I Surrender, Dear.mp3&#xA;-rwxr-xr-x 1 chris chris  8395820 Sep  8  2009 05 Bemsha Swing.mp3&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The user &lt;strong&gt;chris&lt;/strong&gt; can read, write, and execute these MP3 files;&#xA;    any user in the &lt;strong&gt;chris&lt;/strong&gt; group can read or execute them; and any&#xA;    other user can read or execute them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;User &lt;strong&gt;chris&lt;/strong&gt; can change the permissions:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;$ &lt;strong&gt;chmod -x /Music/Thelonious\ Monk/Brilliant\ Corners/*&lt;/strong&gt;&#xA;$ &lt;strong&gt;ls -l /Music/Thelonious\ Monk/Brilliant\ Corners/&lt;/strong&gt;&#xA;total 48392&#xA;-rw-r--r-- 1 chris chris  8392333 Sep  8  2009 01 Brilliant Corners.mp3&#xA;-rw-r--r-- 1 chris chris 15283234 Sep  8  2009 02 Ba-Lue Bolivar Ba-Lues-Are.mp3&#xA;...&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;including granting write access to ‚Äòother‚Äô:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;$ &lt;strong&gt;chmod o+w /Music/Thelonious\ Monk/Brilliant\ Corners/*&lt;/strong&gt;&#xA;$ &lt;strong&gt;ls -l /Music/Thelonious\ Monk/Brilliant\ Corners/&lt;/strong&gt;&#xA;total 48392&#xA;-rwxr-xrwx 1 chris chris  8392333 Sep  8  2009 01 Brilliant Corners.mp3&#xA;-rwxr-xrwx 1 chris chris 15283234 Sep  8  2009 02 Ba-Lue Bolivar Ba-Lues-Are.mp3&#xA;...&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;which is kind of like transferability. But it‚Äôs better to read&#xA;    transferability as meaning ‚Äútransference to a &lt;em&gt;specific&lt;/em&gt; process or&#xA;    principal‚Äù. And we can see that this is not possible with POSIX file&#xA;    permissions:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;$ &lt;strong&gt;grep nobody /etc/passwd&lt;/strong&gt;&#xA;nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin&#xA;$ &lt;strong&gt;chown nobody /Music/Thelonious\ Monk/Brilliant\ Corners/*&lt;/strong&gt;&#xA;chown: changing ownership of ‚Äò/Music/Thelonious Monk/Brilliant Corners/01 Brilliant Corners.mp3‚Äô: Operation not permitted&#xA;chown: changing ownership of ‚Äò/Music/Thelonious Monk/Brilliant Corners/02 Ba-Lue Bolivar Ba-Lues-Are.mp3‚Äô: Operation not permitted&#xA;...&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;A good example of transferability is &lt;a&#xA;        href=&#34;http://blog.varunajayasiri.com/passing-file-descriptors-between-processes-using-sendmsg-and-recvmsg&#34;&gt;sending&#xA;        a file descriptor from 1 process to another over a UNIX domain socket using&#xA;        &lt;code&gt;sendmsg&lt;/code&gt; and &lt;code&gt;recvmsg&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Prefer Capabilities Over ACLs&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;On the web platform we would like to use a capability-based protection&#xA;    mechanism to the greatest extent possible, rather than an ACL-based mechanism.&#xA;    There are a few reasons for this.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Capabilities Make For Good UX&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Capabilities are a good fit for a well-known secure UX pattern: the&#xA;    &lt;em&gt;chooser&lt;/em&gt;. An untrustworthy process (like a web renderer) can ask a&#xA;    trustworthy process (like the browser) for a capability (say, a file descriptor&#xA;    from which to read data to upload to the web origin). Only the trustworthy&#xA;    process can grant it. The trustworthy process shows the person a chooser UX, the&#xA;    person selects a file (or, no file), and the trustworthy process opens the file&#xA;    and passes the descriptor to the untrustworthy process. The untrustworthy&#xA;    process has no ambient authority, and the user gets an understandable,&#xA;    empowering interface to selectively grant authority.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;chooser-example.png&#34; loading=&#34;lazy&#34; width=&#34;852&#34; height=&#34;679&#34; alt=&#34;A screenshot of a file chooser&#34; /&gt;&#xA;    &lt;figcaption&gt;The return value of the file&#xA;        chooser UX flow is, or should be, a file descriptor or other&#xA;        capability.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Choosers can let people choose much more than just files and directories. A&#xA;    chooser can return any kind of object. Everything that a computer program can&#xA;    represent can be handled as an &lt;em&gt;object capability&lt;/em&gt;: any kind of &lt;a&#xA;        href=&#34;https://technet.microsoft.com/en-us/library/cc781716(v=ws.10).aspx&#34;&gt;&lt;em&gt;securable&#xA;            object&lt;/em&gt;&lt;/a&gt; that the operating system can process; any kind of function,&#xA;    object, closure, or continuation.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Additionally, choosers can grant specific objects at a specific time in a&#xA;    specific context. For example, maybe you would like to grant hangouts.google.com&#xA;    access to the external USB camera just this once, not all the time. Choosers&#xA;    make that easy; by contrast, setting an ACL on &lt;code&gt;/dev/camera&lt;/code&gt; may turn&#xA;    out to be a surprisingly broad grant.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;ACLs Can Make For Bad UX&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;ACLs are a pain in the ass (a) generally; (b) especially when the principals&#xA;    are complex (as web origins + Chrome profiles + people are); and (c) when the&#xA;    principals are numerous (how many web origins do you visit? 90 billion per&#xA;    day).&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Namespaces Are Ambient Authority&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The ambient namespace that most ACL-based mechanisms provide (e.g. the&#xA;    filesystem, the namespace of named pipes on Windows, et c.) often turns out to&#xA;    provide more information and authority to untrustworthy processes than the&#xA;    person intended. For example, the pathnames themselves might give away&#xA;    information, ACLs have a notable tendency to diverge from the intended&#xA;    permission grant (because they impose a maintenance burden), et c.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Closing the gaps left open in ACL-based systems has proved difficult and&#xA;    inelegant. (See e.g. &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb625963.aspx&#34;&gt;Windows integrity&#xA;        levels&lt;/a&gt;, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Security-Enhanced_Linux&#34;&gt;SELinux&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;‚ÄúApplications can be designed to run at a low integrity level.&#xA;    Protected Mode Internet Explorer is an example of a Windows Vista application&#xA;    that is designed to run at low integrity. Applications at low integrity might&#xA;    need folders in the file system where they can write temporary files or&#xA;    application data. In the case of Protected Mode Internet Explorer, the Temporary&#xA;    Internet File folder in the user‚Äôs profile is used. How can a low application&#xA;    write to a file system folder? The folder must be assigned an explicit mandatory&#xA;    label that permits write access from a low integrity process.‚Äù ‚Äî &lt;a&#xA;        href=&#34;https://msdn.microsoft.com/en-us/library/bb625963.aspx&#34;&gt;MSDN, ‚ÄúWindows&#xA;        Integrity Mechanism Design‚Äù&lt;/a&gt;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;ACLs (especially highly &lt;a href=&#34;https://technet.microsoft.com/en-us/library/cc781716(v=ws.10).aspx&#34;&gt;complex&#xA;        ACLs like in Windows&lt;/a&gt;) have proved to be hard to use. By contrast, choosers&#xA;    are so easy to use they are now nearly invisible ‚Äî even engineers often don‚Äôt&#xA;    realize how large of a problem they handily solve.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Ephemeral vs. Persistent Capabilities&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Normally, ‚Äúcapability‚Äù means &lt;em&gt;object capability&lt;/em&gt; (such as a POSIX file&#xA;    descriptor, a Windows &lt;code&gt;HANDLE&lt;/code&gt;, a Python object reference, et c.).&#xA;    However, in the context of the web platform, we often need to persist&#xA;    capabilities across instantiations of the principal. That is, different renderer&#xA;    processes running the origin (https, www.example.com, 443) on behalf of profile&#xA;    1 owned by chris@goatbeast.localdomain might all need to get a reference to the&#xA;    same capability, even across browser restart or computer reboot.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For persistent capabilities, we need to persist a symbolic representation: a&#xA;    &lt;em&gt;symbolic capability&lt;/em&gt; instead of an object cap. (This is a limitation of&#xA;    the memory persistence mechanisms in common operating systems, not of objects&#xA;    caps themselves; see below.) There must be a way to bootstrap the symbolic cap&#xA;    into an object cap. 1 way to do this is with an ACL, although ACLs are not&#xA;    the only way to achieve this.&#xA;&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;Cryptographic capabilities are another form of symbolic cap that a&#xA;    process can bootstrap into an object cap; for example, consider encrypted and&#xA;    integrity protected HTTP cookies that store the session state. In effect, this&#xA;    cookie is an opaque, transferable reference to the next continuation in the&#xA;    session ‚Äî a persistent capability that requires no ACL to bootstrap. ‚Äî &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Capability-based_security#Sharing_of_capabilities_between_processes&#34;&gt;Wikipedia,&#xA;        ‚ÄúCapability-based security‚Äù&lt;/a&gt;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;In Chrome, we persist capabilities as symbolic caps coupled with a simple&#xA;    form of ACL. In this picture, the &lt;strong&gt;Hostname Pattern&lt;/strong&gt; names a&#xA;    (group of) origins, and the &lt;strong&gt;Behavior&lt;/strong&gt; describes the access&#xA;    grant.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;permission-list.png&#34; width=&#34;555&#34; height=&#34;357&#34; loading=&#34;lazy&#34;&#xA;        alt=&#34;A screenshot of Chrome‚Äôs ACL for the Notifications API&#34; /&gt;&#xA;    &lt;figcaption&gt;This is&#xA;        an ACL for persisted, symbolic capabilities to the browser‚Äôs Notifications&#xA;        API.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Finally, if we had &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Persistence_(computer_science)#Orthogonal_or_transparent_persistence&#34;&gt;operating&#xA;        systems that could persist the live object graphs of processes&lt;/a&gt;, we wouldn‚Äôt&#xA;    need the bootstrapping step, and we could have all object caps all the time.&#xA;    When booting up, the operating system would resuscitate a live object graph from&#xA;    non-volatile storage into working memory, and all object capabilities would be&#xA;    live. That would be nice and fancy, but it‚Äôs not strictly necessary. ACLs can be&#xA;    a perfectly good way to bootstrap caps ‚Äî &lt;em&gt;if and only if bootstrapping is the&#xA;        only action that uses ACLs&lt;/em&gt;. (Consider the design of POSIX, which has both&#xA;    &lt;code&gt;stat&lt;/code&gt; and &lt;code&gt;fstat&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt; and&#xA;    &lt;code&gt;openat&lt;/code&gt;, &lt;code&gt;unlink&lt;/code&gt; but not &lt;code&gt;funlink&lt;/code&gt;, and so&#xA;    on. It would be better ‚Äî ‚Äúmore cappy‚Äù ‚Äî if POSIX provided only&#xA;    &lt;code&gt;openat&lt;/code&gt;, &lt;code&gt;fstat&lt;/code&gt;, &lt;code&gt;funlink&lt;/code&gt;, and so on.) For&#xA;    example, all sorts of &lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use&#34;&gt;time-of-check/time-of-use&lt;/a&gt;&#xA;    (TOCTOU) and other vulnerable race conditions are a direct result of operations&#xA;    on file pathnames (symbolic capabilities) rather than on file descriptors (live&#xA;    object capabilities).&#xA;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Therefore&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Hybrid ACL/cap platforms should strive to use only object capabilities&#xA;    wherever possible. Where persistence is necessary, we should persist symbolic&#xA;    capabilities and ACLs which we use only to bootstrap live object caps.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Stay Tuned&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I‚Äôve got a draft half-written that talks about a few other protection&#xA;    mechanisms, and their engineering trade-offs.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2015/10/28/what-is-a-permission/index.html</guid>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>A New (?) Guitar Circuit</title>
      <link>https://noncombatant.org/2015/10/10/new-guitar-circuit/index.content</link>
      <description>&lt;h1&gt;A New (?) Guitar Circuit&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;10 October 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I love the trivial yet effective circuitry of an electric guitar or bass.&#xA;That sweet spot of usefulness and simplicity pretty much defines my aesthetic&#xA;sense for all things!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Guitar_wiring&#34;&gt;basic guitar&#xA;circuit&lt;/a&gt; has just a few elements, all 1930s technology:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;1 ‚Äì 3 passive magnetic pickups&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Passive cut master volume potentiometer (‚Äúpot‚Äù), or 1 passive volume for&#xA;each pickup&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Passive cut master tone control (low-pass filter: 1 pot and 1 capacitor), or&#xA;1 passive tone for each pickup&lt;/li&gt;&#xA;&#xA;&lt;li&gt;If more than 1 pickup, switch(es) to select between the pickups&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;There are many possible combinations of these simple elements, and many&#xA;possible embellishments.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Switches to enable or disable each pickup individually, allowing all&#xA;possible pickup combinations&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Switches to disable 1 of the coils of a double-coil pickup&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Switches to run 2 pickup coils in either parallel or series&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Active tone control circuits (most common on basses, where they really&#xA;help)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Pickup blend pots&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;So anyway, I had a dream last night of a circuit I think might be&#xA;surprisingly useful while still being very simple. I imagined this circuit for a&#xA;2-pickup guitar like a Telecaster or Les Paul, but I bet it could be adapted for&#xA;guitars with 3 pickups, or a single 2-coil pickup, or whatever.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Neck pickup (any type)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Bridge pickup (any type)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Volume 1, for 1 pickup&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Volume 2, for the other pickup&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Master tone control&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Switch to control which volume control controls which pickup&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;With this circuit, the player can blend the 2 pickups in any combination,&#xA;e.g. bridge alone, neck alone, both at full volume, neck at full volume and&#xA;bridge at half, et c.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Furthermore, the player can reverse the blend by throwing the volume control&#xA;switch ‚Äî if volume 1 is on 10 and volume 2 is on 0, it‚Äôs a traditional pickup&#xA;selector. But it could also change the sound from neck volume 10 + bridge volume&#xA;5 ‚Üí neck volume 5 + bridge volume 10, or other pickup blends.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For visual cleanliness and (I think) playability, the volume control switch&#xA;should be packaged together with volume 1 in a &lt;a&#xA;href=&#34;http://www.warmoth.com/Push-Push-Pot-500k-with-DPDT-Switch-On-On-P732.aspx&#34;&gt;push-push&#xA;pot&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As an embellishment, you can imagine additional switches to change the 2&#xA;pickups to be in series or parallel, or to coil-tap the pickups, and so on. You&#xA;could also use the switch in a push-push pot to take that pot in or out of the&#xA;circuit. The extreme form of the idea would be for all 3 pots to have a&#xA;push-push switch, and use each switch for something.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2015/10/10/new-guitar-circuit/index.html</guid>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Review: Tech 21 Fly Rig 5</title>
      <link>https://noncombatant.org/2015/09/26/fly-rig-5-review/index.content</link>
      <description>&lt;h1&gt;Review: Tech 21 Fly Rig 5&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;26 September 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I hate guitar amplifiers. They‚Äôre heavy, unwieldy, noisy, highly directional,&#xA;    and too loud. I obviously can‚Äôt play through an amplifier in my apartment. I&#xA;    live in SF, so driving to gigs is a drag because parking; yet there‚Äôs no chance&#xA;    I could take an amp on public transport. I‚Äôve longed for a more convenient&#xA;    alternative that still produces good tone.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To solve this problem, I bought a bunch of pre-amps and speaker emulators to&#xA;    and the winner is the &lt;a href=&#34;http://www.tech21nyc.com/products/sansamp/flyrig.html&#34;&gt;Tech 21 Fly Rig&#xA;        5&lt;/a&gt;. I might review the runners-up in a later post. Here, I‚Äôll talk about the&#xA;    Fly Rig.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Fly Rig, along with everything else I need, fits in my guitar case. This&#xA;    is now all I need to bring to rehearsal and gigs:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;guitar-rig.jpg&#34; alt=&#34;My complete guitar rig&#34; width=&#34;1000&#34; height=&#34;750&#34; loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;My complete gig-ready guitar rig: &lt;a href=&#34;http://www.warmoth.com/&#34;&gt;Warmoth&lt;/a&gt; Strat, Tech 21 Fly Rig&#xA;        5, clip-on&#xA;        tuner, extra strings, picks, ear plugs. I quite like the &lt;a&#xA;            href=&#34;http://www.skbcases.com/music/products/proddetail.php?id=775&#34;&gt;light-weight&#xA;            SKB case&lt;/a&gt;.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;I plug the Fly Rig into our PA for rehearsal, and it sounds great. Katya can&#xA;    control my volume and the overall mix easily, so our volume and EQ don‚Äôt get out&#xA;    of control (as happens so often when guitar players control their amp volume).&#xA;    Similarly, the sound engineer at a live venue will hate you the least of all&#xA;    guitar players.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Fly Rig has all the basic sounds I need:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;Sans Amp speaker emulation with 3-band EQ, &lt;strong&gt;Level&lt;/strong&gt;, and&#xA;        &lt;strong&gt;Drive&lt;/strong&gt; controls.&#xA;    &lt;/li&gt;&#xA;&#xA;    &lt;li&gt;A decent spring reverb emulation. I love reverb and almost always leave it&#xA;        dialed to 3:00 or 5:00!&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Distortion with &lt;strong&gt;Level&lt;/strong&gt;, &lt;strong&gt;Tone&lt;/strong&gt;, and&#xA;        &lt;strong&gt;Drive&lt;/strong&gt; controls.&#xA;    &lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Independent boost with selectable level (&lt;strong&gt;Hot&lt;/strong&gt;).&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Tap-tempo delay ‚Äî fundamental to my playing style. As a bonus it has a&#xA;        &lt;strong&gt;Drift&lt;/strong&gt; control for chorus-y delay effects. You can get a decent&#xA;        warbly chorus by turning &lt;strong&gt;Drift&lt;/strong&gt; up and &lt;strong&gt;Level&lt;/strong&gt;,&#xA;        &lt;strong&gt;Repeats&lt;/strong&gt;, and &lt;strong&gt;Time&lt;/strong&gt; down.&#xA;    &lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Each control has an LED light inside, so you can easily see which options are&#xA;    turned on and what their knobs are set at:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;close-up.jpg&#34; alt=&#34;Close-up of the Tech 21 Fly Rig 5&#34; width=&#34;1000&#34; height=&#34;438&#34; loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;Close-up view of the Fly&#xA;        Rig, all lights on.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;When recording at home or in the studio, I tend to use more delays, a looper&#xA;    pedal, and a dedicated reverb and tremolo box (&lt;a href=&#34;http://www.strymon.net/products/flint/&#34;&gt;the beautiful and&#xA;        perfect Strymon&#xA;        Flint&lt;/a&gt;). But carrying just 1 case to a gig is so convenient that I will give&#xA;    up the extra delays!&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Sounds&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The signal chain for all sound samples is Strat ‚Üí Fly Rig ‚Üí Radial J48 DI box&#xA;    ‚Üí Alesis Multimix 8 mixer ‚Üí Garage Band. The recordings are pretty noisy because&#xA;    I live near Sutro Tower. :) The Strat has 6 pickup positions, which you‚Äôll hear&#xA;    me switching through in the first sample: bridge double, bridge single, both&#xA;    pickups double, neck single, neck double, both pickups single.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are the Fly Rig‚Äôs basic sounds:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;basic-sounds.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;basic-sounds.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;I didn‚Äôt include it in that sample, but you can get a vicious&#xA;    fuzz/direct-to-mixer sound by turning the distortion on and the Sans Amp speaker&#xA;    emulator off.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here is the tap tempo delay doing dotted eighth notes, which a touch of&#xA;    Drift:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;deep-below-intro.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;deep-below-intro.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;And here is a Yngwie-like sound: Marshall-style distortion with the Strat on&#xA;    the neck pickup in single-coil mode:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;a-minor-noodle.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;a-minor-noodle.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;h2&gt;Conclusion&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;If you share my view of amps, definitely get one of these or something else&#xA;    from Tech 21. I love the Fly Rig.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;Easy to use: you can just turn every knob to noon and&#xA;        start playing immediately.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Reasonable price ($250).&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Usable as a headphone amp (with a mono-to-stereo adapter).&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;    &lt;li&gt;For some reason, the Fly Rig powers up with all options turned on. This is&#xA;        loud if your channel on the mixing board is not set to 0 when you turn on. It&#xA;        seems like that could damage something.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;No stereo output. I love stereo delay, and when you use the Fly Rig as a&#xA;        headphone amp, unless you have a mono-to-stereo adapter, you‚Äôll only get sound&#xA;        in 1 ear.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Requires a special AC adapter: 12V, 150mA instead of the more standard&#xA;        Boss-style 9V. The adapter that comes with the Fly Rig is not as robust as the&#xA;        excellent Visual Sound ones. Visual Sound does sell a 12V adapter.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Ugly:&lt;/strong&gt; Only some of the knobs come with rubber grippers on&#xA;    them. The gripper-less knobs are very hard to use. If you like, you can let Tech&#xA;    21 nickel-and-dime you: They sell extra grippers, 10 for $7. Plus shipping.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;knob-grippies.jpg&#34; alt=&#34;Extra rubber knob grippers, sold&#xA;separately&#34; width=&#34;500&#34; height=&#34;572&#34; loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;&lt;a href=&#34;http://www.tech21nyc.com/products/accessories/index.html&#34;&gt;Additional knob&#xA;            grippers sold separately&lt;/a&gt;, for 7 friggin‚Äô dollars.&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;The Fly Rig is almost perfect! I hope never to use a guitar amp ever&#xA;    again.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2015/09/26/fly-rig-5-review/index.html</guid>
      <pubDate>Sat, 26 Sep 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Security And Apparentness</title>
      <link>https://noncombatant.org/2015/09/20/security-and-apparentness/index.content</link>
      <description>&lt;h1&gt;Security And Apparentness&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;20 September 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;&#xA;&lt;p&gt;Update 28 October 2015: &lt;a&#xA;href=&#34;http://conferences2.sigcomm.org/imc/2015/papers/p27.pdf&#34;&gt;‚ÄúNeither Snow Nor&#xA;Rain Nor MITM‚Ä¶ An Empirical Analysis of Email Delivery Security‚Äù&lt;/a&gt; by&#xA;Durumeric, et al. confirms my assertion that opportunistic security must be&#xA;either useless or rarely adopted:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;We analyze the mail sent to Gmail from these hosts and find that in&#xA;seven countries, more than 20% of all messages are actively prevented from being&#xA;encrypted. In the most severe case, 96% of messages sent from Tunisia to Gmail&#xA;are downgraded to cleartext.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;If you actually need STARTTLS, you can‚Äôt count on it doing anything. One&#xA;solution would be for Gmail to require STARTTLS, and to require some kind of&#xA;Certificate Transparency or key pinning for STARTTLS certificates. But then the&#xA;next problem would arise: surfacing the connection failures to people. Due to&#xA;the asynchronous and ‚Äòit just works‚Äô nature of email, I don‚Äôt see an elegant or&#xA;even minimally workable solution to that problem. I‚Äôd love to be proven&#xA;wrong...&lt;/p&gt;&#xA;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;Original post follows:&lt;/p&gt;&#xA;&#xA;&lt;hr/&gt;&#xA;&#xA;&lt;p&gt;If an application (or platform, or protocol, or...) cannot communicate a&#xA;particular security guarantee to the person ‚Äî perhaps because there is no&#xA;channel by which to communicate the message ‚Äî then the mechanism that provides&#xA;the security guarantee can be at best &lt;em&gt;opportunistic&lt;/em&gt;. The mechanism&#xA;provides the guarantee if conditions are favorable; otherwise, it does not.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With an opportunistic security mechanism, there arises a question: whether or&#xA;not the effort to develop the mechanism, and the attack surface the mechanism&#xA;exposes, is worth the benefit ‚Äî which is likely to be negligible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The reason the benefit of an opportunistic security mechanism is likely to be&#xA;negligible is that, because the application cannot communicate failures to the&#xA;person, the success or failure of the mechanism cannot possibly be part of the&#xA;person‚Äôs mental model of the system. Thus, the person is very likely to rank&#xA;other benefits ‚Äî such as availability or performance ‚Äî above the security&#xA;benefit that they cannot even perceive.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus, opportunistic security mechanisms almost certainly must fail open,&#xA;rather than fail closed. If an opportunistic security mechanism were to fail&#xA;closed, but the application could not communicate a particular reason or&#xA;recourse to the person, people would be likely to reject the application as&#xA;being flaky and unpredictably unavailable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thus, in the presence of an attacker, the opportunistic security mechanism&#xA;must, by design, be useless or rarely adopted.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An application may also fail to communicate the failure of a security&#xA;mechanism not because the communication channel to the person is lacking, but&#xA;because it is too complex. Too much communication can be just as bad as too&#xA;little.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the application cannot communicate the security guarantee to the person&#xA;because the semantics of the security are too complex, the application&#xA;developers should simplify the security guarantee. Specifically, by simplifying&#xA;(or ‚Äúquantizing‚Äù) the security guarantee &lt;em&gt;upward&lt;/em&gt;. (Or, equivalently,&#xA;quantizing the semantic complexity downward.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, it can be very difficult to explain in an application‚Äôs UX that&#xA;the person‚Äôs communications with their friend are encrypted but not&#xA;authenticated; or authenticated but not encrypted. Thus, it is better to provide&#xA;both authentication and encryption together, and clearly label that state&#xA;‚Äòsecure‚Äô; or to provide neither and clearly label that state ‚Äònon-secure‚Äô.&#xA;(Alternately, an application whose users will accept occasional unavailability&#xA;may instead report a connection error and explain that no ‚Äòsecure‚Äô connection is&#xA;available at the time.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To &lt;a href=&#34;http://iang.org/ssl/h1_the_one_true_cipher_suite.html&#34;&gt;paraphrase&#xA;Ian Grigg&lt;/a&gt;, we can characterize the ultimate security quantization as, ‚ÄúThere&#xA;is 1 mode, and it is secure‚Äù. Allowing less-secure or non-secure modes&#xA;complicates the mechanism‚Äôs semantics and implementation. Such complexity makes&#xA;it difficult both for the people who use the application and the people who&#xA;develop the application to model the application‚Äôs states accurately.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In fact, there is much less of a bright line between ‚Äòdevelopers‚Äô and ‚Äòusers‚Äô&#xA;than either group believes. Developers, just like users, inevitably create&#xA;inaccurate models of the application. Developers call it &lt;em&gt;abstraction&lt;/em&gt;,&#xA;and call it a necessary virtue. And they are right.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2015/09/20/security-and-apparentness/index.html</guid>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Technology, Longevity, And Art</title>
      <link>https://noncombatant.org/2015/08/31/technology-longevity-art/index.content</link>
      <description>&lt;h1&gt;Technology, Longevity, And Art&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;31 August 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Guitarist &lt;a href=&#34;http://www.pledgemusic.com/projects/allanholdsworth&#34;&gt;Allan&#xA;Holdsworth is running a Pledge Music campaign to help produce his latest&#xA;recordings&lt;/a&gt;. As a contributor, I have access to a video interview with him in&#xA;which he describes how he‚Äôs recording the material, and he had some interesting&#xA;thoughts on technology that struck me.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;&lt;p&gt;0:13: [After improvising a melody on the guitar, connected to his large Mac&#xA;OS X-based digital audio workstation set-up] It‚Äôs OK, but now I can keep going&#xA;back and tweezing with it, which is [cackle] the last thing you want to give&#xA;somebody like me the opportunity to do, ‚Äôcause I‚Äôll just keep going forever. It&#xA;was kind of easier in the old days, because when you finished your solo, you&#xA;were done. There was not much you could do with it. Now I can keep going, like I&#xA;said before, until the computer decides &lt;em&gt;it&lt;/em&gt; didn‚Äôt like it, and it eats&#xA;it, and says, ‚ÄúThank you! Good night! Next!‚Äù Then you have to do it all again.&#xA;It‚Äôs the Crash Syndrome.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1:40: And here we go. A blast from the past. This is my old Atari [ST]. I&#xA;have 2 of them ‚Äî I actually have 4 of them. But I have 2 of them right here.&#xA;This one‚Äôs running the DX-7 program SynthWorks, because I love DX-7s. And you&#xA;can‚Äôt buy DX-7s. I have a whole rack of DX-7s here, which I think are absolutely&#xA;spectacular. Why Yamaha makes something and discontinues it 2 weeks later, I&#xA;don‚Äôt know, but they do. Anyway [pointing to another Atari ST], here‚Äôs Cubase 3.&#xA;With a company up in San Francisco that makes an adapter so you can use a big&#xA;monitor on it [the Atari is connected to a modern flat panel display]. That&#xA;thing is &lt;em&gt;flawless&lt;/em&gt;. It. Never. Crashes. I‚Äôm extremely proud of that.&#xA;That was my connection, of course, with this guy [indicates SynthAxe]. The&#xA;SynthAxe was the major connection between me and Atari. And Steinberg. ‚ÄôCause&#xA;they were the only people who wrote the software that would even record this&#xA;thing. So there they are, the old [indicates Atari, Cubase, and SynthAxe] and&#xA;the new [indicates modern Mac OS X DAW].&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Holdsworth was known in the 80s and 90s for adopting new technology, such as&#xA;the &lt;a href=&#34;https://en.wikipedia.org/wiki/Yamaha_DX7&#34;&gt;Yamaha DX-7&#xA;synthesizer&lt;/a&gt; and the &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/SynthAxe&#34;&gt;SynthAxe MIDI controller&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&#xA;&lt;p&gt;When originally produced, the SynthAxe was priced at ¬£10,000 (approximately&#xA;$13,000) and eventually sold for about $8,000.00. It was such a sophisticated&#xA;and expensive piece of machinery that few were sold making it difficult to keep&#xA;the company afloat. Eventually Virgin Games took over the distribution but let&#xA;it go after a couple of years.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The SynthAxe is no longer produced and it is very difficult to locate used&#xA;units (fewer than 100 were made). Most musicians who desire a MIDI guitar&#xA;controller often use other alternatives, such as Roland or Axon systems that can&#xA;convert a guitar‚Äôs output to MIDI via 13-pin cables and outboard devices or&#xA;older systems such as the Roland GR-300.&lt;/p&gt;&#xA;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;I got interested in the Atari ST, and found some interesting clips about it&#xA;and Cubase. Here it is in action as a MIDI sequencer:&lt;/p&gt;&#xA;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34;&#xA;src=&#34;https://www.youtube.com/embed/OlspnqVcJho?list=RDOlspnqVcJho&#34;&#xA;frameborder=&#34;0&#34; allowfullscreen loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;p&gt;And here‚Äôs a vintage difference engine boffin discussing the ST‚Äôs history as&#xA;a simple, powerful, beautiful, and musical machine:&lt;/p&gt;&#xA;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/O4kf1Wbaruo&#34;&#xA;frameborder=&#34;0&#34; allowfullscreen loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;blockquote&gt;6:30: ‚ÄúOne of the things I really liked about this machine [...] is&#xA;that, these machines were complex enough that you could use them [in] a way we&#xA;use machines now; I had word processors, desktop publishers, and so on, and [I]&#xA;used them for all sorts of things [...] But, they were still simple enough that&#xA;one person could understand, not just the software and how to write programs,&#xA;but actually how the hardware would work.‚Äù&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;By contrast, the regular electric guitar is extremely simple 1930s ‚Äì 1940s&#xA;technology. &lt;a&#xA;href=&#34;http://www.openculture.com/2012/04/making_fender_guitars_then_1959_and_now_2012.html&#34;&gt;Here&#xA;are 2 videos showing how guitars were were made in 1959 and then again in&#xA;2012&lt;/a&gt;. Basically, nothing changed except for quantity. Like a violin, a&#xA;guitar is forever. Short of total physical destruction, a guitar will keep&#xA;playing well, and knowledge of how to repair it is easy to discover (even if&#xA;repairs still require skill to perform well).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Violins and guitars are inherently open source ‚Äî you can just look at them to&#xA;see how they work. You‚Äôll need to read 1 book about woodworking and 1 book about&#xA;introductory electronics to get the basic idea. (Building them well is a&#xA;lifetime‚Äôs work, of course.) When they fail, full repair is usually possible. I&#xA;have a 53-year old Fender Musicmaster that still plays perfectly and sounds as&#xA;beautiful as it did on the day it left the factory. The frets have physically&#xA;worn down over the decades, but that is entirely fixable.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Even extreme repairs are amazingly possible:&lt;/p&gt;&#xA;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/w86n1oGPPqI&#34;&#xA;frameborder=&#34;0&#34; allowfullscreen loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;p&gt;Erlewine makes it look easy because he‚Äôs an experienced professional. And it&#xA;is easy to understand, but very hard to do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But what about Holdsworth‚Äôs SynthAxe, Atari, and Cubase, with software and&#xA;saved music stored on unreliable floppy disks? As with Erlewine‚Äôs heroic&#xA;woodworking, dedicated engineers labor to restore ancient computers. The &lt;a&#xA;href=&#34;http://www.mame.net/&#34;&gt;Multiple Arcade Machine Emulator project&lt;/a&gt; is an&#xA;example of that. It‚Äôs beautiful work; &lt;a&#xA;href=&#34;https://medium.com/@fogleman/i-made-an-nes-emulator-here-s-what-i-learned-about-the-original-nintendo-2e078c9b28fe&#34;&gt;here‚Äôs&#xA;another fun story&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Crucially, though, the Atari and the arcade machines are gloriously simple&#xA;computers, compared to what we have today. And Cubase 3 is a gloriously simple&#xA;program, compared to what we have today. If the last Cubase floppy in existence&#xA;were to experience an unrecoverable sector error, a genius software&#xA;archaeologist could likely restore it (since a floppy sector is only 512&#xA;bytes). But more damage could prove fatal, and Holdsworth‚Äôs masterful SynthAxe&#xA;playing could never be replicated on ‚Äòperiod instruments‚Äô. Yet people still rock&#xA;the krumhorn, no problem:&lt;/p&gt;&#xA;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2bYh0Mq9TOc&#34;&#xA;frameborder=&#34;0&#34; allowfullscreen loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;p&gt;But what about more complicated hardware and software? What about proprietary&#xA;data formats and interfaces, and the threat of lawsuits?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm anxious entrusting something as important as art to a computer system.&#xA;Notoriously complex, and notoriously closed. (And often shipped on absurd&#xA;schedules.) Before computers are really reliable enough for anything important,&#xA;we need to get them fully opened and decomplexified. I‚Äôm very excited about &lt;a&#xA;href=&#34;http://riscv.org/&#34;&gt;the RISC-V project&lt;/a&gt;, which aims to do just that.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2015/08/31/technology-longevity-art/index.html</guid>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>About Public Key Pinning</title>
      <link>https://noncombatant.org/2015/05/01/about-http-public-key-pinning/index.content</link>
      <description>&lt;h1&gt;About Public Key Pinning&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;1 May 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;aside&gt;&lt;p&gt;postd.cc has posted &lt;a&#xA;href=&#34;http://postd.cc/about-public-key-pinning/&#34;&gt;a Japanese translation of this&#xA;article&lt;/a&gt;.&lt;/p&gt;&lt;/aside&gt;&#xA;&#xA;&lt;aside&gt;&lt;p&gt;My colleague Emily Stark has posted &lt;a&#xA;href=&#34;https://developers.google.com/web/updates/2015/09/HPKP-reporting-with-chrome-46&#34;&gt;an&#xA;introduction to HPKP reporting&lt;/a&gt; that you might also find useful.&lt;/p&gt;&lt;/aside&gt;&#xA;&#xA;&lt;aside&gt;&lt;p&gt;Scott Helme has developed &lt;a&#xA;href=&#34;https://scotthelme.co.uk/hpkp-toolset/&#34;&gt;a set of tools to make deploying&#xA;HPKP a bit easier&lt;/a&gt;. He also runs &lt;a&#xA;href=&#34;https://report-uri.io/&#34;&gt;report-uri.io&lt;/a&gt;, a service endpoint for&#xA;collecting HPKP and CSP reports.&lt;/p&gt;&lt;/aside&gt;&#xA;&#xA;&lt;h2&gt;Introduction&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;At long last, the Internet Engineering Task Force (IETF) has published &lt;a&#xA;href=&#34;https://tools.ietf.org/html/rfc7469&#34;&gt;RFC 7469, Public Key Pinning&#xA;Extension for HTTP&lt;/a&gt; (HPKP). Thanks to my colleagues Ryan Sleevi, Adam&#xA;Langley, and Chris Evans for coming up with the idea; and thanks to Ryan and&#xA;Chris E. for helping me write the many drafts that preceded the final RFC.&#xA;Thanks also to the many IETF participants who commented on the drafts and helped&#xA;shepherd the document through to RFC status.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;What Is Pinning, And What Does It Solve?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;HPKP is an attempt to solve 1 of the big problems in the &lt;a&#xA;href=&#34;https://datatracker.ietf.org/wg/wpkops/charter/&#34;&gt;Web PKI&lt;/a&gt;: the fact&#xA;that essentially any certification authority (CA) or intermediate issuer can&#xA;issue end-entity (EE, or ‚Äúleaf‚Äù) certificates for essentially any web site. For&#xA;example, even though the certificate for mail.google.com is issued by ‚ÄúGoogle&#xA;Internet Authority G2‚Äù, which in turn is issued by the root CA ‚ÄúGeoTrust Global&#xA;CA‚Äù, &lt;a href=&#34;https://en.wikipedia.org/wiki/DigiNotar&#34;&gt;an obscure Dutch CA can&#xA;also try to issue certificates for mail.google.com&lt;/a&gt;. So, we‚Äôd really like&#xA;some way to stop clients from having to trust such &lt;em&gt;misissued&lt;/em&gt;&#xA;certificates.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;certificate-viewer-mail.png&#34; alt=&#34;The Chrome Certificate&#xA;Viewer showing the mail.google.com issuance chain.&#34; width=&#34;227&#34; height=&#34;279&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;figcaption&gt;The Chrome Certificate Viewer showing the&#xA;mail.google.com issuance chain.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Often, people propose to solve this problem by partitioning the web: either&#xA;they would like to configure their clients to trust only CAs from their own&#xA;nation; or they would like for CAs of nation &lt;var&gt;X&lt;/var&gt; to be banned from&#xA;issuing certificates for organizations from nations &lt;var&gt;Y&lt;/var&gt; and&#xA;&lt;var&gt;Z&lt;/var&gt;; or both. There are a couple problems with this. Crucially, the Web&#xA;is World-Wide by nature and its many great benefits flow directly from that.&#xA;Additionally, it is not always clear what nation a given organization is really&#xA;‚Äòfrom‚Äô, and hence it is not always clear what CA ‚Äòshould‚Äô have issued the&#xA;organization‚Äôs certificates.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There can be no perfect set of ‚Äògolden roots‚Äô ‚Äî you cannot construct a&#xA;minimal set of issuing certificates whose operators are more certain than some&#xA;other set not to mis-issue (whether on purpose or by accident). If you partition&#xA;the web, you reduce its value without actually reducing the threat of&#xA;mis-issuance. So we need something else.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;HPKP is 1 way to do that. HPKP enables a web server to tell clients (like&#xA;browsers) to expect the server to always present, in its X.509 certificate&#xA;chain, at least 1 of a set of public keys; and otherwise to to reject the&#xA;certificate chain. Thus, a web site operator can effectively reduce the set of&#xA;issuers that can issue for their site, without partitioning the web.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;How Does Pinning Work?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;To understand key pinning, first consider the classic simple case: SSH host&#xA;key management. When you first connect to an SSH server with a client that has&#xA;no previous knowledge of the server, you see this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;chris@goatbeast:~ $ &lt;strong&gt;ssh freebsd&lt;/strong&gt;&#xA;The authenticity of host &#39;freebsd (10.0.0.4)&#39; can&#39;t be established.&#xA;ECDSA key fingerprint is b0:79:74:0f:58:20:80:fd:c7:47:33:d6:9c:40:df:20.&#xA;Are you sure you want to continue connecting (yes/no)? &#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;My server, freebsd, is presenting its public key to the SSH client to prove&#xA;its identity. The problem is, my client has no knowledge of that&#xA;(&lt;var&gt;server-name&lt;/var&gt;, &lt;var&gt;public-key&lt;/var&gt;) pair. So it asks me to resolve&#xA;the confusion. I am supposed to perform some out-of-band check that the key&#xA;fingerprint is correct, and say Yes or No.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Assuming I say Yes, my client will henceforth expect this server to present&#xA;that key &lt;em&gt;and only that key&lt;/em&gt;. If my server ever presents a different key&#xA;‚Äî whether due to legitimate key rotation or an actual network attack ‚Äî my client&#xA;will refuse to connect, and print a message like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;No ECDSA host key is known for freebsd and you have requested strict checking.&#xA;Host key verification failed.&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The reason this works for SSH is that almost everyone who uses SSH is an&#xA;expert user: a systems administrator, devops engineer, or software engineer.&#xA;They understand the error message, know what to do in case of key verification&#xA;failure, and can act on it. The community of people who use any given server is&#xA;small. They can simply talk to each other: ‚ÄúHey, did you rotate the keys for the&#xA;server?‚Äù&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But on the world-wide web, that won‚Äôt fly. Key rotation is common, we need a&#xA;friction-free introduction for that first connection, and the people using&#xA;browsers have no special knowledge of cryptographic authentication. Therefore,&#xA;we must still rely on CAs to provide the introductions, and we still use chains&#xA;of certificates to give us flexible continuity for our web servers‚Äô&#xA;cryptographic identities. And rather than pinning a &lt;em&gt;single&lt;/em&gt; end-entity&#xA;key, as in SSH, we can pin a &lt;em&gt;set&lt;/em&gt; of keys ‚Äî potentially at several&#xA;places in the certificate chain. As we‚Äôll see below, this can greatly increase&#xA;reliability.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7469#section-2.6&#34;&gt;HPKP Pin&#xA;Validation&lt;/a&gt; is essentially &lt;em&gt;set intersection&lt;/em&gt;: given the set of public&#xA;keys in the signed certificate chain, are &lt;em&gt;any&lt;/em&gt; of them the same as any&#xA;of the keys the server has asserted (‚Äúpinned‚Äù) as known-good? If so, Pin&#xA;Validation succeeds; if not, the client should behave like an SSH client: drop&#xA;the invalid connection. In Chrome, that looks like this:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;pin-validation-failure.png&#34; alt=&#34;A screenshot of Chrome&#xA;rejecting an invalid pin set.&#34; width=&#34;421&#34; height=&#34;328&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;figcaption&gt;Chrome rejecting an invalid pin&#xA;set.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;h2&gt;How Do I Configure HPKP For My Site?&lt;/h2&gt;&#xA;&#xA;&lt;blockquote&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; Public key pinning for web sites can be&#xA;very dangerous. If you make a mistake, you might cause clients to pin a set of&#xA;keys that validates today but which stops validating a week or a year from now,&#xA;if something changes. In that case, you‚Äôll end up denying service to your own&#xA;site! People won‚Äôt be able to connect. (We call this ‚Äúbricking your site‚Äù.)&#xA;Unless you are very confident that you understand the Web PKI, and unless you&#xA;are very confident that you can manage your site‚Äôs cryptographic identity very&#xA;well, you should not use key pinning. Stick to regular, un-pinned Web PKI until&#xA;you get more confident.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;There are several steps you have to take to pin 1 or more of the public keys&#xA;in your site‚Äôs certificate chain(s):&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&#xA;&lt;li&gt;Figure out your site‚Äôs certificate chain(s) &lt;em&gt;as served&lt;/em&gt; and &lt;em&gt;as&#xA;validated by clients&lt;/em&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Decide where in the chain(s) you‚Äôd like to pin&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Set up 1 or more backup pins&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Configure your (test) server to issue a short-lived HPKP header and test it&#xA;out&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Gradually increase the lifetime of the pin set as you get more comfortable&#xA;with it&lt;/li&gt;&#xA;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;In the following sections I‚Äôll describe how to do each step.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Determine Your Site‚Äôs Certificate Chain(s)&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;As we saw in the Certificate Viewer screenshot, a site‚Äôs certificate is at&#xA;the end of a chain of (usually) at least 3 certificates: the &lt;em&gt;root&#xA;certificate&lt;/em&gt; or &lt;em&gt;trust anchor&lt;/em&gt;, 1 or more &lt;em&gt;intermediate issuer&#xA;certificates&lt;/em&gt;, and finally the &lt;em&gt;end-entity certificate&lt;/em&gt;. Typically,&#xA;the web server must serve as part of its TLS handshake all of these certificates&#xA;except the root or trust anchor ‚Äî the client maintains a set of trust anchors&#xA;and finds 1 that signed the top-most intermediate. In certain cases, a server&#xA;can serve only its EE and the clients will discover the intermediate issuers,&#xA;but this often leads to trouble. Generally, expect to have to serve a chain&#xA;containing the intermediate issuer(s).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, be aware that the chain you serve is not necessarily the chain that&#xA;clients will (re)build when validating the chain! This is due to&#xA;&lt;em&gt;cross-signing&lt;/em&gt;, and the generally &lt;a&#xA;href=&#34;http://tools.ietf.org/html/rfc5280#section-6&#34;&gt;surprisingly complicated way&#xA;in which clients build and validate certificate chains&lt;/a&gt;. You can partially&#xA;control this by ensuring that you serve good chains with well-known intermediate&#xA;issuers that chain up to a single well-known trust anchor. Even so, you must&#xA;test with a variety of clients to make sure you know what chains clients will&#xA;really build and validate.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Crucially, clients perform Pin Validation on the chain they build during&#xA;chain validation, which is not necessarily the same as the chain you serve. So,&#xA;unfortunately, you can‚Äôt always simply pin the keys in the chain you serve and&#xA;be certain that Pin Validation will succeed. (Although see the next section for&#xA;ways to get better coverage.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Some sites use a distinct EE certificate for each distinct server in a&#xA;cluster. Perhaps each EE is issued by the same issuers, but perhaps not. If not,&#xA;your situation is likely very complex and key pinning might not work for you.&#xA;(Or, it may only work with a very large pin set.)&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Decide What Keys To Pin&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Now that you have a grip on what certificate chain(s) clients will build and&#xA;validate, it‚Äôs time to decide where in that chain to pin. For the sake of&#xA;discussion, I‚Äôll assume a simple server deployment model:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;the organization has 2 data centers, each hosting a cluster of web servers&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;the organization obtains 1 EE certificate for 1 cluster, and another EE&#xA;certificate for the other cluster&lt;/li&gt;&#xA;&#xA;&lt;li&gt;the organization has the same CA issue both EEs&lt;/li&gt;&#xA;&#xA;&lt;li&gt;the CA issues through 1 intermediary&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Thus, we have 2 certificate chains in production: CA ‚Üí intermediary ‚Üí EE1,&#xA;and CA ‚Üí intermediary ‚Üí EE2. The servers in the 2 clusters are configured,&#xA;correctly, to serve the chains intermediary ‚Üí EE1 (for data center 1) and&#xA;intermediary ‚Üí EE2 (for DC 2).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Let‚Äôs further assume for simplicity that clients do indeed build a path&#xA;through the intermediary to the same CA certificate as we expect. (Again, in&#xA;reality, you &lt;em&gt;cannot simply assume this&lt;/em&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can choose to pin the keys of any of the 4 certificates: CA, intermediary,&#xA;EE1, and EE2. The implications of pinning at different levels vary:&lt;/p&gt;&#xA;&#xA;&lt;dl&gt;&#xA;&#xA;&lt;dt&gt;Pinning at the EE(s).&lt;/dt&gt; &lt;dd&gt;This gives the site operator a security&#xA;guarantee as strong as SSH: any misissuance will cause clients to reject the&#xA;misissued chain. The downside is that the server operator ties themselves to&#xA;those specific EE public keys ‚Äî simply getting a new EE issued by the same&#xA;issuer(s) will not work (although see below about backup pins).&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Pinning at the intermediary/ies.&lt;/dt&gt; &lt;dd&gt;This reduces the threat of&#xA;misissuance to only the pinned intermediary/ies ‚Äî a significant improvement over&#xA;the status quo, but not strictly as strong as pinning to only the EEs. By the&#xA;same token, any new certificate issued for the site by those issuers will pass&#xA;Pin Validation.&lt;/dd&gt;&#xA;&#xA;&lt;dt&gt;Pinning at the root(s).&lt;/dt&gt; &lt;dd&gt;This is similar to pinning to the&#xA;intermediary/ies. Often, the same organization controls the private keys of the&#xA;root and the intermediary/ies. If that is not the case, then this option becomes&#xA;different from pinning to intermediaries: the site operator now trusts more or&#xA;different private key holders not to misissue.&lt;/dd&gt;&#xA;&#xA;&lt;/dl&gt;&#xA;&#xA;&lt;p&gt;By pinning at multiple levels in the certificate chain ‚Äî e.g. the EEs and the&#xA;intermediaries, the EEs and the root, the intermediaries and the root, or at all&#xA;3 ‚Äî the site operator can trade off trusting more issuers with greater ease of&#xA;avoiding bricking the site.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Generate A Backup Pin&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The RFC mandates that hosts MUST provide a backup pin: A pin that is&#xA;&lt;em&gt;not&lt;/em&gt; present in the chain that the client validates. This is for your&#xA;own good: if you lose control of your private keys and need to re-key your site&#xA;and get new certificates, you don‚Äôt want your site to have any down time ‚Äî and&#xA;certainly not to be bricked! Unless clients have already pinned your backup key,&#xA;your site would be bricked until the max-age timed out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In this example, I‚Äôll use a backup EE certificate as a backup pin. (You&#xA;could, and likely should, also use an alternate intermediary or root issuer&#xA;certificate for your backup. Additionally, it is best to get your backup signed&#xA;by a valid issuer, &lt;em&gt;before&lt;/em&gt; disaster strikes, so that you really can put&#xA;it into production at a moment‚Äôs notice!)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This script generates a new key and an associated certificate signing request&#xA;(CSR; which is what you would send to a CA for them to sign). This is a way to&#xA;generate a primary and/or backup EE key and CSR for your site. Again, the safest&#xA;thing to do is to actually get your backup key in a valid certificate issued by&#xA;a real issuer, so that you could put it into production immediately if&#xA;necessary.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;#!/bin/sh&#xA;&#xA;openssl genrsa -out &#34;$1&#34;.key 2048&#xA;openssl req -new -key &#34;$1&#34;.key -out &#34;$1&#34;.csr&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;Test The HPKP Header&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;This script makes a key pin: it reads in either an X.509 certificate (in PEM&#xA;format) or a certificate signing request (also in PEM format), extracts its&#xA;subject public key info (SPKI) section, hashes the SPKI with SHA-256, and then&#xA;base 64-encodes that:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;#!/bin/sh&#xA;&#xA;type=&#34;x509&#34;&#xA;case &#34;$1&#34; in&#xA;  x509)&#xA;    type=&#34;x509&#34;&#xA;    ;;&#xA;  req)&#xA;    type=&#34;req&#34;&#xA;    ;;&#xA;  *)&#xA;    echo &#34;Usage: $0 x509 certificate-pathname&#34;&#xA;    echo &#34;       $0 req certificate-signing-request-pathname&#34;&#xA;    exit 1&#xA;esac&#xA;&#xA;openssl $type -noout -in &#34;$2&#34; -pubkey | \&#xA;  openssl asn1parse -noout -inform pem -out public.key&#xA;openssl dgst -sha256 -binary public.key | openssl enc -base64&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The output of this script is what you will put in your PKP headers. For&#xA;example, this is an example Apache header directive that I am currently using&#xA;for nonfreesoftware.org (lines folded to fit):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&#xA;Header add Public-Key-Pins &#34;max-age=500; includeSubDomains;&#xA;    pin-sha256=\&#34;wBVXRiGdJMKG7vQhr9tZ9br9Md4l7cO69LF2a88Au/o=\&#34;;&#xA;    pin-sha256=\&#34;fv1+PWVvrBGKldX8uRtODY3sDbBKlsJOa48mI9s+6Mk=\&#34;;&#xA;    pin-sha256=\&#34;lT09gPUeQfbYrlxRtpsHrjDblj9Rpz+u7ajfCrg4qDM=\&#34;&#34;&#xA;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I‚Äôve pinned my end-entity, an issuer, and a backup key. I‚Äôve set the max-age&#xA;for 500 seconds, so that I can‚Äôt brick the site for very long. And, of course,&#xA;I‚Äôve pinned only an alternate name for the site, not the canonical name (which&#xA;is noncombatant.org).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, check to make sure that your client has read and understood the key&#xA;pins. In this screenshot, you can see that Chrome has recognized my&#xA;Public-Key-Pins header:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;hsts-internals.png&#34; alt=&#34;A view of&#xA;chrome://net-internals/#hsts showing key pins for nonfreesoftware.org&#34;&#xA;width=&#34;539&#34; height=&#34;354&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;figcaption&gt;chrome://net-internals/#hsts allows you to query the&#xA;state of Chrome‚Äôs HSTS and HPKP database.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;aside&gt;&lt;p&gt;Update 08 Mar 2017: A previous version of this post used the word&#xA;‚ÄòBalkanize‚Äô to mean ‚Äòpartition‚Äô. A nice reader took the time to email me to say&#xA;that the term is offensive to people from the Balkans ‚Äî¬†something that I admit I&#xA;had not realized or considered. I‚Äôve switched to using the term ‚Äòpartition‚Äô&#xA;instead. I apologize for that! And thanks to the helpful reader.&lt;/p&gt;&lt;/aside&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2015/05/01/about-http-public-key-pinning/index.html</guid>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Tycho: Awake</title>
      <link>https://noncombatant.org/2015/01/26/tycho-awake/index.content</link>
      <description>&lt;h1&gt;Tycho: &lt;em&gt;Awake&lt;/em&gt;&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;26 January 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Tycho plays beautiful rock instrumentals with guitar, bass, acoustic and&#xA;electronic drums, and keys, building dreamy echoes and drones. This record&#xA;is an instant favorite ‚Äî I am immensely jealous, because this is the kind of&#xA;record I would love to have written and played on. The layers of simple&#xA;melody and light grooves relax me but keep my interest ‚Äî it‚Äôs sweet, but not&#xA;boring.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;High points: ‚ÄúAwake‚Äù, ‚ÄúL‚Äù; but every track is gold.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Guitars, bass, keys, and drums by &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Tycho_(musician)&#34;&gt;Scott Hansen&lt;/a&gt;;&#xA;guitars and bass by Zac Brown; live drums by Rory O‚ÄôConnor; Produced by&#xA;Scott Hansen.&lt;/em&gt;&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2015/01/26/tycho-awake/index.html</guid>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Aphex Twin: Syro</title>
      <link>https://noncombatant.org/2015/01/26/aphex-twin-syro/index.content</link>
      <description>&lt;h1&gt;Aphex Twin: &lt;em&gt;Syro&lt;/em&gt;&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;26 January 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Luscious, bubbly synths and rhythm machines, with wonderful moments of&#xA;the calculatedly off-kilter intonation that I associate with Adult.&#xA;Everything is warm and enveloping, and the music rewards careful, repeated&#xA;listening.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The minimal cover art is a musicians‚Äô lament: A listing of the 12 tracks&#xA;and their tempos in beats per minute, followed by a litany of hundreds of&#xA;marketing and travel expenses denominated in hundreds of thousandths of GBP&#xA;‚Äî underscoring their relative importance. An inner sleeve includes the&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Syro#Packaging&#34;&gt;‚Äúdisinfographic‚Äù&#xA;listing all the musical instruments&lt;/a&gt;. I‚Äôm glad that my collection of&#xA;effects units is relatively tiny...&lt;/p&gt;&#xA;&#xA;&lt;p&gt;High points: Every track is beautiful, but my favorite is ‚Äúproduk 29‚Äù for&#xA;its thump and warbly waves of melody.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Written and produced by Richard D. James.&lt;/em&gt;&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2015/01/26/aphex-twin-syro/index.html</guid>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Thoughts On Platform Security Features</title>
      <link>https://noncombatant.org/2015/01/02/platform-security-features/index.content</link>
      <description>&lt;h1&gt;Thoughts On Platform Security Features&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;2 January 2015&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are some off-the-cuff thoughts on security features that are&#xA;available, and which I would like to see.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We need a superset of a subset of the union of the security features of&#xA;‚Äúmobile‚Äù platforms and ‚Äúdesktop‚Äù platforms. Although these are not&#xA;clearly-defined terms, I‚Äôll try to roughly characterize them by naming&#xA;examples. Desktop platforms as of 2015 include:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Mac OS X&lt;/li&gt;&#xA;&lt;li&gt;Windows&lt;/li&gt;&#xA;&lt;li&gt;Desktop and server Linux and BSD distributions, e.g. FreeBSD,&#xA;Ubuntu&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Mobile platforms include:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Chrome OS&lt;/li&gt;&#xA;&lt;li&gt;iOS (Apple, not Cisco)&lt;/li&gt;&#xA;&lt;li&gt;Android&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.webplatform.org/&#34;&gt;The web platform&lt;/a&gt; seems to straddle&#xA;the line in some ways.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The key differentiators between the 2 classes of platform are security&#xA;features and userland APIs. (And the hardware they run on.) Obviously, I‚Äôll&#xA;focus on security features, and touch on userland APIs only insofar as they&#xA;affect security.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are the security features of mobile platforms that I think we need&#xA;in all platforms going forward:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;A 2-part principal: (user, source of code); the code source must be&#xA;cryptographically authenticated. For example, Android gives each package (or,&#xA;package signing key) its own Linux user ID, isolating it from other packages.&#xA;(&lt;a&#xA;href=&#34;https://source.android.com/devices/tech/security/overview/app-security.html&#34;&gt;More&#xA;details&lt;/a&gt;.) iOS puts each app in a sandbox and isolates its storage; again all&#xA;code is signed. The open web uses the &lt;a&#xA;href=&#34;https://tools.ietf.org/html/rfc6454&#34;&gt;origin model&lt;/a&gt;, with optional&#xA;cryptographic code authentication (HTTPS).&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Usable ways to share resources between 2-part principals (strongest on&#xA;Android; OK on iOS; rather ad hoc on the web). This is mostly a consequence&#xA;of the userland APIs that the platform makes available to applications;&#xA;Android is rich here.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Tamper-evident storage, verified at least on boot (‚Äúsecure boot‚Äù, e.g. &lt;a&#xA;href=&#34;https://code.google.com/p/cryptsetup/wiki/DMVerity&#34;&gt;dm-verity&lt;/a&gt;).&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Encrypted storage, preferably on by default, preferably&#xA;whole-device.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;The integrity checking and the encryption should both be backed by hardware,&#xA;e.g. a &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Trusted_Platform_Module&#34;&gt;TPM&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Privilege reduction, a way for userland programs to reduce their own access&#xA;to the kernel. Chrome OS, Mac OS X, iOS, and someday soon Android, have such&#xA;mechanisms: &lt;a&#xA;href=&#34;https://www.kernel.org/doc/Documentation/prctl/seccomp_filter.txt&#34;&gt;Seccomp-BPF&lt;/a&gt;&#xA;and &lt;a&#xA;href=&#34;https://developer.apple.com/library/mac/documentation/Security/Conceptual/AppSandboxDesignGuide/AboutAppSandbox/AboutAppSandbox.html&#34;&gt;Seatbelt&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;By contrast, there are security features desktop platforms have that&#xA;mobile platforms lack:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Considerably greater owner control over the device ‚Äî¬†debuggers, root and&#xA;ring 0 access, et c. ‚ÄúDigital rights management‚Äù seems to have caught on more&#xA;strongly on mobile platforms. &lt;a&#xA;href=&#34;https://www.chromium.org/chromium-os/poking-around-your-chrome-os-device&#34;&gt;Chrome&#xA;OS has a Developer Mode&lt;/a&gt;; I wish more closed platforms would follow&#xA;suit.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Memory and CPU powerful enough to rebut the (usually, but not always,&#xA;mistaken) arguments against using &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Type_safety&#34;&gt;type-safe&lt;/a&gt; or at least &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Memory_safety&#34;&gt;memory-safe&lt;/a&gt; code. Current&#xA;mobile devices are as powerful or moreso as desktop computers of a decade ago,&#xA;so we do technically have the horsepower to run e.g. Java, C#, F#, Haskell, et&#xA;c. in these devices. In fact, Android, iOS, and the web all make heavy use of&#xA;languages with expensive features like late binding, object orientation,&#xA;run-time type checking, interpreted non-native code, and so on. Yet it has&#xA;proven hard to actually use those expensive features for safety ‚Äî¬†people always&#xA;want to call into C/C++ code for ‚Äúefficiency‚Äù, and then find out the hard way&#xA;how easy it is to write unsafe C/C++. Developers seem happy to traverse many&#xA;pointers to finally get to a callable method but are not happy to check the&#xA;bounds on arrays. Although unsafe code will always seem marginally faster than&#xA;safe code, at some point we have to draw the line: &lt;em&gt;this&lt;/em&gt; is fast enough,&#xA;&lt;em&gt;that&lt;/em&gt; is not safe enough.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Things we still need on both classes of platform, or which I‚Äôm not sure&#xA;we have yet:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Secure_attention_key&#34;&gt;secure&#xA;attention sequence&lt;/a&gt;. iOS‚Äô Home button might actually be one; I don‚Äôt know the&#xA;implementation. I am not certain if Control-Alt-Delete still is a SAS on Windows&#xA;‚Äî please email me if you know more. SAS is a simple and powerful idea but it&#xA;depends crucially on implementation details that are hard to keep robust as&#xA;products change over time.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;UI isolation: each application should only be able to ‚Äúsee‚Äù its own windows,&#xA;should be able to reliably know when they have the highest z-order, and should&#xA;be able to reliably know when input events are really coming from the user (via&#xA;the kernel). (See &lt;a&#xA;href=&#34;https://www.usenix.org/legacy/publications/library/proceedings/sec04/tech/full_papers/shapiro/shapiro.pdf&#34;&gt;Design&#xA;Of The EROS Trusted Window System&lt;/a&gt;.) Android almost has this, at least last&#xA;time I looked. Windows are accessible only through a capability, but as of&#xA;Honeycomb (?) there can be windows that overlap and the active application is&#xA;not necessarily the highest in z-order. I could be wrong about that. I also&#xA;don‚Äôt know the iOS implementation; it may provide some or all of this. (Please&#xA;email me if you know more!)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;A kernel with high (...or any) unit test coverage.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Robust defense against malicious peripherals and I/O devices (e.g. &lt;a&#xA;href=&#34;http://arstechnica.com/security/2014/07/this-thumbdrive-hacks-computers-badusb-exploit-makes-devices-turn-evil/&#34;&gt;‚ÄúBadUSB‚Äù&#xA;exploit makes devices turn ‚Äúevil‚Äù&lt;/a&gt; and &lt;a&#xA;href=&#34;http://gizmodo.com/5832167/public-charging-kiosks-may-steal-your-data&#34;&gt;Public&#xA;Charging Kiosks May Steal Your Data&lt;/a&gt;). Device firmwares, kernel device&#xA;drivers, and filesystems must all be robust against malicious inputs, but&#xA;typically are not.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Safe, sane firmware written to semi-modern standards of code quality,&#xA;including open source solutions. There is &lt;a&#xA;href=&#34;http://www.coreboot.org/&#34;&gt;CoreBoot&lt;/a&gt;, but as far as I know only &lt;a&#xA;href=&#34;https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/custom-firmware&#34;&gt;Chrome&#xA;OS uses it and successors&lt;/a&gt;. Unfortunately I know nothing of iOS&#xA;firmware.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Safe, sane baseband operating systems written to semi-modern standards of&#xA;code quality, including open source solutions. &lt;a&#xA;href=&#34;http://archive.hack.lu/2010/Weinmann-All-Your-Baseband-Are-Belong-To-Us-slides.pdf&#34;&gt;All&#xA;your baseband are belong to Ralf-Philipp Weinmann&lt;/a&gt; (&lt;a&#xA;href=&#34;https://www.youtube.com/watch?v=TzR7R6fBr00&#34;&gt;video&lt;/a&gt;).&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Error-recovering filesystems or block devices, such as with &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Erasure_code&#34;&gt;erasure coding&lt;/a&gt;. Due to&#xA;their wonderfully high capacities, &lt;a&#xA;href=&#34;http://www.storagenewsletter.com/rubriques/market-reportsresearch/why-raid-dead-for-big-storage-cleversafe/&#34;&gt;modern&#xA;storage devices are highly likely to experience unrecoverable block errors&lt;/a&gt;,&#xA;making it impossible to read back data previously stored.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm sure I‚Äôm forgetting something crucial, and that I got at least 1&#xA;thing wrong, and that you‚Äôll let me know. :)&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2015/01/02/platform-security-features/index.html</guid>
      <pubDate>Fri, 02 Jan 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>TLS All The Things: Security With Performance</title>
      <link>https://noncombatant.org/2014/11/23/tls-all-the-things/index.content</link>
      <description>&lt;h1&gt;TLS All The Things: Security With Performance&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;23 November 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I gave a talk last Wednesday at the &lt;a&#xA;href=&#34;https://developer.chrome.com/devsummit/&#34;&gt;Chrome Dev Summit&lt;/a&gt; about how&#xA;TLS and HTTPS are not the big performance problem that people often think they&#xA;are. You can have security and performance, and in fact security&#xA;&lt;em&gt;enables&lt;/em&gt; the new, performant application protocol &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/HTTP/2&#34;&gt;HTTP/2&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It was fun, and was chuffed to find that many or even most people were on&#xA;board with the basic idea that they do in fact need to transport their apps over&#xA;HTTPS. At last?&lt;/p&gt;&#xA;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/ayD0LiZkWLQ&#34;&#xA;frameborder=&#34;0&#34; allowfullscreen loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;p&gt;My safety-loving colleagues Adrienne Porter-Felt and Alex Russell also gave&#xA;excellent talks earlier in the morning. This YouTube video has them all.&lt;/p&gt;&#xA;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/0b9ZE1V4uRk&#34;&#xA;frameborder=&#34;0&#34; allowfullscreen loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2014/11/23/tls-all-the-things/index.html</guid>
      <pubDate>Sun, 23 Nov 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Security As A Class Of Interface Guarantee</title>
      <link>https://noncombatant.org/2014/08/10/security-as-a-class-of-interface-guarantee/index.content</link>
      <description>&lt;h1&gt;Security As A Class Of Interface Guarantee&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;10 August 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;This post is an¬†attempt to pin down my intuition that an ‚Äúinterface‚Äù, broadly&#xA;defined, can be a productive conceptual frame for a wide variety of security&#xA;problems and solutions. I can‚Äôt promise that this post makes total sense; it‚Äôs&#xA;just thinking out loud at this point.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are many ways to understand software security engineering. One&#xA;(all-too-)prevalent view is of security as a cat-and-mouse game: by hook or by&#xA;crook, any little thing you can do to attack or avoid being attacked counts as&#xA;‚Äúsecurity engineering‚Äù. Especially for defenders, this view leads directly to&#xA;failure. It‚Äôs analogous to micro-optimizing a fragment of code (a) before&#xA;profiling it to see if it‚Äôs really a hot spot; (b) without testing to see if the&#xA;micro-optimizations help or hurt; and (c) without any quantified performance&#xA;target.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For example, consider a web application firewall (WAF). People often buy&#xA;these to ‚Äúsecure‚Äù their web applications, saying things like, ‚ÄúHey, even if the&#xA;web application is well-engineered, &lt;a&#xA;href=&#34;http://en.wiktionary.org/wiki/belt_and_suspenders&#34;&gt;belt and suspenders,&#xA;right&lt;/a&gt;?! Belt and suspenders!‚Äù But ask: How much does the WAF cost to buy?&#xA;How much does it cost to install, configure, and run? Who looks at its logs and&#xA;reports, and how much does that person‚Äôs time cost? (Don‚Äôt forget the&#xA;opportunity cost.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How does the WAF affect the application‚Äôs performance and reliability?&#xA;Possibly not well.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How much attack surface does the WAF itself create and expose? Often, a WAF&#xA;can create significant new risk. I once found an XSS vulnerability in a web&#xA;application, and ran a demonstration exploit so I could document that it worked.&#xA;No big surprise there. After a while, a guy came up to me and said he was he WAF&#xA;operator for that app, and did these weird pop-ups he kept seeing have anything&#xA;to do with my security testing? I didn‚Äôt even know the app was (supposedly)&#xA;being protected by a WAF, but I had accidentally exploited both the app and the&#xA;WAF in one shot.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A¬†correct WAF configuration is equivalent to fixing the bug in the original&#xA;application. Why not just do that?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I want to forget all about both belts and suspenders; instead, I want to buy&#xA;pants that actually fit.&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;A note on terminology: In this blog post, I‚Äôll use the&#xA;term¬†&lt;strong&gt;interface&lt;/strong&gt; to mean any of:¬†user interface, programming&#xA;language syntax and semantics, in-process API, system call, RPC and network&#xA;protocol, or¬†&lt;a href=&#34;https://eprint.iacr.org/2007/399.pdf&#34;&gt;ceremony&lt;/a&gt;. I‚Äôll&#xA;use¬†&lt;strong&gt;guarantee&lt;/strong&gt; to include design contracts with explicit&#xA;non-guarantees. I‚Äôll use¬†&lt;strong&gt;caller&lt;/strong&gt; to mean any of: human&#xA;programmer, human user, call-site in source code, or requesting network protocol&#xA;peer. A¬†&lt;strong&gt;callee&lt;/strong&gt; is a person who receives a message (e.g. an&#xA;individual or the operator of a remote¬†service), an API or library&#xA;implementation or other in-process called function, or an RPC or network&#xA;protocol respondent. An¬†&lt;strong&gt;interface definition&lt;/strong&gt; is any&#xA;programmatic function signature (including identifiers and type annotations),&#xA;type semantics, visual &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Semiotic_engineering&#34;&gt;semiotics&lt;/a&gt;¬†of a GUI&#xA;or &lt;a href=&#34;http://en.wikipedia.org/wiki/Command-line_interface&#34;&gt;CLI&lt;/a&gt;, et c.&#xA;that attempts to communicate the meaning and guarantees of the interface to&#xA;callers. The¬†&lt;strong&gt;primary interface definition&lt;/strong&gt; is the immediately&#xA;accessible¬†surface of the interface itself, e.g. a function or method&#xA;declaration, an IDL specification or other code generation/specification system&#xA;for network protocols, the grammar of a programming language, or a¬†user-facing&#xA;GUI or CLI. A &lt;strong&gt;secondary interface definition&lt;/strong&gt; is supplementary&#xA;material; usually documentation, annotation, post-facto errata, entries in&#xA;issue¬†trackers, commit log messages, et c.&lt;/aside&gt;&#xA;&#xA;&lt;h2&gt;Security Is Part Of Every Interface&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;I prefer to think of security as a class of interface guarantee. In&#xA;particular, security guarantees are a kind of correctness guarantee. At every&#xA;interface of every kind ‚Äî user interface, programming language syntax and&#xA;semantics, in-process APIs, kernel APIs, RPC and network protocols, ceremonies ‚Äî&#xA;&lt;a href=&#34;http://en.wikipedia.org/wiki/Design_by_contract&#34;&gt;explicit and implicit&#xA;design guarantees&lt;/a&gt; (promises, contracts) are in place, and determine the&#xA;degree of ‚Äúsecurity‚Äù (however defined) the system can possibly achieve.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Design guarantees might or might not actually hold in the implementation ‚Äî&#xA;software tends to have¬†bugs, after all. Callers and callees can sometimes (but&#xA;not always) defend themselves against untrustworthy callees and callers&#xA;(respectively) in various ways that depend on the circumstances and on the&#xA;nature of caller and callee. In this sense an interface is an &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Attack_surface&#34;&gt;attack surface&lt;/a&gt; ‚Äî but&#xA;properly constructed, it can also be a¬†&lt;strong&gt;defense surface&lt;/strong&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Here are some example security guarantees in hypothetical and real&#xA;interfaces:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;The function¬†&lt;code&gt;bool isValidEmailAddress(String address, Set&#xA;knownTLDs)&lt;/code&gt; returns true if the email address is syntactically valid for&#xA;SMTP addresses according to RFC 3696,¬†and if the domain part is in a known&#xA;top-level domain.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;All array accesses are checked at run time; an attempt to use an index&#xA;that is less than zero or greater than or equal to the length of the array&#xA;causes an¬†&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; to be thrown. (From the &lt;a&#xA;href=&#34;http://docs.oracle.com/javase/specs/jls/se8/html/jls-10.html#jls-10.4&#34;&gt;Java&#xA;Language Specification&lt;/a&gt;.)&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;DNS queries and responses can be read, copied, deleted, altered, and&#xA;forged by an attacker on any network segment between client and server.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Within a single goroutine, the happens-before order is the order&#xA;expressed by the program. (From the &lt;a href=&#34;http://golang.org/ref/mem&#34;&gt;Go&#xA;language documentation&lt;/a&gt;.)&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;The Interface Perception Gap&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The true technical security guarantee that an interface‚Äôs implementation&#xA;provides is not necessarily the same as the guarantee the caller perceives. I‚Äôll&#xA;call this the &lt;strong&gt;interface perception gap&lt;/strong&gt;, for lack of a&#xA;less-awful term. The gap could exist¬†for many reasons, including at least:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;the guarantee is implicit (i.e. not in¬†the interface definition)&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;the guarantee is explicit, but the caller did not read or understand the&#xA;interface definition&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;possibly because the interface definition is too complex for the caller&#xA;to understand&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;possibly because the guarantee is not in the caller‚Äôs mental model of the&#xA;interface or of the caller‚Äôs own requirements&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;the interface misuses terms in its own definition&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;the interface definition is so poor that the caller must imagine their&#xA;own implicit definition&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Gaps in contracts tend, over time, to become implicit guarantees and&#xA;non-guarantees. It can be possible to assert¬†new technical guarantees in the&#xA;gaps. Consider &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Address_space_layout_randomization&#34;&gt;address&#xA;space layout randomization&lt;/a&gt; (ASLR). The executable loaders of operating&#xA;systems never specified the precise location in memory of the program text,&#xA;heap, stack, libraries, et c. in memory; this freed up implementors to randomize&#xA;those locations to thwart exploit developers, cat-and-mouse style. When it was&#xA;invented, ASLR was a decent way to buy some time (a couple years at most) for&#xA;the authors of programs written in unsafe languages to fix their bugs or port to&#xA;safe languages. However, it was never going to be possible for ASLR to fully&#xA;solve the problems of unsafe languages, for many reasons, including at&#xA;least:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;ASLR was a new technical guarantee retrofitted into the interface&#xA;perception gap of pre-existing executable loaders that had to be &lt;em&gt;compatible&#xA;with existing code&lt;/em&gt;, and thus not all program components could be randomized&#xA;with a high degree of entropy.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;And ASLR is an all-or-nothing affair: If the attacker can reliably locate&#xA;&lt;em&gt;any&lt;/em&gt; executable code, they can almost certainly find gadgets useful for&#xA;exploitation there.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Programs generally must be recompiled with new options, or at least with&#xA;old options previously¬†thought of as being exclusively for dynamically-loadable&#xA;library¬†code ‚Äî that is, there wasn‚Äôt &lt;em&gt;enough&lt;/em&gt; of a perception gap in the&#xA;toolchains‚Äô interfaces! As a result, the guarantee of ASLR is still¬†not&#xA;ubiquitous, more than a decade later.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Many program errors are still exploitable due to the limited granularity&#xA;of what program parts can be efficiently randomized ‚Äî there is an implicit&#xA;guarantee of run-time efficiency that extreme ASLR could¬†violate.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Sometimes even coarse-grained ASLR violates certain extreme performance&#xA;requirements.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;In applications that give attackers significant but not&#xA;directly¬†malicious control over run-time behavior ‚Äî for example, as any dynamic&#xA;programming environment like a web browser¬†&lt;em&gt;must&lt;/em&gt; do ‚Äî the &lt;a&#xA;href=&#34;https://www.blackhat.com/presentations/bh-europe-07/Sotirov/Presentation/bh-eu-07-sotirov-apr19.pdf&#34;&gt;attacker&#xA;can significantly reduce the effective entropy of ASLR&lt;/a&gt;, thus weakening the&#xA;already-weak guarantee.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Previously low-severity bugs, like single-word out-of-bounds read errors,&#xA;become information leaks that can undo all the benefits of ASLR and enable an&#xA;attacker to craft a reliable exploit. The implied ‚Äòinterface‚Äô of an&#xA;out-of-bounds read primitive changes: while an OOB read should be guaranteed not&#xA;to happen, the ‚Äòguarantee‚Äô changes¬†from ‚Äúlikely possible but mostly harmless‚Äù to&#xA;‚Äùthere goes ASLR... now all those ROP exploits are back in scope.‚Äù&#xA;Oops.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Perhaps because ASLR was not (to my knowledge) clearly documented as a&#xA;temporary cat-and-mouse game, engineers have come to rely on it as being the&#xA;thing that makes the continued use of unsafe languages acceptable. Unsafe (and&#xA;untyped) languages will always be guaranteed to be unsafe, and we should have&#xA;used the time ASLR bought us to aggressively replace our software with&#xA;equivalents implemented in safe languages.¬†Instead, we linger in a zone of&#xA;ambiguity, taking the (slight) performance hit of ASLR yet not effectively&#xA;gaining much safety from it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Sometimes, interface perception gaps are surfaced, and the interface and&#xA;implementation change to close the gap. A classic example is the &lt;a&#xA;href=&#34;http://bugs.python.org/issue13703&#34;&gt;denial-of-service problem in hash&#xA;tables&lt;/a&gt;: If an attacker can influence or completely control the keys of the&#xA;pairs inserted into a hash table, they can cause the performance to degrade from&#xA;the (widely perceived¬†‚Äî¬†but usually explicitly disclaimed!) ~ &lt;em&gt;O&lt;/em&gt;(1)&#xA;performance guarantee for hash table lookup. Defenders can either explicitly&#xA;claim the performance guarantee by randomizing the hash function¬†in a way the&#xA;attacker cannot predict, or (if they specified a more abstract interface) switch&#xA;to an implementation (such as a red-black tree) that does not suffer from the&#xA;problem.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The Importance Of Explicit Guarantees&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The technical strength of a security mechanism is limited when it is not&#xA;backed by an explicit contract.¬†Explicit, understandable, tested, and enforced&#xA;guarantees, which could reasonably fit into the caller‚Äôs mental model, are&#xA;best.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A guarantee that is not also perceived by its callers is limited in&#xA;effectiveness. Consider an interface for a map data structure: If the&#xA;implementation is guaranteed to be a sorted tree, callers can trust that they&#xA;can iterate over the keys in sorted order without having to do any extra work.&#xA;But if they don‚Äôt understand that part of the interface definition, they might&#xA;mistakenly waste time and space by extracting all the keys into an array and&#xA;pointlessly re-sorting it. The problem is reversed if the interface is&#xA;explicitly defined to be (say) a hash table, but the caller does not realize&#xA;that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Similarly, a security guarantee that callers do not perceive ‚Äî but which is&#xA;present ‚Äî can cause callers to miscalculate their risk as being higher than it&#xA;is. While it might seem that is OK, because callers will ‚Äúerr on the side of&#xA;caution‚Äù, in fact the misperception can have an opportunity cost. (In a sense, a&#xA;self-denial-of-service.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A non-guarantee that is not perceived can also become dangerous. For example,&#xA;&lt;a&#xA;href=&#34;http://www.chromium.org/Home/chromium-security/security-faq#TOC-Why-aren-t-physically-local-attacks-in-Chrome-s-threat-model-&#34;&gt;although&#xA;documentation explicitly disclaims it&lt;/a&gt;, users often perceive that programs&#xA;can maintain (e.g.) confidentiality for the user‚Äôs data even when the underlying&#xA;platform is under¬†the physical control of an attacker. Such an¬†attacker‚Äôs&#xA;capabilities tend to be¬†well outside the users‚Äô mental models; and in any case,&#xA;documentation (a secondary interface definition) is a poor substitute for a&#xA;user-visible interface definition in the GUI (a primary definition).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Interface misperceptions are sometimes¬†widely or¬†strongly held, and can&#xA;become implicit or even explicit guarantees, and can force brittleness or even&#xA;breakage into the interface. As¬†an extreme example, consider the User Account&#xA;Control feature introduced in Windows Vista. After it was released, Microsoft&#xA;published¬†a blog post (a secondary interface definition) and¬†&lt;a&#xA;href=&#34;http://blogs.technet.com/b/markrussinovich/archive/2007/02/12/638372.aspx&#34;&gt;tried&#xA;to roll back the expectations&lt;/a&gt; that callers developed when reading the&#xA;primary definitions (the GUI and &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/User_Account_Control#Requesting_elevation&#34;&gt;aspects&#xA;of the API&lt;/a&gt;):&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;It should be clear then, that neither UAC elevations nor Protected&#xA;Mode IE define new Windows security boundaries. Microsoft has been communicating&#xA;this but I want to make sure that the point is clearly heard. Further, as Jim&#xA;Allchin pointed out in his blog post Security Features vs Convenience, Vista&#xA;makes tradeoffs between security and convenience, and both UAC and Protected&#xA;Mode IE have design choices that required paths to be opened in the IL wall for&#xA;application compatibility and ease of use.&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Perhaps the core problem with UAC, Integrity Levels, and User Interface&#xA;Privilege Isolation is that one interface, the security principal (in Windows,&#xA;represented by the &lt;a&#xA;href=&#34;http://msdn.microsoft.com/en-us/library/Aa374909.aspx&#34;&gt;access token&lt;/a&gt;),&#xA;is too hard to compose¬†with another interface: the traditional&#xA;multi-process/single principal windowing environment for presenting user&#xA;interfaces.¬†Modern platforms require a¬†&lt;a&#xA;href=&#34;http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features&#34;&gt;2-part&#xA;security principal&lt;/a&gt;¬†(see the Background section in that document), composable&#xA;with a user interface paradigm that¬†allows users to distinguish the many&#xA;cooperating principals. (Consider the &lt;a&#xA;href=&#34;https://www.usenix.org/legacy/event/sec04/tech/full_papers/shapiro/shapiro.pdf&#34;&gt;EROS&#xA;Trusted Windowing System&lt;/a&gt;¬†as an example alternative.)&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Don‚Äôt Imagine Interfaces Or Guarantees&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;At the beginning of this blog post, I poked a little fun at WAFs. Making fun&#xA;of WAFs¬†is traditional picnic¬†banter¬†in my tribe¬†(application security&#xA;engineers), so I feel it¬†is only fair to put a little¬†sacred cow hamburger on&#xA;the grill, too. Here are 2 examples.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;http://rdist.root.org/2010/01/07/timing-independent-array-comparison/&#34;&gt;Constant-time&#xA;array comparison&lt;/a&gt; to defeat &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Timing_attack&#34;&gt;timing side-channel&#xA;attacks&lt;/a&gt;. Consider for example the HMAC defense against CSRF: &lt;code&gt;token =&#xA;HMAC_SHA256(secret_key, session_token + action_name)&lt;/code&gt;. It should be&#xA;computationally infeasible for the attacker to ever guess or learn the token&#xA;value, but a timing side-channel, such as that introduced by a na√Øve byte array&#xA;comparison allows the attacker to guess the token in a feasible amount of time&#xA;and attempts (proportional to N = number of bits in token). A canonical solution&#xA;is to use an array comparison function that always takes the same amount of&#xA;time, rather than returning as soon as it finds a mismatch.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The trouble with this is that, apart from the code being slightly subtle,&#xA;there is no interface guaranteeing that the code will indeed take the same&#xA;amount of time on all inputs. Several things are permissible, given the&#xA;documented interfaces between the programmer and the ultimate execution&#xA;context:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;the compiler might find a way to optimize the function;&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;the CPU‚Äôs &lt;code&gt;XOR&lt;/code&gt; instruction might not take the same amount of&#xA;time to compute all inputs; or&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;the machine (real, or virtual!) might even transform and optimize the&#xA;code before running it.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;For example, some processor cores accept code from one instruction set as&#xA;input, but transform it to another instruction set before running it in the&#xA;processor core.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Does the expected timing guarantee still hold, given these interfaces and&#xA;their non-guarantee? As Lawson says, the solution is fragile and you have to&#xA;test it every time the execution environment changes.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An additional, essentially fatal problem is that many real-world applications&#xA;are implemented in very high-level languages like Python and Java, where there&#xA;are even more layers of abstraction and therefore even less of a constant-time&#xA;interface guarantee.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;An alternative solution, which I learned from Brad Hill, is to forget about&#xA;trying to run in constant time, and instead to &lt;a&#xA;href=&#34;https://www.isecpartners.com/blog/2011/february/double-hmac-verification.aspx&#34;&gt;blind&#xA;the attacker by making what timing information they learn useless&lt;/a&gt;. Rather&#xA;than directly comparing the timing-sensitive tokens (say, SAML blob signatures&#xA;or CSRF tokens), HMAC the received blob and the expected blob again (with a new,&#xA;separate HMAC key), and then compare those HMAC outputs (with any comparison&#xA;function you want, even¬†&lt;code&gt;memcmp&lt;/code&gt;). The attacker may indeed observe a&#xA;timing side-channel ‚Äî but the timing information will be random relative to the&#xA;input. This is due to the straightforward, documented, and tested interface&#xA;guarantee of the HMAC function as a pseudo-random function. And it works as&#xA;expected in &lt;em&gt;any&lt;/em&gt; language, on any computing substrate.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Consider another cryptography-related security conundrum: the supposed need&#xA;to clear secrets from RAM when the secrets are no longer needed, or even to&#xA;encrypt the RAM (presumably decrypting it in registers?). This is supposed¬†to&#xA;ensure that live process RAM never hits the disk (as in e.g. swap space), nor is&#xA;available to an attacker who can read the contents of RAM. The usual threat&#xA;scenario invoked to warrant this type of defense is that of a physically-local&#xA;forensic attacker, usually of relatively high capability (e.g. capable of&#xA;performing a &lt;a href=&#34;http://en.wikipedia.org/wiki/Cold_boot_attack&#34;&gt;cold boot&#xA;attack&lt;/a&gt; or a live memory dump). The goal is to not reveal secrets (e.g. Top&#xA;Secret documents, passwords, encryption keys, et c.) to such an attacker.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The trouble with this goal is that there can be¬†no interface guarantee that&#xA;clearing memory in one area will fully erase all copies of the data. The virtual&#xA;memory managers of modern operating systems, and the dynamic heap allocators of&#xA;modern language run-times, in fact guarantee very little in the way of memory&#xA;layout or deterministic behavior. Instead they provide guarantees of&#xA;more-or-less high performance, which additional security guarantees could&#xA;complicate or render infeasible.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;If you &lt;a&#xA;href=&#34;http://linux.die.net/man/3/realloc&#34;&gt;&lt;code&gt;realloc&lt;/code&gt;&lt;/a&gt; memory, the&#xA;userland run-time or the kernel might make a copy that you can no longer&#xA;reliably reference (so you can‚Äôt reliably clear it).&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;When you free memory, the kernel might not zero the pages out until the&#xA;last second before giving them to the next requestor. Thus, the time window in&#xA;which they are prone to discovery by the forensic attacker increases.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Kernel APIs like &lt;a&#xA;href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man2/mlock.2.html&#34;&gt;&lt;code&gt;mlock&lt;/code&gt;&lt;/a&gt;,&#xA;which purport to lock memory into physical RAM pages (stopping the pages from&#xA;being swapped out to disk), do¬†not necessarily work the way you expect, or even&#xA;at all.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;In a garbage-collected run-time, essentially any amount of copying,&#xA;moving, and reallocating is possible. There can be no guarantee that a piece of&#xA;data is stored in exactly 1 location in RAM, and that you can clear it.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;The same holds for virtual machines, of course.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Essentially, there can be no guarantee that a high-capability forensic&#xA;attacker cannot find secrets in RAM or swapped-out process memory; the more&#xA;complex the operating system and run-time, the less likely it is that you can&#xA;even probabilistically defeat such an attacker.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The most you can realistically do in the general case is mitigate the&#xA;problems with full disk encryption and whatever degree of physical security you&#xA;can get. In specific cases, such as cryptographic keys, you can keep the keys in&#xA;a tamper-resistant, tamper-evident &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Hardware_security_module&#34;&gt;hardware security&#xA;module&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;‚ÄúConclusion‚Äù&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;This post is partly an attempt to investigate¬†why the ‚Äúsecurity vs.&#xA;convenience‚Äù dichotomy¬†is false. I think it‚Äôs worse than a false dichotomy,&#xA;really; it‚Äôs a fundamental misconception of what security is and of what an&#xA;interface is ‚Äî and of what ‚Äòconvenience‚Äô (an impoverished¬†view of usability)&#xA;is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But also it‚Äôs an attempt to re-frame security engineering in a way¬†that&#xA;allows us¬†to¬†imagine more and better solutions to security problems. For&#xA;example, when you frame your interface as an attack surface, you find yourself&#xA;ever-so-slightly in a panic mode, and focus on how to make the surface as small&#xA;as possible. Inevitably, this tends to lead to cat-and-mouseism and poor&#xA;usability, seeming to reinforce the false dichotomy. If the panic is acute, it&#xA;can even lead to nonsensical and undefendable interfaces, and a proliferation of&#xA;false boundaries (as we saw with Windows UAC).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If instead we frame an interface as a defense surface, we are in a mindset&#xA;that allows us to treat the interface as a shield: built for defense,&#xA;&lt;em&gt;testable&lt;/em&gt;, &lt;em&gt;tested&lt;/em&gt;, covering the body; but also light-weight&#xA;enough to carry and use effectively. It might seem like a semantic game; but in&#xA;my experience, thinking of a boundary as a place to build¬†a point of strength&#xA;rather than thinking of it as something that must inevitably fall to attack&#xA;leads to solutions that in fact withstand attack better while also functioning&#xA;better for friendly¬†callers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The safest interface is still no interface ‚Äî don‚Äôt multiply interfaces&#xA;unnecessarily. But when you must expose something, expose a well-tested shield&#xA;rather than merely trying to narrow your profile or hide behind a tree.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;And Now, Your Moment Of Zen&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://twitter.com/rootkovska/status/498227129969295360&#34;&gt;https://twitter.com/rootkovska/status/498227129969295360&lt;/a&gt;&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2014/08/10/security-as-a-class-of-interface-guarantee/index.html</guid>
      <pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Aftermaths by Kodacrome</title>
      <link>https://noncombatant.org/2014/07/31/aftermaths-by-kodacrome/index.content</link>
      <description>&lt;h1&gt;&lt;em&gt;Aftermaths&lt;/em&gt; by Kodacrome&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;31 July 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôve been longing for a full-length release from Kodacrome ever since their&#xA;too-short¬†&lt;em&gt;Perla&lt;/em&gt; EP. The combination of Elissa‚Äôs cool and collected&#xA;vocals with her and Ryan‚Äôs clean and warm production is&#xA;golden.¬†&lt;em&gt;Aftermaths&lt;/em&gt; is¬†understated, moody, chill, electronic pop with&#xA;just enough surprising head-turns. The record is minimal yet full-sounding; the&#xA;minimalism serves to clarify the musical ideas and showcase the excellent&#xA;production, rather than being an affectation to hide behind.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I haven‚Äôt listened to the digital release yet, but the vinyl version really&#xA;rewards¬†high volume. The record is so spare, but you find yourself swimming in&#xA;it. Awesome.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Every song in &lt;em&gt;Aftermaths&lt;/em&gt; is a solid hit, but for me particular high&#xA;points are the spooky ‚ÄúBuggy Bumper‚Äù, the beautiful¬†vocal melody in ‚ÄúStrike The&#xA;Gold‚Äù, the harmony¬†lesson in¬†‚ÄúPanama‚Äù, and the dramatic sound design in&#xA;‚ÄúSolitary And Elect‚Äù. The wonderful video singles are &lt;a&#xA;href=&#34;https://www.youtube.com/watch?v=N2wxlUO8aIk&#34;&gt;‚ÄúImmaculada‚Äù&lt;/a&gt; and &lt;a&#xA;href=&#34;https://www.youtube.com/watch?v=YZc4mQ7tsbY&amp;amp;list=UUXq8B6MW6wcjQrKY5P4h45w&#34;&gt;‚ÄúStrike&#xA;The Gold‚Äù&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Buy &lt;a href=&#34;https://kodacrome.bandcamp.com/&#34;&gt;everything by Kodacrome on&#xA;Bandcamp&lt;/a&gt;, and &lt;a&#xA;href=&#34;https://www.youtube.com/channel/UCXq8B6MW6wcjQrKY5P4h45w&#34;&gt;enjoy their&#xA;YouTube channel&lt;/a&gt;!&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2014/07/31/aftermaths-by-kodacrome/index.html</guid>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Privacy And Security Settings in Chrome</title>
      <link>https://noncombatant.org/2014/03/11/privacy-and-security-settings-in-chrome/index.content</link>
      <description>&lt;h1&gt;Privacy And Security Settings in Chrome&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;11 March 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;&#xA;&lt;p&gt;Update 29 October 2015: My colleague Mike West packaged up these settings as&#xA;a &lt;a&#xA;href=&#34;https://chrome.google.com/webstore/detail/palmerized-chrome/ecmhflkoahhjjpddfopclbhiogelneoc&#34;&gt;Chrome&#xA;extension&lt;/a&gt;. So, now you can just install that rather than noodling through&#xA;all these settings.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Also, be aware that Chrome‚Äôs Settings UX has changed a bit since I wrote&#xA;this.&lt;/p&gt;&#xA;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.google.com/intl/en/chrome/browser/&#34;&gt;Chrome&lt;/a&gt; has a lot&#xA;of handy privacy and security options, but it isn‚Äôt always obvious how to use&#xA;them. In this post I‚Äôll demonstrate my favorites, and try to explain a bit about&#xA;what they do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My goal with these configuration changes is to get Chrome to expose less&#xA;attack surface to potentially malicious web pages, and to be less chatty on the&#xA;network.¬†I definitely can‚Äôt and don‚Äôt guarantee that they will work for you or&#xA;solve any particular problem you have. But maybe you‚Äôll find this to be a fun&#xA;learning experience. (Also, although I work for Google on the Chrome Security&#xA;team, I am not blogging in any official capacity, and I don‚Äôt have an omniscient&#xA;view of Chrome security.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Chrome has a feature that allows you to create multiple ‚Äúprofiles‚Äù, each with&#xA;their own distinct settings. Because we want to change the settings in a way&#xA;that will make some web sites work less well (or even not at all), we won‚Äôt want&#xA;to be locked in that mode. Therefore, we need to create a new, distinct profile&#xA;to use as the private/secure mode. That way, you can always go back to a regular&#xA;profile easily, to get normal web functionality.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, create a new profile:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Create a new profile.&#34;&#xA;src=&#34;01-create-new-profile.png&#34; width=&#34;746&#34; height=&#34;610&#34;/&gt;&lt;figcaption&gt;Create a&#xA;new profile.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;After creating the new profile, you get a new window running that profile&#xA;(note the cat icon in the upper right corner):&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;After creating a new profile.&#34; width=&#34;747&#34;&#xA;height=&#34;612&#34; src=&#34;02-after-profile-creation.png&#34;/&gt;&lt;figcaption&gt;After creating a&#xA;new profile.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;In this privacy- and security-sensitive special profile, do not sign in to&#xA;Chrome. Signing in to Chrome, also known as Chrome Sync, is a convenient feature&#xA;that syncs all your settings across all your signed-in Chrome profiles on all&#xA;your devices, and makes it easier to log in to Google services. You might like&#xA;it in your regular mode profile, but we want this profile be more¬†loosely&#xA;coupled to the cloud.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Go to the &lt;strong&gt;Settings&lt;/strong&gt; page¬†&lt;em&gt;in the new profile‚Äôs&#xA;window&lt;/em&gt;, and click on ‚ÄúShow advanced settings...‚Äù (shown here at the&#xA;bottom):&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Show Advanced Settings.&#34;&#xA;src=&#34;03-advanced-settings.png&#34; width=&#34;786&#34; height=&#34;612&#34;/&gt;&lt;figcaption&gt;Show&#xA;Advanced Settings.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Scroll down to the¬†&lt;strong&gt;Privacy&lt;/strong&gt; section of the&#xA;&lt;strong&gt;Settings&lt;/strong&gt; page, and check or un-check the various options as you&#xA;see fit. Here‚Äôs how I set them for this profile:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;My preferred Privacy settings.&#34;&#xA;src=&#34;04-privacy-settings.png&#34; width=&#34;786&#34; height=&#34;611&#34;/&gt;&lt;figcaption&gt;My preferred&#xA;Privacy settings.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;These options (except for Do Not Track) cause Chrome to send extra traffic on&#xA;the network (some of that traffic is encrypted), and is a prime candidate for&#xA;un-checking ‚Äî especially if you intend to use Chrome with &lt;a&#xA;href=&#34;https://www.torproject.org/&#34;&gt;Tor&lt;/a&gt;. For more information, see the &lt;a&#xA;href=&#34;https://www.google.com/intl/en/chrome/browser/privacy/whitepaper.html&#34;&gt;Chrome&#xA;Privacy Whitepaper&lt;/a&gt;. (In particular, think carefully about disabling phishing&#xA;and malware protection; see &lt;a&#xA;href=&#34;//www.google.com/intl/en/chrome/browser/privacy/whitepaper.html#malware&#34;&gt;its&#xA;section in the privacy whitepaper&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Click on that¬†&lt;strong&gt;Content settings...&lt;/strong&gt; button here in&#xA;the¬†&lt;strong&gt;Privacy&lt;/strong&gt; section, as well:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Block 3rd party data and clear all upon exit.&#34;&#xA;src=&#34;04a-cookies-local-data.png&#34; width=&#34;721&#34; height=&#34;366&#34;/&gt;&lt;figcaption&gt;Block 3rd&#xA;party data and clear all upon exit.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;I‚Äôve changed the¬†&lt;strong&gt;Cookies&lt;/strong&gt; and site data settings, as you can&#xA;see: ‚ÄúBlock third-party cookies and site data‚Äù means that when you are reading&#xA;e.g. http://blog.example.com, an ad included ¬†in the page from&#xA;http://ad-company.com cannot set new cookies or site data. ‚ÄúKeep local data only&#xA;until I quit my browser‚Äù means that Chrome will clear the locally-stored data&#xA;(like cookies and &lt;a href=&#34;http://diveintohtml5.info/storage.html&#34;&gt;HTML5&#xA;LocalStorage&lt;/a&gt;) when you quit. (This is similar to, but not exactly the same&#xA;as, &lt;a href=&#34;https://support.google.com/chrome/answer/95464?hl=en&#34;&gt;what Chrome‚Äôs&#xA;Incognito mode provides&lt;/a&gt;.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Scroll down and you will see many more options for¬†&lt;strong&gt;Content&#xA;settings&lt;/strong&gt;. I‚Äôll highlight some that are particularly important. First,&#xA;block JavaScript by default:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Block JavaScript by default.&#34;&#xA;src=&#34;05-no-javascript.png&#34; width=&#34;343&#34; height=&#34;132&#34;/&gt;&lt;figcaption&gt;Block&#xA;JavaScript by default.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;However, you can optionally re-enable JavaScript in HTTPS pages:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Enable JavaScript on HTTPS page loads.&#34;&#xA;src=&#34;06-javascript-exceptions.png&#34; width=&#34;549&#34; height=&#34;409&#34;/&gt;&lt;figcaption&gt;Enable&#xA;JavaScript on HTTPS page loads.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;I like to do this so that I can get rich JavaScript functionality in web&#xA;sites like Twitter and Gmail that go to the trouble of authenticating themselves&#xA;(and their code) using HTTPS ‚Äî but sites serving unauthenticated junk cannot run&#xA;JavaScript. It‚Äôs interesting how many sites still work without JavaScript.&#xA;(Sometimes they even work slightly better.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next, we disallow external protocol handlers, and we block all plug-ins:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Disallow external protocol handlers and block&#xA;all plugins.&#34; src=&#34;07-no-handlers-block-plugins.png&#34; width=&#34;549&#34;&#xA;height=&#34;340&#34;/&gt;&lt;figcaption&gt;Disallow external protocol handlers and block all&#xA;plugins.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Important note about blocking plug-ins: The ‚ÄúClick to play‚Äù option means that&#xA;plug-ins are disabled by default, but that you can (left-)click on their area on&#xA;the screen to run them. However, that left-click is &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Clickjacking&#34;&gt;clickjackable&lt;/a&gt;. It‚Äôs better&#xA;to select ‚ÄúBlock all‚Äù, which is really ‚Äúright-click to play‚Äù ‚Äî yes, you can&#xA;still run plug-ins when you want to. To run plug-ins, right-click on their&#xA;screen area, which brings up a native-type (operating system) context menu, and&#xA;select¬†&lt;strong&gt;Run This Plug-in&lt;/strong&gt;:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Run This Plug-in&#34;&#xA;src=&#34;screen-shot-2014-01-19-at-9-52-26-pm.png&#34; width=&#34;644&#34;&#xA;height=&#34;571&#34;/&gt;&lt;figcaption&gt;You can run or not run plug-ins at&#xA;run-time.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Thus, you can be ensured that plug-ins run only when you want them to.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Next, we disable location services and notifications:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Disable location services and notifications.&#34;&#xA;src=&#34;08-no-location-no-notifications.png&#34; width=&#34;517&#34;&#xA;height=&#34;341&#34;/&gt;&lt;figcaption&gt;Disable location services and&#xA;notifications.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Disallow sites from taking over the mouse or capturing data from media&#xA;sensors:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Disallow sites from taking over the mouse or&#xA;capturing data from media sensors.&#34; src=&#34;09-no-mouse-control-no-media.png&#34;&#xA;width=&#34;587&#34; height=&#34;405&#34;/&gt;&lt;figcaption&gt;Disallow sites from taking over the mouse&#xA;or capturing data from media sensors.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Turn off un-sandboxed¬†plugins and don‚Äôt allow automatic downloads:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;No un-sandboxed (NPAPI) plugins and no&#xA;automatic downloads.&#34; src=&#34;10-no-unsandboxed-no-auto-download.png&#34; width=&#34;591&#34;&#xA;height=&#34;347&#34;/&gt;&lt;figcaption&gt;No un-sandboxed (NPAPI) plugins and no automatic&#xA;downloads.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Do not remember passwords or form field entries:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Do not remember passwords or form field&#xA;entries.&#34; src=&#34;11-no-passwords-no-forms.png&#34; width=&#34;600&#34;&#xA;height=&#34;139&#34;/&gt;&lt;figcaption&gt;Do not remember passwords or form field&#xA;entries.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Tell Chrome not to auto-detect what language the page is in, to ask where to&#xA;place each download, and not to fetch certificate revocation data:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Don‚Äôt auto-translate, ask where to place each&#xA;download, and don‚Äôt fetch certificate revocation data.&#34;&#xA;src=&#34;12-languages-downloads-revocation.png&#34; width=&#34;536&#34;&#xA;height=&#34;347&#34;/&gt;&lt;figcaption&gt;Don‚Äôt auto-translate, ask where to place each&#xA;download, and don‚Äôt fetch certificate revocation data.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Note that you can still use Google Translate by right-clicking on a page and&#xA;selecting¬†&lt;strong&gt;Translate to English&lt;/strong&gt; (or whatever your native&#xA;language is). Un-checking ‚ÄúOffer to translate...‚Äù disables the automatic&#xA;language detection functionality.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We leave certificate revocation disabled by default because &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol&#34;&gt;the&#xA;protocol that does it&lt;/a&gt; can leak information about your browsing to a&#xA;server.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Finally, visit chrome://plugins and affirmatively disable the ones you don‚Äôt&#xA;need, for good measure:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Disable plug-ins.&#34;&#xA;src=&#34;screen-shot-2014-01-19-at-10-09-03-pm.png&#34; width=&#34;774&#34;&#xA;height=&#34;678&#34;/&gt;&lt;figcaption&gt;Disable plug-ins.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Have fun!&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2014/03/11/privacy-and-security-settings-in-chrome/index.html</guid>
      <pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Followup To Downloading Software Safely</title>
      <link>https://noncombatant.org/2014/03/05/followup-to-downloading-software-safely/index.content</link>
      <description>&lt;h1&gt;Followup To Downloading Software Safely&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;5 March 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôve received some emails, tweets, and Hacker News comments about my post &lt;a&#xA;href=&#34;http://noncombatant.org/2014/03/03/downloading-software-safely-is-nearly-impossible/&#34;&gt;Downloading&#xA;Software Safely Is Nearly Impossible&lt;/a&gt;. Thanks for reading and I hope you got&#xA;a kick out of my mumblings.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôd like to address some of the comments and questions people had, as briefly&#xA;as possible.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Yes, you need a trusted computing base (TCB). I alluded to this when I&#xA;said ‚ÄúYou‚Äôre pretty sure the NSA did not¬†&lt;a&#xA;href=&#34;http://www.forbes.com/sites/erikkain/2013/12/29/report-nsa-intercepting-laptops-ordered-online-installing-spyware/&#34;&gt;interdict&#xA;it during shipment&lt;/a&gt;, and thus that it comes only with the flaky goatware&#xA;Microsoft, Lenovo, and any number of Lenovo‚Äôs business partners intended for it&#xA;to have.‚Äù Our goal as security engineers is to limit the size of the TCB. It is,&#xA;after all, quite goaty already...&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;The TCB includes the set of X.509 trust anchors for our TLS&#xA;library.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Yes, I harp on and on about HTTPS. That is because authenticating the&#xA;delivery channel ‚Äî while not necessarily sufficient to indicate code integrity ‚Äî&#xA;is the bare minimum effort we should require from our software sources.&#xA;Especially for software that is related to cryptography and security. Here is&#xA;GnuPG‚Äôs bug tracker; would you want to log into it or report security-sensitive&#xA;bugs using it? :&lt;/p&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;figure&gt;&lt;img alt=&#34;GnuPG‚Äôs bug tracker: Not inspiring confidence.&#34;&#xA;src=&#34;gnupg-bug-tracker.png&#34; width=&#34;787&#34; height=&#34;518&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;figcaption&gt;Not inspiring confidence.&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Also note that there are at least 2 different problems with HTTPS in that&#xA;post: HTTPS not being available, and the HTTPS site differing in contents from&#xA;the HTTP site. Again, for a software distribution site, we‚Äôd like &lt;a&#xA;href=&#34;http://noncombatant.org/2014/01/16/security-smells-for-modern-software/&#34;&gt;something&#xA;that smells a bit better&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Some people claim that PGP keyservers don‚Äôt need to use HTTPS, because&#xA;the keys authenticate themselves with the &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Web_of_trust&#34;&gt;web of trust&lt;/a&gt;. And it‚Äôs&#xA;true, the WoT does allow us to fairly easily distinguish &lt;a&#xA;href=&#34;http://pgp.mit.edu/pks/lookup?op=vindex&amp;amp;search=0x47518EC82F1123AD&#34;&gt;this&#xA;fake key&lt;/a&gt; from &lt;a&#xA;href=&#34;http://pgp.mit.edu/pks/lookup?op=vindex&amp;amp;search=0xC11B36DC9C7DD150&#34;&gt;this&#xA;real key&lt;/a&gt; for EFF‚Äôs Seth Schoen. But,&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Seth is one of the most well-connected people in the WoT, so a key with&#xA;only 1 signature stands out as odd. Would a fake key for a normal person stand&#xA;out so well? The WoT is not as good an authentication mechanism as we might hope&#xA;it to be. As nice as it is, verifying software packages based on PGP keys we&#xA;grab from key servers is thus not a slam-dunk alternative to or replacement for&#xA;HTTPS ‚Äî and nevermind the usability delta between HTTPS and PGP.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;By now, we understand that metadata for communications is at least as&#xA;valuable as the contents, in many cases. Shouldn‚Äôt PGP users have&#xA;confidentiality in their directory lookups? Yes.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Yes, as many commentators noted, we should use something like &lt;a&#xA;href=&#34;http://technet.microsoft.com/en-us/library/cc750035.aspx&#34;&gt;Authenticode&lt;/a&gt;:&#xA;binaries should be signed, and their signatures checked at run- or install-time.&#xA;However, that still requires a TCB of code-signing trust anchors (the same&#xA;companies that are your TLS trust anchors), and the difficulty for users of&#xA;verifying the code authors is at least as difficult as verifying the&#xA;authenticity of an HTTPS web origin. I.e., not super easy. Definitely better&#xA;than nothing.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;This is an extremely hard problem, no doubt about it. Although my post&#xA;is very snarky and sarcastic, I don‚Äôt think it‚Äôs an easy problem. I also fight&#xA;the problem uphill.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;A big part of the solution is to isolate sources of code based on their&#xA;cryptographic identity. This is how Android works, and it is how the open web&#xA;works (when you use HTTPS or other authenticated origins). I‚Äôm not very&#xA;knowledgeable about iOS, but I understand they also rely on code-signing and on&#xA;sandboxing. If the isolation is strong, much of the risk is reduced ‚Äî remember,&#xA;a big part of my problem was that PuTTY (or any program) runs with the full&#xA;privilege of my user account on the platform. Reduce the privilege, reduce the&#xA;problem.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;If course, now the problem is exposing a privilege-granting UI to users so&#xA;that applications can share with explicit approval. One size does not fit all,&#xA;and that continues to be a hard secure UX problem.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Finally, I‚Äôm not really a fan of Web Crypto. I think more mistakes will&#xA;be made with it than successes; it‚Äôs just that I also think that of native-code&#xA;crypto. The problem does not lie with the implementation environment, but with&#xA;the (often perverse) incentives developers have combined with the high level of&#xA;expertise needed to use cryptography appropriately and well. Clearly, all the&#xA;people who hope to use web crypto to replace TLS, implement DRM, achieve&#xA;security against the server that sent the JS, implement homebrew&#xA;challenge-response protocols, and so on are in for a heartbreak. But still,&#xA;there are potentially good applications for cryptographic algorithms exposed to&#xA;JavaScript, and native code does not have a privileged place in crypto. If&#xA;anything, due to the lack of privilege separation in legacy platforms, native&#xA;code is a worse place to put powerful code.&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2014/03/05/followup-to-downloading-software-safely/index.html</guid>
      <pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>TrustyCon Recap And Video</title>
      <link>https://noncombatant.org/2014/03/03/trustycon-recap-and-video/index.content</link>
      <description>&lt;h1&gt;TrustyCon Recap And Video&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;3 March 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Last Thursday we had a great time at &lt;a&#xA;href=&#34;https://trustycon.org/&#34;&gt;TrustyCon&lt;/a&gt;, the trustworthy &lt;a&#xA;href=&#34;http://arstechnica.com/information-technology/2014/01/trustycon-security-counter-convention-planned-for-rsa-refusniks/&#34;&gt;alternative&#xA;to the RSA Conference&lt;/a&gt;. Many thanks are due to the conference &lt;a&#xA;href=&#34;https://trustycon.org/sponsors/&#34;&gt;sponsors&lt;/a&gt; and organizers: iSEC&#xA;Partners, EFF, and DEFCON. My old iSEC boss &lt;a&#xA;href=&#34;http://unhandled.com/about/&#34;&gt;Alex Stamos&lt;/a&gt;, and lots of EFF employees,&#xA;put in a lot of volunteer hours to make the conference a success. Thank you!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I really like single-track conferences. Everyone has a shared experience, and&#xA;there is much less of the ‚Äúlobby-con‚Äù or ‚Äúbar-con‚Äù phenomenon, which I don‚Äôt&#xA;enjoy much. This only works if all the talks are good, and at TrustyCon they&#xA;sure were. My favorite was &lt;a href=&#34;http://www.cs.princeton.edu/~felten/&#34;&gt;Ed&#xA;Felten&lt;/a&gt;‚Äôs talk that closed out the day. Annalee Newitz has &lt;a&#xA;href=&#34;http://io9.com/this-lecture-is-the-one-primer-you-need-on-nsa-surveill-1533564028&#34;&gt;a&#xA;good write-up of it on io9&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;a href=&#34;https://www.youtube.com/watch?v=lkO8SNiDSw0&#34;&gt;entire conference&#xA;is on YouTube&lt;/a&gt;. My talk, co-presented with &lt;a&#xA;href=&#34;http://crypto.stanford.edu/~dabo/&#34;&gt;Dan Boneh&lt;/a&gt;, starts at about 4:33:00&#xA;‚Äî yes, 4 hours 33 minutes; the entire conference is 1 long video.¬†The sound cuts&#xA;out at the beginning but then it comes back quickly, don‚Äôt worry. Boneh‚Äôs topic,&#xA;cryptographic software obfuscation, should amuse and disturb you equally. :)&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2014/03/03/trustycon-recap-and-video/index.html</guid>
      <pubDate>Mon, 03 Mar 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Downloading Software Safely Is Nearly Impossible</title>
      <link>https://noncombatant.org/2014/03/03/downloading-software-safely-is-nearly-impossible/index.content</link>
      <description>&lt;h1&gt;Downloading Software Safely Is Nearly Impossible&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;3 March 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;aside&gt;&#xA;    &lt;p&gt;NOTE: I have written &lt;a href=&#34;/2014/03/05/followup-to-downloading-software-safely/&#34;&gt;a follow-up post to&#xA;            respond to some questions this post may raise&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/aside&gt;&#xA;&#xA;&lt;p&gt;Let‚Äôs say you have a brand-new Windows laptop and you‚Äôre just oh, so&#xA;    happy. You‚Äôre pretty sure the NSA did not &lt;a&#xA;        href=&#34;http://www.forbes.com/sites/erikkain/2013/12/29/report-nsa-intercepting-laptops-ordered-online-installing-spyware/&#34;&gt;interdict&#xA;        it during shipment&lt;/a&gt;, and thus that it comes only with the flaky goatware&#xA;    Microsoft, Lenovo, and any number of Lenovo‚Äôs business partners intended for&#xA;    it to have. Now all you need is an SSH client so that you can connect to&#xA;    your Linux machines, and all will be peachy. Here is how to get an SSH&#xA;    client.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&#xA;    &lt;li&gt;Do a web search for &lt;a href=&#34;https://www.google.com/search?q=windows+ssh+client&amp;amp;oq=windows+ssh+client&#34;&gt;[&#xA;            windows ssh client ]&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Follow the first hit to¬†&lt;a href=&#34;http://www.putty.org/&#34;&gt;http://www.putty.org/&lt;/a&gt;. Now, since you want&#xA;        to get the good and true PuTTY that Simon Tatham wrote, and not some&#xA;        unauthenticated malware, you check for the lock icon and the ‚Äúhttps://‚Äù URL&#xA;        scheme. It‚Äôs not there ‚Äî worrying, considering that Tatham is supposedly an&#xA;        encryption software developer.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;No need to worry, though; &lt;a href=&#34;http://www.whois.com/whois/putty.org&#34;&gt;putty.org is not even owned by&#xA;            Tatham&lt;/a&gt;. It‚Äôs currently owned by someone named ‚Äúdenis bider‚Äù, who&#xA;        presumably just likes to domain-squat on other people‚Äôs product names and&#xA;        provide links. OK. Let‚Äôs follow the link to...&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;&lt;a&#xA;            href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34;&gt;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&lt;/a&gt;.&#xA;        Ahh, this has Tatham‚Äôs name right in the path part of the URL, so... wait,&#xA;        is that good? Actually, no; only the hostname can indicate site&#xA;        ownership.¬†&lt;a href=&#34;http://www.whois.com/whois/greenend.org.uk&#34;&gt;Richard&#xA;            Kettlewell currently owns greenend.org.uk&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Look for, and fail to find, the lock icon and the ‚Äúhttps://‚Äù URL scheme.&#xA;        Again, shouldn‚Äôt cryptography and security software ‚Äî like all software ‚Äî be&#xA;        delivered always and only via an authenticated service?&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Manually add the ‚Äúhttps://‚Äù. Note that the site does not respond to&#xA;        HTTPS. Begin to doubt that this is the right site.&lt;br /&gt;&#xA;&#xA;        &lt;figure&gt;&lt;img alt=&#34;Screenshot showing that PuTTY is not available via HTTPS.&#34; src=&#34;no-https-putty.png&#34;&#xA;                width=&#34;733&#34; height=&#34;461&#34; loading=&#34;lazy&#34; /&gt;&#xA;            &lt;figcaption&gt;PuTTY is not available via&#xA;                HTTPS.&lt;/figcaption&gt;&#xA;        &lt;/figure&gt;&#xA;&#xA;    &lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Not to worry! Scroll down and note that Tatham offers links to RSA and&#xA;        DSA cryptographic signatures of the binaries, e.g.¬†&lt;a&#xA;            href=&#34;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe.RSA&#34;&gt;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe.RSA&lt;/a&gt;.&#xA;        Note that &lt;a href=&#34;http://www.whois.com/whois/earth.li&#34;&gt;earth.li is&#xA;            currently owned by Jonathan McDowell&lt;/a&gt;. When you click the link to the&#xA;        signature, you do indeed get an RSA signature of something, but there is no&#xA;        way to know for sure who the signer was or what they signed ‚Äî any attacker&#xA;        who could have compromised the site to poison the executable PuTTY programs&#xA;        (or performed a man-in-the-middle attack on your connection to the site)&#xA;        could also just as easily have compromised the signatures.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Attempt to download the signature via HTTPS instead,¬†&lt;a&#xA;            href=&#34;https://the.earth.li/~sgtatham/putty/latest/x86/putty.exe.RSA&#34;&gt;https://the.earth.li/~sgtatham/putty/latest/x86/putty.exe.RSA&lt;/a&gt;,&#xA;        and note that the server responds with a 404. Become increasingly&#xA;        suspicious.&lt;br /&gt;&#xA;&#xA;        &lt;figure&gt;&lt;img alt=&#34;Screenshot showing that the RSA signature file is not found.&#34; src=&#34;https-signature-404.png&#34;&#xA;                width=&#34;666&#34; height=&#34;403&#34; loading=&#34;lazy&#34; /&gt;&#xA;            &lt;figcaption&gt;Is this a bad sign? It feels&#xA;                bad.&lt;/figcaption&gt;&#xA;        &lt;/figure&gt;&#xA;&#xA;    &lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Take a breather to read &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/keys.html&#34;&gt;Tatham‚Äôs&#xA;            explanation of how overly-complex his signing infrastructure is&lt;/a&gt;, but not&#xA;        why the delivery channel is anonymous.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Briefly wonder if Tatham‚Äôs PGP keys are noted in a central registry,&#xA;        such as MIT‚Äôs PGP key server. &lt;a href=&#34;http://pgp.mit.edu/pks/lookup?search=tatham&amp;amp;op=index&#34;&gt;Nope&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Briefly wonder if it matters that MIT‚Äôs PGP key server is&#xA;        unauthenticated.&lt;br /&gt;&#xA;&#xA;        &lt;figure&gt;&lt;img alt=&#34;Screenshot showing that the MIT key server is&#xA;unauthenticated.&#34; src=&#34;no-https-keyserver.png&#34; width=&#34;745&#34; height=&#34;503&#34; loading=&#34;lazy&#34; /&gt;&#xA;            &lt;figcaption&gt;The MIT key server is&#xA;                unauthenticated.&lt;/figcaption&gt;&#xA;        &lt;/figure&gt;&#xA;&#xA;    &lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Recall that even if you could get Tatham‚Äôs PGP key from an authenticated&#xA;        key server, you‚Äôd still need to download a PGP program. Rather than repeat&#xA;        the steps in this tutorial for GnuPG, give up and decide to download an&#xA;        unauthenticated copy of PuTTY.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Note that Tatham refers you to¬†&lt;a&#xA;            href=&#34;http://www.pc-tools.net/win32/freeware/md5sums/&#34;&gt;http://www.pc-tools.net/win32/freeware/md5sums/&lt;/a&gt;&#xA;        for an MD5 calculator for Windows, and briefly consider at least checking&#xA;        the anonymous (hence useless) MD5 digest for PuTTY. Noting that&#xA;        www.pc-tools.net also does not respond to HTTPS, forego that waste of&#xA;        time.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Having downloaded putty.exe, think long and hard before clicking on it.&#xA;        Note that when you execute it, it will run with the full privilege of your&#xA;        user account on this Windows machine. It will have the ability to read,&#xA;        delete, and modify all your documents and emails, and will be able to post&#xA;        your porn collection to Wikipedia.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Hope that it does not.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Click on putty.exe anyway. Connect to your account on your Linux server,&#xA;        which is now &lt;em&gt;also&lt;/em&gt; under the control of an unauthenticated program&#xA;        from the internet. Consider that, if the download was not poisoned, this&#xA;        thing calling itself ‚ÄúPuTTY‚Äù was written by a developer who might know how&#xA;        to implement RSA in C, but who does not know how or why to use RSA. (Are you&#xA;        even connected to your real Linux server, at this point? Hard to know.)&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Note that, suddenly, &lt;a href=&#34;http://www.w3.org/TR/WebCryptoAPI/&#34;&gt;Web&#xA;            Crypto&lt;/a&gt; is starting to look damn good despite &lt;a&#xA;            href=&#34;http://rdist.root.org/2010/11/29/final-post-on-javascript-crypto/&#34;&gt;the&#xA;            objections of the native code chauvinists&lt;/a&gt;. At least JavaScript runs&#xA;        under the &lt;a href=&#34;http://en.wikipedia.org/wiki/Same-origin_policy&#34;&gt;same&#xA;            origin policy&lt;/a&gt; and is sandboxed by &lt;a&#xA;            href=&#34;http://www.chromium.org/developers/design-documents/process-models&#34;&gt;Chrome‚Äôs&#xA;            multi-process model&lt;/a&gt;, so it wouldn‚Äôt have the full run of your Windows&#xA;        user account.&lt;/li&gt;&#xA;&#xA;    &lt;li&gt;Despair.&lt;/li&gt;&#xA;&#xA;&lt;/ol&gt;</description>
      <author>Chris Palmer</author>
      <guid>2014/03/03/downloading-software-safely-is-nearly-impossible/index.html</guid>
      <pubDate>Mon, 03 Mar 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Maps And Their Applications</title>
      <link>https://noncombatant.org/2014/03/02/maps-and-their-applications/index.content</link>
      <description>&lt;h1&gt;Maps And Their Applications&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;2 March 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This morning I was hanging out with my &lt;a&#xA;href=&#34;http://hackbrightacademy.com/&#34;&gt;Hackbright&lt;/a&gt; mentee, and we discussed&#xA;how one of her programming problems could be solved using a Python&#xA;dictionary or JavaScript object. In fact, you can use a dictionary in lots&#xA;of ways. Here are some:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;As a set (an unordered group of elements, each element appearing only&#xA;once). For example, you can get the unique elements of a list or array by&#xA;collapsing them into the keys of a dictionary.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;As the underlying storage for the fields of a dynamic object. ‚ÄúDynamic&#xA;object‚Äù here means ‚Äúan object that gets fields added or removed‚Äù. E.g. in&#xA;JavaScript, you can add new fields and values at any time to an object,&#xA;while in Java or C the fields of an object are static and unchanging once&#xA;defined. (And, for that reason, accessing the fields of a Java or C object&#xA;can be done in a much faster way.)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;As a &lt;a href=&#34;http://en.wikipedia.org/wiki/Sparse_array&#34;&gt;sparse&#xA;array&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;As the storage for a &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Memoization&#34;&gt;memoized function&lt;/a&gt; (which&#xA;can, in turn, be a way to optimize expensive functions, including expensive&#xA;recursive functions). &lt;a&#xA;href=&#34;https://wiki.python.org/moin/PythonDecoratorLibrary#Memoize&#34;&gt;With&#xA;Python decorators, you can easily memoize any function&lt;/a&gt;, and the&#xA;canonical way to do that is with a dictionary.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Many other cache applications.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Dictionary_coder&#34;&gt;Data compression&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;For the rest of this post I‚Äôll use the term¬†&lt;em&gt;map&lt;/em&gt; to refer to what&#xA;various languages/APIs/sources in the literature call &lt;em&gt;dictionaries&lt;/em&gt;,&#xA;&lt;em&gt;hashes&lt;/em&gt;, ‚Äúobjects‚Äù (only? in a JavaScript context), &lt;em&gt;associative&#xA;arrays&lt;/em&gt;, &lt;em&gt;symbol tables&lt;/em&gt;, or &lt;em&gt;tables&lt;/em&gt;. A map is any data&#xA;structure that groups a dynamic number of¬†&lt;em&gt;key-value pairs&lt;/em&gt; together,&#xA;and allows us to retrieve values by key, to insert new key-value pairs, and&#xA;to update the values associated with keys. We almost always require that the&#xA;data structure allow us to do these operations very quickly. (After all,&#xA;we‚Äôre going to be using them all the time to solve lots of problems!)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Most, but not all, languages come with some kind of map interface built-in. Notably, the C language does not (but C++ does).&lt;/p&gt;&#xA;&lt;p&gt;You can implement a map in many ways. Here are some examples:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;A simple &lt;a href=&#34;http://en.wikipedia.org/wiki/Linked_list&#34;&gt;linked&#xA;list&lt;/a&gt; of pairs. This will be slow (O(n)), and insufficient for general&#xA;use.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;A &lt;a href=&#34;http://en.wikipedia.org/wiki/Hash_table&#34;&gt;hash table&lt;/a&gt;. This&#xA;is generally very fast (roughly O(1)), although it requires you to have a&#xA;good hash function for your key type. Most languages allow you to provide a&#xA;custom hash function for your object types (e.g. the &lt;code&gt;__hash__&lt;/code&gt;&#xA;method in Python, or the &lt;code&gt;hashCode&lt;/code&gt; method in Java).&lt;/li&gt;&#xA;&#xA;&lt;li&gt;A &lt;a href=&#34;http://en.wikipedia.org/wiki/Binary_search_tree&#34;&gt;binary&#xA;search tree&lt;/a&gt;. Fast (O(lg n)). Unlike in a hash table, the keys will be&#xA;ordered. ¬†This could be a useful property.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;A &lt;a href=&#34;http://en.wikipedia.org/wiki/Skip_list&#34;&gt;skip list&lt;/a&gt;.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Note that although a general-purpose map is useful for many problems, it is&#xA;not always¬†ideal for a particular problem. For example, although you can use a&#xA;map as a set, it‚Äôs a bit of a waste of space ‚Äî it‚Äôs a set of key-value pairs,&#xA;but you only need the key. Similarly, maybe you need not only to take the unique&#xA;elements from a group of elements, but also to print them out in sorted order.&#xA;If your dictionary type is implemented as a hash table, you‚Äôll have to sort the&#xA;keys (at an additional cost of O(n lg n) plus the memory allocation to store the&#xA;keys in an array). By contrast, if your dictionary is implemented as a binary&#xA;search tree, after you are done inserting all the elements, they‚Äôll already be&#xA;sorted. (The trade-off is that it might have cost more to insert the elements.&#xA;When in doubt, test!)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Because one size does not fit all, many languages provide a variety of&#xA;map and set implementations. For example, C++ has &lt;a&#xA;href=&#34;http://www.cplusplus.com/reference/map/map/&#34;&gt;map&lt;/a&gt;, &lt;a&#xA;href=&#34;http://www.cplusplus.com/reference/set/&#34;&gt;set&lt;/a&gt;, &lt;a&#xA;href=&#34;http://www.cplusplus.com/reference/unordered_map/&#34;&gt;unordered_map&lt;/a&gt;,&#xA;and &lt;a&#xA;href=&#34;http://www.cplusplus.com/reference/unordered_set/&#34;&gt;unordered_set&lt;/a&gt;.&#xA;The &lt;a&#xA;href=&#34;http://docs.oracle.com/javase/7/docs/api/java/util/Map.html&#34;&gt;Java Map&#xA;interface&lt;/a&gt; has many implementations. Other languages, like Python, Perl,&#xA;Ruby, and JavaScript, provide just one map implementation ‚Äî usually a hash&#xA;table of some kind. Some, like Python, also provide a distinct &lt;a&#xA;href=&#34;http://docs.python.org/2/library/stdtypes.html#set&#34;&gt;set&lt;/a&gt; type or&#xA;API, and you should use it when it fits your needs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It‚Äôs a good exercise to implement a map yourself, in at least one way, in&#xA;at least one language. I recommend starting with a simple hash table, and&#xA;then working up to a good binary search tree like a &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Red%E2%80%93black_tree&#34;&gt;red-black&#xA;tree&lt;/a&gt;.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2014/03/02/maps-and-their-applications/index.html</guid>
      <pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>A Favorite Pedal: Strymon El Capistan</title>
      <link>https://noncombatant.org/2014/02/09/a-favorite-pedal-strymon-el-capistan/index.content</link>
      <description>&lt;h1&gt;A Favorite Pedal: Strymon El Capistan&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;9 February 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So here‚Äôs another favorite guitar effects pedal of mine, the &lt;a&#xA;        href=&#34;http://www.strymon.net/products/elcapistan/&#34;&gt;Strymon El&#xA;        Capistan&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img alt=&#34;Strymon El Capistan&#34; src=&#34;el-capistan.jpg&#34; width=&#34;800&#34; height=&#34;791&#34; loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;Strymon El&#xA;        Capistan&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;This a &lt;em&gt;very&lt;/em&gt; nice machine. It‚Äôs a digital signal processor with&#xA;    software to emulate an old-timey magnetic tape-based echo machine, like the&#xA;    &lt;a href=&#34;http://en.wikipedia.org/wiki/Echoplex&#34;&gt;Echoplex&lt;/a&gt;. The Echoplex&#xA;    is fragile, has very limited delay time, and over time the tape would get&#xA;    stretched, worn out, wrinkled, and generally start to sound very weird. El&#xA;    Capistan emulates all the weirdness (except the fragility!), and adds a few&#xA;    more features. My favorite feature is the quite good &lt;a&#xA;        href=&#34;http://en.wikipedia.org/wiki/Reverberation#Spring_reverberators&#34;&gt;spring&#xA;        reverb&lt;/a&gt; emulation. Here is my guitar dry (guitar¬†‚Üí El Capistan¬†‚Üí speaker&#xA;    emulator¬†‚Üí mixing board ‚Üí Garage Band), and then again with the reverb on&#xA;    and a tiny amount of slapback (very short) echo:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;el-capistan-demo-1.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;el-capistan-demo-1.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;Here‚Äôs a snippet of ‚ÄúSunny‚Äù by Bobby Hebb with the reverb and&#xA;    slapback:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;el-capistan-demo-2.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;el-capistan-demo-2.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;A good echo pedal must have a tap tempo feature (the button on the left),&#xA;    allowing you to set the delay time by tapping your foot. Here I use it to&#xA;    repeat what I play, delayed by a dotted eight-note, to do a fake version of&#xA;    ‚ÄúFrame By Frame‚Äù by King Crimson:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;el-capistan-demo-3.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;el-capistan-demo-3.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;Another great feature of Echoplexes (that El Capistan emulates ‚Äî of&#xA;    course) is that it had multiple playback heads, allowing you to get multiple&#xA;    echo times from the same input signal. Here I use it (with the spring reverb&#xA;    too) to do a pretty bad rendition of the introduction of ‚ÄúFight The Fight‚Äù&#xA;    by Living Colour:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;el-capistan-demo-4.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;el-capistan-demo-4.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;For ‚ÄúFight The Fight‚Äù I used El Capistan‚Äôs stereo output feature which&#xA;    adds a wonderful sense of space and a bit of a ping-pong feeling to the&#xA;    multi-head echo.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;El Capistan can do almost anything you could want from an echo machine,&#xA;    but that makes it complicated. It has a sound-on-sound mode that I can only&#xA;    occasionally figure out ‚Äî but it sounds great when I get it. (Dammit Jim,&#xA;    I‚Äôm a software engineer, not a pedal doctor!)¬†If I can reliably understand&#xA;    how to make it go I‚Äôll post another sample using it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For simplicity and immediate gratification, I recommend the unstoppable&#xA;    &lt;a href=&#34;http://www.bossus.com/gear/productdetails.php?ProductId=958&#34;&gt;Boss&#xA;        DD-7 delay&lt;/a&gt;. (I have 2, and could definitely put a 3rd to good use.) But&#xA;    for hours of wacky fun and classic &lt;a href=&#34;http://en.wikipedia.org/wiki/Delia_Derbyshire&#34;&gt;Delia Derbyshire sci-fi&#xA;        sounds&lt;/a&gt;, you want El Capistan.&#xA;&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2014/02/09/a-favorite-pedal-strymon-el-capistan/index.html</guid>
      <pubDate>Sun, 09 Feb 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>A Favorite Pedal: Psilocybe Phaser</title>
      <link>https://noncombatant.org/2014/02/03/a-favorite-pedal-psilocybe-phaser/index.content</link>
      <description>&lt;h1&gt;A Favorite Pedal: Psilocybe Phaser&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;3 February 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I think I‚Äôll try to start blogging some sound samples of some of my&#xA;    favorite guitar effects pedals. Randomly, I‚Äôll start with the &lt;a&#xA;        href=&#34;http://www.homebrewelectronics.com/products.htm&#34;&gt;HomeBrew&#xA;        Electronics&lt;/a&gt; Psilocybe Phaser.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img alt=&#34;Home Brew Electronics Psilocybe Phaser&#34; src=&#34;psilocybe-phaser.jpg&#34; width=&#34;800&#34; height=&#34;979&#34;&#xA;        loading=&#34;lazy&#34; /&gt;&#xA;    &lt;figcaption&gt;Home Brew Electronics Psilocybe&#xA;        Phaser&lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;It‚Äôs a bit more versatile ‚Äî the Shift 1 and Shift 2 switches change the&#xA;    speed and EQ significantly ‚Äî but it never gets off-the-rails chewy like the&#xA;    classic MXR Phase 90. I mostly use its gentle sweep but it can get&#xA;    Univibe-like (if the Univibe were insane) if you crank the Regen and Speed&#xA;    all the way. Here are some sound samples!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I recorded this with the neck pickup of my Strat in single-coil mode,&#xA;    straight into a speaker emulator:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;phaser-demo-1.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;phaser-demo-1.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;This is with the Strat bridge pickup in single-coil mode, into the¬†&lt;a&#xA;        href=&#34;http://www.strymon.net/products/elcapistan/&#34;&gt;Strymon El Capistan&lt;/a&gt;&#xA;    doing nothing but emulating a spring reverb, and my Precision bass with the&#xA;    &lt;a href=&#34;http://www.stewmac.com/shop/Electronics,_pickups/Components:_Black_Ice_overdrive/Black_Ice.html&#34;&gt;Black&#xA;        Ice&lt;/a&gt; (passive fuzz) turned on:&#xA;&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;phaser-demo-2.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;phaser-demo-2.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;Finally, this is with the bridge pickup in single-coil mode, with the&#xA;    Strymon doing a little echo as well as spring reverb:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;phaser-demo-3.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;phaser-demo-3.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;I‚Äôll probably write about the El Capistan next. It is a gem for sure.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2014/02/03/a-favorite-pedal-psilocybe-phaser/index.html</guid>
      <pubDate>Mon, 03 Feb 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Security Smells For Modern Software</title>
      <link>https://noncombatant.org/2014/01/16/security-smells-for-modern-software/index.content</link>
      <description>&lt;h1&gt;Security Smells For Modern Software&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;16 January 2014&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These seem like good minimum standards, maybe.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Implement the application in a &lt;strong&gt;memory- and type-safe&#xA;language&lt;/strong&gt;. Appeals to use an unsafe language for performance must be&#xA;substantiated with profile traces based on real-world usage. (Not&#xA;microbenchmarks.) Even then, only implement the performance-sensitive&#xA;components in the unsafe language.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;The application must have &lt;strong&gt;high unit test coverage&lt;/strong&gt;.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;If the &lt;strong&gt;application parses data, include fuzzers&lt;/strong&gt; in the&#xA;source tree and continuously run them on at least one (preferably thousands) of&#xA;servers.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;If the application communicates on the network, it must use&#xA;&lt;strong&gt;secure (authenticated, confidential) transport only&lt;/strong&gt; (not&#xA;optionally). Preferably, peers should pin each others‚Äô public keys.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Fix security-relevant bugs in the open&lt;/strong&gt;, and clearly&#xA;mark them as such.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Provide &lt;strong&gt;frequent updates&lt;/strong&gt;, delivered securely (e.g.&#xA;signed and automatically ‚Äî not manually ‚Äî validated).&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;strong&gt;Minimize dependencies&lt;/strong&gt;, and ensure that all dependencies&#xA;are up-to-date.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2014/01/16/security-smells-for-modern-software/index.html</guid>
      <pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Ana√Øs Nin‚Äôs Challenge</title>
      <link>https://noncombatant.org/2013/12/10/anais-nins-challenge/index.content</link>
      <description>&lt;h1&gt;Ana√Øs Nin‚Äôs Challenge&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;10 December 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It‚Äôs strange how difficult and frightening it can be to write words on paper.&#xA;But it really is. I can barely stand to do it.¬†&lt;a&#xA;href=&#34;http://www.brainpickings.org/index.php/2013/09/20/anais-nin-on-writing-1947/&#34;&gt;Here&#xA;is Ana√Øs Nin&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;It is in the moments of emotional crisis that human beings reveal&#xA;themselves most accurately. ‚Ä¶ The heightened moments ‚Ä¶ are the moments of&#xA;revelation. It is the moment when the real self rises to the surface, shatters&#xA;its false roles, erupts and assumes reality and identity. The fiery moments of&#xA;passionate experience are the moments of wholeness and totality of the&#xA;personality.&lt;/blockquote&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/12/10/anais-nins-challenge/index.html</guid>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>What Is Security Engineering (archive post)</title>
      <link>https://noncombatant.org/2013/12/10/what-is-security-engineering-archive-post/index.content</link>
      <description>&lt;h1&gt;What Is Security Engineering (archive post)&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;10 December 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;To make sure I keep a copy of this post, &lt;a&#xA;href=&#34;https://hackbrightacademy.com/blog/software-security-engineering/&#34;&gt;originally&#xA;posted at the Hackbright blog&lt;/a&gt;, here it is.&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As a Hackbright student or alumna, you probably plan to participate in&#xA;building the foundation of our shiny new automated world. (Thanks for&#xA;joining us! We need you.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Software, firmware, and computing hardware underlie essentially all&#xA;aspects of our society‚Ää‚Äî‚Ääthe¬†&lt;a&#xA;href=&#34;http://www.edn.com/design/automotive/4423428/Toyota-s-killer-firmware--Bad-design-and-its-consequences&#34;&gt;safety&#xA;systems in our cars&lt;/a&gt;¬†(and trains, and airplanes), our¬†&lt;a&#xA;href=&#34;http://money.cnn.com/2012/08/09/technology/knight-expensive-computer-bug/&#34;&gt;financial&#xA;system&lt;/a&gt;,¬†&lt;a&#xA;href=&#34;http://www.darkreading.com/management/stuxnet-expert-proposes-new-framework-fo/240160846&#34;&gt;critical&#xA;infrastructure&lt;/a&gt;¬†like energy and water purification, our¬†&lt;a&#xA;href=&#34;https://twitter.com/alexhern/status/402365655250644992/photo/1&#34;&gt;healthcare&#xA;system&lt;/a&gt;, and our¬†&lt;a&#xA;href=&#34;http://www.gamesindustry.biz/articles/2013-03-27-ea-drm-is-a-failed-dead-end-strategy&#34;&gt;culture&lt;/a&gt;.&#xA;Even hand-crafted clothing is sold on¬†&lt;a&#xA;href=&#34;http://www.etsy.com/&#34;&gt;Etsy&lt;/a&gt;¬†and is made of¬†&lt;a&#xA;href=&#34;http://www.nytimes.com/2013/09/20/business/us-textile-factories-return.html?_r=0&#34;&gt;cotton&#xA;spun by a robot&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But it‚Äôs not enough that our infrastructure merely work. It has to work&#xA;well and reliably under all kinds of pressure: human error (operator‚Ää‚Äî‚Ääand&#xA;developer!), bad weather, bad luck, radio interference, hardware failure,&#xA;network outages, criminal malfeasance. Even war.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Security engineering requires adopting a new mindset, at once cautious&#xA;and conservative, yet also willing to calculate risks and experiment. Either&#xA;perspective on its own is not enough; we must be of two minds to&#xA;succeed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Software security engineers are the professional pessimists who insist&#xA;that¬†&lt;a&#xA;href=&#34;https://blog.twitter.com/2013/keeping-our-users-secure&#34;&gt;Twitter must&#xA;encrypt and authenticate all its network traffic&lt;/a&gt;¬†even though it might&#xA;seem less important than, say, banking. (Ironically, we then¬†&lt;a&#xA;href=&#34;http://arstechnica.com/security/2013/04/why-your-password-cant-have-symbols-or-be-longer-than-16-characters/&#34;&gt;beg&#xA;and plead with banks to adopt security&lt;/a&gt;¬†at least as good as Twitter‚Äôs.)&#xA;We worry about¬†&lt;a&#xA;href=&#34;https://www.usenix.org/legacy/event/leet08/tech/full_papers/king/king.pdf&#34;&gt;how&#xA;impossible it is to audit the hardware which we have to assume is&#xA;safe&lt;/a&gt;.¬†&lt;a&#xA;href=&#34;http://arstechnica.com/security/2013/11/smart-tv-from-lg-phones-home-with-users-viewing-habits-usb-file-names/&#34;&gt;Normal&#xA;people see a TV&lt;/a&gt;, but we see¬†&lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Telescreen&#34;&gt;Winston Smith‚Äôs&#xA;telescreen&lt;/a&gt;. We are those annoying friends who remind their co-workers&#xA;that &lt;a href=&#34;http://en.wikipedia.org/wiki/Integer_overflow&#34;&gt;computers&#xA;cannot, in fact, correctly add two numbers together&lt;/a&gt;¬†(not without¬†&lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic&#34;&gt;significant&#xA;help&lt;/a&gt;, at least).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Software security engineers are the professional optimists¬†who try to&#xA;make computers work safely in spite of¬†&lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Murphy%27s_law&#34;&gt;Murphy‚Äôs best&#xA;efforts&lt;/a&gt;¬†‚Äî we will try to¬†&lt;a&#xA;href=&#34;http://www.cl.cam.ac.uk/~rja14/Papers/satan.pdf&#34;&gt;program Satan‚Äôs&#xA;computer&lt;/a&gt;. We dream of a world in which &lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Google_driverless_car&#34;&gt;robot&#xA;cars&lt;/a&gt;¬†tell each other only the truth about their position and speed. We&#xA;dream of a world in which credit card and ATM fraud is mere statistical&#xA;noise. We dream of a world in which¬†&lt;a&#xA;href=&#34;http://www.youtube.com/watch?v=TzR7R6fBr00&#34;&gt;your phone is really off&#xA;when you turn it off&lt;/a&gt;, and which keeps your communications with your&#xA;doctor confidential when it is on.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We dream of a world in which¬†&lt;a&#xA;href=&#34;http://arstechnica.com/gadgets/2012/10/drm-be-damned-how-to-protect-your-amazon-e-books-from-being-deleted/&#34;&gt;books&#xA;cannot be burned&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Resources&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;If you‚Äôre interested in security engineering (and I hope you are, even if&#xA;you don‚Äôt choose to make it your specialty), you can get involved at any&#xA;point in your career. One of the best ways to get started is‚Ää‚Äî‚Ääas&#xA;always‚Ää‚Äî‚Ääsimply getting your hands dirty.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&#xA;&lt;li&gt;Use¬†&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt;¬†to learn what is&#xA;happening on your network, and learn about the structure of network packets&#xA;and connections.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Use an¬†&lt;a href=&#34;http://portswigger.net/burp/proxy.html&#34;&gt;HTTP proxy like&#xA;Burp&lt;/a&gt;¬†to learn what your browser is saying to web servers, and learn what&#xA;it takes to intercept encrypted communications.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;Check out¬†&lt;a href=&#34;http://lcamtuf.coredump.cx/&#34;&gt;Michal Zalewski&lt;/a&gt;‚Äôs&#xA;excellent¬†&lt;em&gt;&lt;a&#xA;href=&#34;https://code.google.com/p/browsersec/wiki/Main&#34;&gt;Browser Security&#xA;Handbook&lt;/a&gt;&lt;/em&gt;¬†to learn why, exactly, the nytimes.com web site cannot&#xA;read your Gmail. (Hopefully.)&lt;/li&gt;&#xA;&#xA;&lt;li&gt;If you‚Äôre interested in cryptography, an excellent beginning book is¬†&lt;a&#xA;href=&#34;http://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246&#34;&gt;&lt;em&gt;Cryptography&#xA;Engineering&lt;/em&gt;&lt;/a&gt;¬†by Ferguson, Schneier, and Kohno.&lt;/li&gt;&#xA;&#xA;&lt;li&gt;It‚Äôs important and hilariously fun to learn the C programming language,&#xA;and to learn¬†&lt;a&#xA;href=&#34;http://www.amazon.com/Expert-Programming-Peter-van-Linden/dp/0131774298&#34;&gt;how&#xA;C programs can go so badly wrong&lt;/a&gt;.¬†&lt;a&#xA;href=&#34;http://lldb.llvm.org/tutorial.html&#34;&gt;Get your hands dirty with a&#xA;debugger and disassembler&lt;/a&gt;, and learn what the machine is really&#xA;doing.&lt;/li&gt;&#xA;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;And, as always, find a¬†&lt;a href=&#34;http://www.baythreat.org/&#34;&gt;good&lt;/a&gt;¬†&lt;a&#xA;href=&#34;http://ccc.de/&#34;&gt;community&lt;/a&gt;¬†to¬†&lt;a&#xA;href=&#34;http://infosecmentors.com/&#34;&gt;learn with&lt;/a&gt;. Or¬†&lt;a&#xA;href=&#34;http://observationdeck.io9.com/help-fund-a-feminist-makerspace-in-seattle-1467872208&#34;&gt;build&#xA;your own&lt;/a&gt;!&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/12/10/what-is-security-engineering-archive-post/index.html</guid>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Arvo P√§rt</title>
      <link>https://noncombatant.org/2013/12/10/arvo-part-if-you-listen-to-only-one-of-his-works/index.content</link>
      <description>&lt;h1&gt;Arvo P√§rt&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;10 December 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My favorite of his is &lt;em&gt;&lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Kanon_Pokajanen&#34;&gt;Kanon&#xA;Pokajanen&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perhaps I‚Äôm inclined to favor it since the libretto is written in a&#xA;borderline-&lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Artistic_language&#34;&gt;artlang&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There can be some Kierkegaardian wallowing in some of his music.&#xA;But¬†&lt;em&gt;Kanon Pokajanen&lt;/em&gt;¬†is beautiful and powerful from start to finish.&#xA;There‚Äôs a simple purity to choral music; there is no chance to hide&#xA;compositional flaws in fashion or timbre. Any beauty is true human beauty, any&#xA;flaw is a real flaw.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Almost all of the music I love is machine music ‚Äî but if I had my life to&#xA;live over again, I know what I would do: compose music, and mostly for&#xA;voices.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/12/10/arvo-part-if-you-listen-to-only-one-of-his-works/index.html</guid>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Autodidact Software Engineering Bibliography</title>
      <link>https://noncombatant.org/2013/08/11/autodidact-software-engineering-bibliography/index.content</link>
      <description>&lt;h1&gt;Autodidact Software Engineering Bibliography&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;11 August 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;div id=&#34;toc&#34;&gt;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;What little I know about software engineering, I largely taught myself&#xA;through books, conversations with more knowledgeable friends, and just plain&#xA;getting my hands on some code. Of all the books I‚Äôve read, here are some of the&#xA;ones I think helped me the most when I was coming up, and some new ones that are&#xA;good.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm covering only books here, not magazine or journal articles and not web&#xA;sites.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Beginning&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://www.amazon.com/C-Programming-Language-2nd-Edition/dp/0131103628&#34;&gt;&lt;em&gt;The&#xA;C Programming Language&lt;/em&gt;&lt;/a&gt;, by Brian Kernighan and Dennis Ritchie. Even if&#xA;you never end up using C, this book is a masterpiece of concise technical&#xA;writing. Modern languages have excellent texts too: &lt;a&#xA;href=&#34;https://www.amazon.com/Programming-Language-Addison-Wesley-Professional-Computing/dp/0134190440&#34;&gt;&lt;em&gt;The&#xA;Go Progamming Language&lt;/em&gt;&lt;/a&gt; by Alan Donovan and Brian Kernighan, and &lt;a&#xA;href=&#34;https://doc.rust-lang.org/book/&#34;&gt;&lt;em&gt;The Rust Programming&#xA;Language&lt;/em&gt;&lt;/a&gt;, by Steve Klabnik and Carol Nichols.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://www.amazon.com/Practice-Programming-Addison-Wesley-Professional-Computing/dp/020161586X&#34;&gt;&lt;em&gt;The¬†Practice&#xA;of Programming&lt;/em&gt;&lt;/a&gt; by Rob Pike and Brian Kernighan. Also a masterpiece of&#xA;concision, and also rewards multiple readings. Covers lots of ground in an&#xA;approachable and fun way.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.cs.bell-labs.com/cm/cs/pearls/&#34;&gt;&lt;em&gt;Programming&#xA;Pearls&lt;/em&gt;&lt;/a&gt; and &lt;a&#xA;href=&#34;https://www.amazon.com/More-Programming-Pearls-Confessions-Coder/dp/0201118890/ref=sr_1_3&#34;&gt;&lt;em&gt;More&#xA;Programming Pearls&lt;/em&gt;&lt;/a&gt;, by Jon Bentley. A wonderful compendium of&#xA;algorithms, puzzles, and creative solutions.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Moving Forward&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://www.amazon.com/UNIX-Linux-System-Administration-Handbook/dp/0134277554&#34;&gt;&lt;em&gt;UNIX&#xA;And Linux System Administration Handbook&lt;/em&gt;, 5th Edition&lt;/a&gt;, by Evi Nemeth et&#xA;al.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.amazon.com/books/dp/0262033844&#34;&gt;Introduction to&#xA;Algorithms&lt;/a&gt;&lt;/em&gt; by Thomas Cormen, Charles Leiserson, Ron Rivest, and&#xA;Clifford Stein. This is the standard serving of vegetables.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://www.amazon.com/Expert-Programming-Peter-van-Linden/dp/0131774298&#34;&gt;&lt;em&gt;Expert&#xA;C Programming: Deep C Secrets&lt;/em&gt;&lt;/a&gt;, by Peter van der Linden. C is a jungle&#xA;of Claymore mines, punji stakes, and unnaturally large insects. Oh my god, we&#xA;are all going to die. Learn precisely how your demise will come in this&#xA;disturbing novella. (This book could also go in the Security category,&#xA;below.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://hop.perl.plover.com/&#34;&gt;&lt;em&gt;Higher-Order Perl&lt;/em&gt;&lt;/a&gt;, by Mark&#xA;Jason Dominus. A fun and practical (modulo Perl) course on functional&#xA;programming. &lt;a&#xA;href=&#34;https://github.com/MostlyAdequate/mostly-adequate-guide&#34;&gt;&lt;em&gt;Professor&#xA;Frisby‚Äôs Mostly Adequate Guide To Functional Programming&lt;/em&gt;&lt;/a&gt; is somewhat&#xA;along the same lines, using JavaScript.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://shop.oreilly.com/product/0636920033707.do&#34;&gt;&lt;em&gt;Effective&#xA;Modern C++&lt;/em&gt;&lt;/a&gt;, by Scott Meyers. Helps keep the madness at bay.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Operating Systems&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://www.amazon.com/Design-Operating-System-Prentice-Hall-Software/dp/0132017997&#34;&gt;&lt;em&gt;The&#xA;Design of the Unix Operating System&lt;/em&gt;&lt;/a&gt;, by Bach; or, &lt;a&#xA;href=&#34;https://www.amazon.com/books/dp/0201702452&#34;&gt;&lt;em&gt;The Design and&#xA;Implementation of the FreeBSD Operating System&lt;/em&gt;&lt;/a&gt;, by McKusick and&#xA;Neville-Neil. Reading both might be overkill, but that didn‚Äôt stop me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;&#34;https://www.amazon.com/Windows-Internals-Part-architecture-management/dp/0735684189/ref=pd_lpo_sbs_14_img_0&#34;&gt;&lt;em&gt;Windows&#xA;Internals&lt;/em&gt;, 7th Edition&lt;/a&gt;, by Pavel Yosifovich, Mark Russinovich, David&#xA;Solomon, and Alex Ionescu. A complex but thorough design, well implemented and&#xA;wonderfully documented.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://www.amazon.com/TCP-Illustrated-Vol-Addison-Wesley-Professional/dp/0201633469&#34;&gt;&lt;em&gt;TCP/IP&#xA;Illustrated, vol. 1: The Protocols&lt;/em&gt;&lt;/a&gt;, by Richard Stevens. Solid bedrock&#xA;for understanding networking.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Security&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cs.virginia.edu/~evans/cs551/saltzer/&#34;&gt;&lt;em&gt;The Protection Of&#xA;Information In Computer Systems&lt;/em&gt;&lt;/a&gt;, by Jerome Saltzer and Michael&#xA;Schroeder. Foundational.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://www.amazon.com/Cryptography-Engineering-Principles-Practical-Applications/dp/0470474246&#34;&gt;&lt;em&gt;Cryptography&#xA;Engineering&lt;/em&gt;&lt;/a&gt;, by Niels Ferguson, Bruce Schneier, and Tadayoshi Kohno.&#xA;Practical and accessible.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;https://www.amazon.com/The-Software-Security-Assessment-Vulnerabilities/dp/0321444426&#34;&gt;&lt;em&gt;The&#xA;Art of Software Security Assessment&lt;/em&gt;&lt;/a&gt;, by Mark Dowd, John McDonald, and&#xA;Justin Schuh. A thorough guide to theory and practice.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/08/11/autodidact-software-engineering-bibliography/index.html</guid>
      <pubDate>Sun, 11 Aug 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Good Music Lately</title>
      <link>https://noncombatant.org/2013/07/07/recommended-listening-good-music-lately/index.content</link>
      <description>&lt;h1&gt;Good Music Lately&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;7 July 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In no particular order, here is some music I have enjoyed lately. If you like&#xA;it too, buy it!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There‚Äôs Talk: ‚Äú&lt;a&#xA;href=&#34;https://therestalk.bandcamp.com/album/tiny-strands&#34;&gt;The Salt&lt;/a&gt;‚Äù single,&#xA;from the forthcoming¬†&lt;em&gt;Tiny Strands&lt;/em&gt;¬†EP. Intense and stunning. You won‚Äôt&#xA;know what happened, exactly, but you‚Äôll feel it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Shannon Curtis: &lt;a&#xA;href=&#34;https://shannoncurtis.bandcamp.com/album/cinemascope&#34;&gt;&lt;em&gt;Cinemascope&lt;/em&gt;&lt;/a&gt;.&#xA;Electro-pop love songs. Highlights: the touching ‚ÄúWhen the Lights Go Down‚Äù,&#xA;‚ÄúKeep Swimming‚Äù.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Deerhoof: &lt;a href=&#34;https://deerhoof.bandcamp.com/album/milk-man&#34;&gt;&lt;em&gt;Milk&#xA;Man&lt;/em&gt;&lt;/a&gt;. Lyrical themes: milk, bananas, strawberries, white-knuckled&#xA;terror. Every song is a Casey Kasem-approved hit, but the instrumentals are&#xA;especially nice to have. Highlights: ‚ÄúMilk Man‚Äù, ‚ÄúDesaparecer√©‚Äù, ‚ÄúC‚Äù.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Kodacrome: ‚Äú&lt;a href=&#34;http://emailunlock.com/kodacrome/strike-the-gold&#34;&gt;Strike&#xA;the Gold&lt;/a&gt;‚Äù single. Chill synth-pop that takes an unexpected turn.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://blottedscience.bandcamp.com/&#34;&gt;Blotted Science&lt;/a&gt;: &lt;em&gt;The&#xA;Machinations of Dementia&lt;/em&gt; and &lt;em&gt;The Animation of Entomology&lt;/em&gt;.&#xA;Technical instrumental metal, thankfully without vocals. Not surprisingly, &lt;a&#xA;href=&#34;https://www.youtube.com/watch?v=jpoL0QBKxHA&#34;&gt;metal is an ideal context for&#xA;serialism&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Go Van Gogh: &lt;a&#xA;href=&#34;https://govangogh.bandcamp.com/album/now-we-know&#34;&gt;&lt;em&gt;Now We&#xA;Know&lt;/em&gt;&lt;/a&gt;. Eclectic mix of fun jams from &lt;a&#xA;href=&#34;http://www.walkershaw.com/&#34;&gt;local shirt-maker Walkershaw Man&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Built for the Sea: &lt;a&#xA;href=&#34;https://liarose.bandcamp.com/album/built-for-the-sea&#34;&gt;&lt;em&gt;Built for the&#xA;Sea&lt;/em&gt;&lt;/a&gt;. Featuring Lia Rose on vocals. A particularly well-recorded album.&#xA;Highlights: ‚ÄúMy Dear‚Äù, ‚ÄúPaper Tigers‚Äù.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Shudder to Think: &lt;em&gt;Live From Home&lt;/em&gt;. One of my favorite art?-rock?&#xA;bands reconvened for an excellent live recording. Squalls of noise-melody and&#xA;uncountable meters delivered with songy aplomb. Highlights: Every minute.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/07/07/recommended-listening-good-music-lately/index.html</guid>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Hear Tall Sheep On Baghdad By The Bay</title>
      <link>https://noncombatant.org/2013/06/30/hear-tall-sheep-on-baghdad-by-the-bay/index.content</link>
      <description>&lt;h1&gt;Hear Tall Sheep On Baghdad By The Bay&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;30 June 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;LD, Jeremy, and I represented &lt;a&#xA;href=&#34;http://radiovalencia.fm/podcasts/?episode=11014&#34;&gt;Tall Sheep on Baghdad by&#xA;the Bay&lt;/a&gt;, a radio show on local pirate radio station &lt;a&#xA;href=&#34;http://radiovalencia.fm/&#34;&gt;Radio Valencia&lt;/a&gt;. Stream or download!&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/06/30/hear-tall-sheep-on-baghdad-by-the-bay/index.html</guid>
      <pubDate>Sun, 30 Jun 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Software Itself Is A Process, Not A Product</title>
      <link>https://noncombatant.org/2013/06/18/software-itself-is-a-process-not-a-product/index.content</link>
      <description>&lt;h1&gt;Software Itself Is A Process, Not A Product&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;18 June 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;...or, ‚Äúthere is no such thing as &lt;a&#xA;href=&#34;https://wiki.ubuntu.com/LTS&#34;&gt;LTS&lt;/a&gt;.‚Äù&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Bruce Schneier says that ‚Äú&lt;a&#xA;href=&#34;http://www.schneier.com/essay-062.html&#34;&gt;security is a process, not a&#xA;product&lt;/a&gt;,‚Äù meaning that it is an engineering discipline that you must&#xA;continually practice, rather than a magic box you can buy. It is becoming&#xA;increasingly clear that this is true for software in general: software is not a&#xA;fixed thing that you acquire once, but a service or distribution that is &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Rolling_release&#34;&gt;continually updated&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Software is a living cultural artifact, a constant dialog between developers&#xA;and users.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It might seem attractive (cheaper, or easier) to treat software as a finished&#xA;product. However, old software ‚Äî that is, any version of a program other than&#xA;the latest stable version ‚Äî is latent &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/Technical_debt&#34;&gt;technical debt&lt;/a&gt;. It tends&#xA;to be unsafe, unstable, and to lack features that you might find you need. Worse&#xA;‚Äî much worse ‚Äî you will come to rely on old APIs and interfaces, and then when&#xA;you are absolutely forced to upgrade in a year or 5 from now, all that latent&#xA;technical debt will hit you in the face. The giant migration to a new set of&#xA;interfaces/features/bugs will be much more painful than all the small migrations&#xA;combined. What seemed easy or cheap at first becomes catastrophically and&#xA;unnecessarily expensive. Some of the absolute worst software I ever saw as a&#xA;security engineering consultant was creepy, freaky old mainframe goatware from&#xA;1964. The organizations that paid IBM through the nose to keep it on life&#xA;support insisted it was ‚Äúreally stable, man‚Äù, but in fact its prehistoric&#xA;limitations contributed magnificently to grave and absurd unnecessary risk.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;One of the most famous examples of treating software as a finishable,&#xA;finished product is the &lt;a href=&#34;http://cr.yp.to/qmail.html&#34;&gt;qmail mail server&#xA;by Dan Bernstein&lt;/a&gt;. You couldn‚Äôt hope for a better test case of the concept:&#xA;ground-breaking design, wonderful performance, and &lt;a&#xA;href=&#34;http://cr.yp.to/qmail/guarantee.html&#34;&gt;admirable security quality&lt;/a&gt;.&#xA;Bernstein achieved all this, and &lt;a&#xA;href=&#34;http://cr.yp.to/qmail/qmailsec-20071101.pdf&#34;&gt;considered his work&#xA;done&lt;/a&gt;.¬†The trouble is, the needs of the email-using community changed. We&#xA;wanted SPF and¬†&lt;a href=&#34;https://en.wikipedia.org/wiki/DomainKeys&#34;&gt;Domain&#xA;Keys&lt;/a&gt;, IPv6, and a¬†&lt;a href=&#34;http://qmail.org/top.html#addons&#34;&gt;whole pile more&#xA;stuff&lt;/a&gt;. There is no guarantee that all the third party add-ons that make&#xA;qmail viable in the modern world rise to the same level of quality as the&#xA;original core, since it lost its technical leadership. It‚Äôs abandonware on life&#xA;support, just like the mainframe dinosaur sadness.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another example is &lt;a&#xA;href=&#34;http://www.ctan.org/tex-archive/systems/knuth/dist/tex&#34;&gt;Donald Knuth‚Äôs&#xA;TeX&lt;/a&gt;¬†mathematical typesetting system, like qmail the product of a computing&#xA;science giant. Knuth admits the eternal imperfection of TeX by using the digits&#xA;of pi for version numbers ‚Äî the current version is 3.1415926 ‚Äî but in fact the&#xA;core TeX has not been updated in many years. It‚Äôs still implemented in &lt;a&#xA;href=&#34;https://en.wikipedia.org/wiki/WEB&#34;&gt;a language that generates Pascal&lt;/a&gt;,&#xA;itself an obsolete language that must first be translated into C for use on&#xA;modern machines. All new functionality comes from ever more crufty, slow, hard&#xA;to use, and weirdly-designed layers upon layers of third-party add-ons and&#xA;wrappers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These are undeniable works of genius, laid low by the belief that they could&#xA;be finished products, rather than created with recognition that they must evolve&#xA;with their users. Software is simply not like other art forms.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is not to say that a program‚Äôs original developer must be chained to the&#xA;task of maintaining it forever; only to illustrate the point that developers and&#xA;users must plan for software to change continually to meet changing needs.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/06/18/software-itself-is-a-process-not-a-product/index.html</guid>
      <pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Biscuits By Living Colour</title>
      <link>https://noncombatant.org/2013/06/15/recommended-listening-biscuits-by-living-colour/index.content</link>
      <description>&lt;h1&gt;&lt;em&gt;Biscuits&lt;/em&gt; By Living Colour&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;15 June 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Living Colour was and is a challenging, ground-breaking rock band. They take&#xA;    a lot of musical and stylistic risks, and almost never miss. Their&#xA;    masterpiece,¬†&lt;em&gt;Time‚Äôs Up&lt;/em&gt;, is one of the greatest rock albums of all time,&#xA;    but today I recommend &lt;a href=&#34;https://en.wikipedia.org/wiki/Biscuits_(EP)&#34;&gt;the&#xA;        Japanese import of¬†&lt;em&gt;Biscuits&lt;/em&gt;&lt;/a&gt;, an EP they released in the¬†&lt;em&gt;Time‚Äôs&#xA;        Up&lt;/em&gt; era. (Be sure to get the Japanese import; the US release is wonderful&#xA;    but the Japanese version has 9 more tracks.)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A treasure trove of B-sides, covers, and live&#xA;    tracks,¬†&lt;em&gt;Biscuits&lt;/em&gt;¬†documents this limit-ignoring, virtuosic, and soulful&#xA;    band in one of their most creative phases. Living Colour always expand the&#xA;    harmonic and melodic possibilities available in rock music, and listening to&#xA;    their live tracks you can hear them spontaneously invent something new and&#xA;    beautiful again and again.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are some great Living Colour originals on¬†&lt;em&gt;Biscuits&lt;/em&gt;. Highlights&#xA;    for me are the insane guitar and drum duet/breakdown in ‚ÄúMoney Talks‚Äù, and the&#xA;    live version of ‚ÄúInformation Overload‚Äù which will bend your ear.¬†Here is an&#xA;    excerpt of the ‚Äú&lt;a href=&#34;https://en.wikipedia.org/wiki/Neuromancer&#34;&gt;Wintermute&lt;/a&gt; going insane‚Äù&#xA;    guitar intro:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;information-overload-excerpt-live.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;information-overload-excerpt-live.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;Living Colour has always done great covers, and¬†&lt;em&gt;Biscuits&lt;/em&gt; has some&#xA;    true gems, like Pere Ubu‚Äôs ‚ÄúFinal Solution‚Äù and an incredible rip on Talking&#xA;    Heads‚Äô ‚ÄúMemories Can‚Äôt Wait‚Äù. None of the covers are mere remakes; Living Colour&#xA;    always shows a new dimension to an old song, and always renews a sense of wonder&#xA;    about what music can make possible.¬†My favorite cover from¬†&lt;em&gt;Biscuits&lt;/em&gt; is&#xA;    Al Green‚Äôs ‚ÄúLove and Happiness‚Äù, because vocalist Corey Glover opens all the way&#xA;    up and does the song true justice:&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;love-and-happiness-excerpt.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;love-and-happiness-excerpt.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;As David Letterman said, &lt;a href=&#34;https://www.youtube.com/watch?v=WhMuGPMzvS8&#34;&gt;‚ÄúIf this song don‚Äôt drop ya,&#xA;        then yer not hooked up right.‚Äù&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;        href=&#34;https://www.amazon.com/Biscuits-Living-Colour/dp/B00004VP0N/ref=sr_1_fkmr1_1?ie=UTF8&amp;amp;qid=1371186402&amp;amp;sr=8-1-fkmr1&amp;amp;keywords=living+colour+biscuits+japanese+import&#34;&gt;Only&#xA;        1 left in stock at Amazon&lt;/a&gt;! And yes, it is worth every penny.&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2013/06/15/recommended-listening-biscuits-by-living-colour/index.html</guid>
      <pubDate>Sat, 15 Jun 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Homebrew Harmony: The Oblique Blues Scale</title>
      <link>https://noncombatant.org/2013/06/15/homebrew-harmony-the-oblique-blues-scale/index.content</link>
      <description>&lt;h1&gt;Homebrew Harmony: The Oblique Blues Scale&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;15 June 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Lately I‚Äôve been interested in scales that contain clusters of half-steps.&#xA;    Obviously, the Minor Blues scale (A C D E‚ô≠ E G) is a well-known member of that&#xA;    family, but many others are possible. For example, I call this one the Oblique&#xA;    Blues scale, because its blue note sneaks up on you:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;A B C D E F G‚ô≠&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;oblique-blues-scale.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;oblique-blues-scale.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;&#xA;&#xA;&lt;p&gt;Perhaps it has an older name, but to me it‚Äôs Oblique Blues. As you can see,&#xA;    it‚Äôs just like A minor except that its 7th is diminished (G‚ô≠); you can also&#xA;    think of it as C major with a diminished 5th (G‚ô≠). The cluster of half-steps is&#xA;    E F¬†G‚ô≠.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Tweaking that one note generates some really interesting chords:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&#xA;    Am: &lt;em&gt;A C E&lt;/em&gt;&lt;br /&gt;&#xA;    Am (diminished 7): &lt;em&gt;A C E G‚ô≠&lt;/em&gt;&lt;br /&gt;&#xA;    Bo: &lt;em&gt;B D F&lt;/em&gt;&lt;br /&gt;&#xA;    B√∏7: &lt;em&gt;B D F A&lt;/em&gt;&lt;br /&gt;&#xA;    &lt;strong&gt;C (‚ô≠5): &lt;em&gt;C E G‚ô≠&lt;/em&gt;&lt;br /&gt;&#xA;        Cmaj7 (‚ô≠5): &lt;em&gt;C E G‚ô≠ B&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;&#xA;    Dm: &lt;em&gt;D F A&lt;/em&gt;&lt;br /&gt;&#xA;    Dm7: D F A C&lt;br /&gt;&#xA;    &lt;strong&gt;E (dim 3): &lt;em&gt;E G‚ô≠ B&lt;/em&gt;&lt;br /&gt;&#xA;        E7 (dim 3): &lt;em&gt;E G‚ô≠ B D&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;&#xA;    F: &lt;em&gt;F A C&lt;/em&gt;&lt;br /&gt;&#xA;    Fmaj7: &lt;em&gt;F A C E&lt;/em&gt;&lt;br /&gt;&#xA;    &lt;strong&gt;G‚ô≠(aug 3): &lt;em&gt;G‚ô≠ B D&lt;/em&gt;&lt;br /&gt;&#xA;        G‚ô≠maj7 (aug 3): &lt;em&gt;G‚ô≠ B D F&lt;/em&gt;&lt;/strong&gt;&#xA;&lt;/p&gt;&#xA;&#xA;&lt;audio controls&gt;&#xA;    &lt;source src=&#34;oblique-blues-chords.mp3&#34; /&gt;&#xA;    &lt;a href=&#34;oblique-blues-chords.mp3&#34;&gt;Download&lt;/a&gt;&#xA;&lt;/audio&gt;</description>
      <author>Chris Palmer</author>
      <guid>2013/06/15/homebrew-harmony-the-oblique-blues-scale/index.html</guid>
      <pubDate>Sat, 15 Jun 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Playing With Tall Sheep At Bottom Of The Hill In SF</title>
      <link>https://noncombatant.org/2013/06/14/playing-with-tall-sheep-at-bottom-of-the-hill-in-sf/index.content</link>
      <description>&lt;h1&gt;Playing With Tall Sheep At Bottom Of The Hill In SF&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;14 June 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I‚Äôm super-excited to play at &lt;a href=&#34;http://www.bottomofthehill.com/&#34;&gt;Bottom&#xA;of the Hill&lt;/a&gt; with Tall Sheep on 26 June! We‚Äôre opening for &lt;a&#xA;href=&#34;http://valleysvalleys.bandcamp.com/&#34;&gt;Valleys&lt;/a&gt; and &lt;a&#xA;href=&#34;http://weeknightmusic.bandcamp.com/&#34;&gt;Weeknight&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img alt=&#34;Flyer for Valleys, Weeknight, and Tall Sheep at Bottom Of The&#xA;Hill&#34; src=&#34;tall-sheep-both-flyer.jpg&#34; width=&#34;800&#34; height=&#34;1127&#34;&#xA;loading=&#34;lazy&#34;/&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/06/14/playing-with-tall-sheep-at-bottom-of-the-hill-in-sf/index.html</guid>
      <pubDate>Fri, 14 Jun 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Some Pics From The Tall Sheep EP Release Show</title>
      <link>https://noncombatant.org/2013/06/13/some-pics-from-the-tall-sheep-ep-release-show/index.content</link>
      <description>&lt;h1&gt;Some Pics From The Tall Sheep EP Release Show&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;13 June 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This past May 5th, my band Tall Sheep played a show at &lt;a&#xA;href=&#34;http://www.cafedunord.com/&#34;&gt;Cafe du Nord in SF&lt;/a&gt; to celebrate the&#xA;release of our new EP, &lt;a href=&#34;http://tallsheep.bandcamp.com/&#34;&gt;&lt;em&gt;Of Birds In&#xA;Propellers&lt;/em&gt;&lt;/a&gt;. &lt;a href=&#34;http://lofisymphony.com/&#34;&gt;Major Powers and the&#xA;Lo-Fi Symphony&lt;/a&gt; and Taxes were nice enough to play with us. It was a great&#xA;show! Our good friend Kate McKinley took some pictures. Thanks Kate!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Personnel: Brad Harbidge (drums); me (bass and guitar); LD Dean (guitar and&#xA;vocals); Jeremy Anderson (keys). Brad also played on the recording, which we did&#xA;at the wonderful &lt;a href=&#34;http://tinytelephone.com/&#34;&gt;Tiny Telephone in San&#xA;Francisco&lt;/a&gt;. I love playing in a rhythm section with Brad!&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Tall Sheep EP 2013-05-05 07&#34;&#xA;src=&#34;tallsheepep-2013050507.jpg&#34; width=&#34;800&#34;&#xA;height=&#34;533&#34;/&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Tall Sheep EP 2013-05-05 01&#34;&#xA;src=&#34;tallsheepep-2013050501.jpg&#34; width=&#34;800&#34;&#xA;height=&#34;533&#34;/&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Tall Sheep EP 2013-05-05 02&#34;&#xA;src=&#34;tallsheepep-2013050502.jpg&#34; width=&#34;800&#34;&#xA;height=&#34;800&#34;/&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Tall Sheep EP 2013-05-05 03&#34;&#xA;src=&#34;tallsheepep-2013050503.jpg&#34; width=&#34;800&#34;&#xA;height=&#34;533&#34;/&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Tall Sheep EP 2013-05-05 04&#34;&#xA;src=&#34;tallsheepep-2013050504.jpg&#34; width=&#34;800&#34;&#xA;height=&#34;800&#34;/&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Tall Sheep EP 2013-05-05 05&#34;&#xA;src=&#34;tallsheepep-2013050505.jpg&#34; width=&#34;800&#34;&#xA;height=&#34;1200&#34;/&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Tall Sheep EP 2013-05-05 06&#34;&#xA;src=&#34;tallsheepep-2013050506.jpg&#34; width=&#34;800&#34;&#xA;height=&#34;800&#34;/&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img loading=&#34;lazy&#34; alt=&#34;Tall Sheep EP 2013-05-05 08&#34;&#xA;src=&#34;tallsheepep-2013050508.jpg&#34; width=&#34;800&#34;&#xA;height=&#34;800&#34;/&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/06/13/some-pics-from-the-tall-sheep-ep-release-show/index.html</guid>
      <pubDate>Thu, 13 Jun 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Simple Computer Security</title>
      <link>https://noncombatant.org/2013/06/02/simple-computer-security/index.content</link>
      <description>&lt;h1&gt;Simple Computer Security&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;2 June 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Don‚Äôt panic.&lt;/strong&gt; The internet is far, far more valuable than it&#xA;is dangerous. In general, internet security is about pushing down the cost of&#xA;unnecessary losses and increasing the overall value of the network. This work is&#xA;done in the margins; in the big picture, the internet is a clear win. ‚ÄúCyber‚Äù&#xA;alarmism is serving somebody ‚Äî but not you.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Redundancy and backup.&lt;/strong&gt;¬†Have a spare machine, a spare network&#xA;connection, a secondary email service, or whatever is most important to you.&#xA;Have a backup plan &lt;em&gt;that you have actually tested&lt;/em&gt;. (For example, set up&#xA;your spares by restoring your backups on to them.) In case of any problem ‚Äî&#xA;loss, theft, hacking, fire, whatever ‚Äî you will need a fresh system with minimal&#xA;disruption.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Isolation and compartmentalization.&lt;/strong&gt;¬†Separate your different&#xA;sources of data, and separate your different activities. For example, separate&#xA;your work computing from your personal computing; separate your military secrets&#xA;from your iTunes; separate your digital audio workstation from the guest&#xA;computer in your lobby. To combine activities of different degrees of importance&#xA;onto one machine is unnecessarily risky, now that computers are so cheap.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Keep it simple. Keep it updated.&lt;/strong&gt;¬†Stick with the &lt;em&gt;latest&#xA;stable version&lt;/em&gt; of a &lt;em&gt;small number of programs&lt;/em&gt;¬†that you &lt;em&gt;really&#xA;need&lt;/em&gt;¬†from a &lt;em&gt;small number of well-established vendors&lt;/em&gt;. If a&#xA;platform or app gets updates only rarely or if updating is hard, that is a&#xA;severe danger sign. (The current industry standard is that updates arrive&#xA;monthly and install in one or two clicks; expect updates to become more frequent&#xA;and easier as engineering improves.) Avoid ‚Äòsupplementing‚Äô the platform with&#xA;software from third-party vendors: avoid plug-ins, extensions, and&#xA;pseudo-security utilities like anti-virus software or firewalls.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;Avoid complexity and distrust magic.&lt;/strong&gt; Prefer tools you&#xA;understand and are comfortable with, whatever your level of understanding is.&#xA;Resist pressure to adopt complicated recipes, and reject claims like ‚ÄúProduct X&#xA;will make you safe from Problem Y!‚Äù&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;You might need a professional.&lt;/strong&gt;¬†You may have specialized&#xA;needs, a particularly acute threat model or dangerous threat actor, or be in&#xA;some crisis. In that case, a blog post is not going to be sufficient for you,&#xA;and you may need specialized advice/tools/techniques that only a professional&#xA;can provide.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/06/02/simple-computer-security/index.html</guid>
      <pubDate>Sun, 02 Jun 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>My Favorite Music Of 2012</title>
      <link>https://noncombatant.org/2013/01/01/my-favorite-music-of-2012/index.content</link>
      <description>&lt;h1&gt;My Favorite Music Of 2012&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;1 January 2013&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These are just some highlights off the top of my head.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;&lt;a&#xA;href=&#34;https://bukeandgase.bandcamp.com/album/function-falls-ep&#34;&gt;Function&#xA;Falls&lt;/a&gt;&lt;/em&gt;¬†by¬†&lt;a href=&#34;http://www.bukeandgase.com/&#34;&gt;Buke and Gase&lt;/a&gt;.&#xA;Home-brew electro-acoustic instruments with a penchant for digital pitch&#xA;shifters, and a strong beautiful voice. All of their records are available on&#xA;Bandcamp!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Koloss&#34;&gt;&lt;em&gt;Koloss&lt;/em&gt;&lt;/a&gt;¬†by¬†&lt;a&#xA;href=&#34;http://www.meshuggah.net/&#34;&gt;Meshuggah&lt;/a&gt;. Still the masters of metal&#xA;minimalism and/or Bootsy Collins-inspired funk bass. Hits: ‚ÄúDo Not Look Down‚Äù,&#xA;‚ÄúMarrow‚Äù, ‚ÄúBreak Those Bones Whose Sinews Gave It Motion‚Äù, all the other tracks.&#xA;Killer live show (with Decapitated and Baroness opening!).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://lovethisgiant.com/&#34;&gt;&lt;em&gt;Love This Giant&lt;/em&gt;&lt;/a&gt;¬†by¬†&lt;a&#xA;href=&#34;http://www.ilovestvincent.com/&#34;&gt;St. Vincent&lt;/a&gt;¬†and¬†&lt;a&#xA;href=&#34;http://journal.davidbyrne.com/&#34;&gt;David Byrne&lt;/a&gt;. Fresh arrangements and&#xA;instrumentation, and great vocal dialogues. St. Vincent is as awesome a singer&#xA;as she is a guitarist.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a&#xA;href=&#34;http://www.nonesuch.com/journal/jonny-greenwoods-the-master-soundtrack-out-now-uk-superb-times-extraordinary-daily-telegraph-2012-11-05&#34;&gt;&lt;em&gt;The&#xA;Master&lt;/em&gt;¬†soundtrack&lt;/a&gt;¬†by Jonny Greenwood. Also¬†&lt;a&#xA;href=&#34;http://www.nonesuch.com/journal/krzysztof-penderecki-jonny-greenwood-album-stereophile-album-month-spoleto-festival-2012-05-31&#34;&gt;this&#xA;weird gem&lt;/a&gt;¬†with Krzysztof Penderecki. Narrative and space. Try and buy these&#xA;at the¬†&lt;a href=&#34;http://www.nonesuch.com/store/jonny-greenwood&#34;&gt;online&#xA;store&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Non-2012 music that I especially loved in 2012:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Everything by¬†&lt;a&#xA;href=&#34;http://www.sarahlipstate.com/wordpress/&#34;&gt;Noveller&lt;/a&gt;¬†(Sarah Lipstate).&#xA;Guitar loops, noise, landscapes. You can get all her stuff on¬†&lt;a&#xA;href=&#34;https://noveller.bandcamp.com/&#34;&gt;Bandcamp&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The out-of-print Japanese import of Living Colour‚Äôs¬†&lt;em&gt;Biscuits&lt;/em&gt;. So&#xA;many awesome live tracks.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Carnival_Is_Forever&#34;&gt;&lt;em&gt;Carnival is&#xA;Forever&lt;/em&gt;&lt;/a&gt;¬†by¬†&lt;a href=&#34;http://www.decapitatedband.net/&#34;&gt;Decapitated&lt;/a&gt;. A&#xA;triumphant and inventive return from personal tragedy.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2013/01/01/my-favorite-music-of-2012/index.html</guid>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>My Review Of Distrust That Particular Flavor On io9</title>
      <link>https://noncombatant.org/2012/01/10/my-review-of-distrust-that-particular-flavor-on-io9/index.content</link>
      <description>&lt;h1&gt;My Review Of &lt;em&gt;Distrust That Particular Flavor&lt;/em&gt; On io9&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;10 January 2012&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;io9 published &lt;a&#xA;href=&#34;https://io9.gizmodo.com/5874889/distrust-that-particular-flavor-reveals-how-autobiographical-william-gibsons-fiction-is&#34;&gt;my&#xA;review of William Gibson‚Äôs essay collection¬†&lt;em&gt;Distrust That Particular&#xA;Flavor&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;William Gibson is one of our finest science fiction authors, because&#xA;he knows that people are the strangest products science has ever produced. And&#xA;his new essay collection,¬†&lt;em&gt;Distrust That Particular Flavor&lt;/em&gt;, gives us&#xA;insight into how he came to understand that so well, when many other SF authors&#xA;struggle to see it.&lt;/blockquote&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2012/01/10/my-review-of-distrust-that-particular-flavor-on-io9/index.html</guid>
      <pubDate>Tue, 10 Jan 2012 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Eternal Truths Of Software</title>
      <link>https://noncombatant.org/2011/03/20/eternal-truths-of-software/index.content</link>
      <description>&lt;h1&gt;Eternal Truths Of Software&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;20 March 2011&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The discipline of software engineering is young. Although¬†&lt;a href=&#34;https://en.wikipedia.org/wiki/Ada_Lovelace&#34;&gt;Lady&#xA;        Ada&lt;/a&gt;¬†got us started in&#xA;    1842 ‚Äì 1843, it was not until the 1940s that people began programming computers&#xA;    in earnest, and it was some decades before we got any systems that would&#xA;    survive. Although we do not yet know very much about how to make software, we do&#xA;    know a few things that are likely to guide us into the future.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;‚ÄúWhen in doubt, use brute force.‚Äù (&lt;a href=&#34;https://en.wikipedia.org/wiki/Ken_Thompson&#34;&gt;Ken Thompson&lt;/a&gt;) ‚ÄúThese&#xA;    days,&#xA;    though, you have to be pretty technical before you can even aspire to&#xA;    crudeness.‚Äù (&lt;a href=&#34;http://www.williamgibsonbooks.com/&#34;&gt;William Gibson&lt;/a&gt;,&#xA;    in¬†&lt;em&gt;Johnny Mnemonic&lt;/em&gt;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;‚ÄúC programmers know the cost of everything and the value of nothing‚Äù (&lt;a&#xA;        href=&#34;http://discuss.fogcreek.com/joelonsoftware/default.asp?cmd=show&amp;amp;ixPost=53978&#34;&gt;unknown&lt;/a&gt;),&#xA;    while ‚ÄúLisp programmers know the value of everything and the cost of nothing.‚Äù&#xA;    (Alan Perlis) However, ‚ÄúWe should forget about small efficiencies, say about 97%&#xA;    of the time: premature optimization is the root of all evil.‚Äù (&lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/Donald_Knuth&#34;&gt;Donald Knuth&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Because ‚Äúsoftware engineering is programming integrated over time‚Äù (&lt;a&#xA;        href=&#34;https://www.oreilly.com/library/view/software-engineering-at/9781492082781/ch01.html#:~:text=Within%20Google%2C%20we%20sometimes%20say,software%20in%20the%20first%20place.&#34;&gt;Titus&#xA;        Winters&lt;/a&gt;) and because computing science predates and will outlast computers,&#xA;    ‚ÄúPrograms should be written for people to read, and only incidentally for&#xA;    machines to execute.‚Äù (&lt;a href=&#34;https://web.mit.edu/6.001/6.037/sicp.pdf&#34;&gt;Harold&#xA;        Abelson and Gerald Jay Sussman&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Problem Exists Between Keyboard And Chair (PEBKAC). Although novice engineers&#xA;    believe this dictum applies to users, experienced engineers know that it applies&#xA;    to engineers. This is because ‚ÄúThere are two ways of constructing a software&#xA;    design; one way is to make it so simple that there are obviously no&#xA;    deficiencies, and the other way is to make it so complicated that there are no&#xA;    obvious deficiencies. The first method is far more difficult.‚Äù (&lt;a&#xA;        href=&#34;https://en.wikipedia.org/wiki/C._A._R._Hoare&#34;&gt;C. A. R. Hoare&lt;/a&gt;) ‚ÄúA&#xA;    specification that cannot be fit on one 8.5 x 11 inch piece of paper cannot be&#xA;    understood.‚Äù (&lt;a href=&#34;http://wwwuser.csse.rose-hulman.edu/~ardis/&#34;&gt;Mark&#xA;        Ardis&lt;/a&gt;)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Software security is a process, not a product (&lt;a href=&#34;https://www.schneier.com/crypto-gram-0005.html&#34;&gt;Bruce&#xA;        Schneier&lt;/a&gt;), but&#xA;    &lt;a href=&#34;/2013/06/18/software-itself-is-a-process-not-a-product/&#34;&gt;that is true&#xA;        of software generally&lt;/a&gt;. Attempts to freeze software in time and make it into&#xA;    a finished product have increasingly lower viability over time. ‚ÄúHave one joint&#xA;    and keep it well oiled.‚Äù (&lt;a href=&#34;https://www.imperialviolet.org/2016/05/16/agility.html&#34;&gt;Adam&#xA;        Langley&lt;/a&gt;)&#xA;&lt;/p&gt;</description>
      <author>Chris Palmer</author>
      <guid>2011/03/20/eternal-truths-of-software/index.html</guid>
      <pubDate>Sun, 20 Mar 2011 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>This Place Is Heaven, If You‚Äôll Just Listen</title>
      <link>https://noncombatant.org/2004/01/24/this-place-is-heaven-if-youll-just-listen/index.content</link>
      <description>&lt;h1&gt;This Place Is Heaven, If You‚Äôll Just Listen&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;time&gt;24 January 2004&lt;/time&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;On the way home from the grocery store just now, I was stopped at a red&#xA;light at Market and Castro. Market is quite wide at this point, and the walk&#xA;light never lasts long enough for you to get all the way across. A woman was&#xA;jogging to get across in time, and with her plastic shopping bag, she&#xA;acheived two perfect bars of music.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&lt;img alt=&#34;Hurrying Woman Clave&#34; src=&#34;hurrying-woman-clave.jpg&#34;&#xA;loading=&#34;lazy&#34; width=&#34;801&#34; height=&#34;285&#34;/&gt;&lt;figcaption&gt;Hurrying Woman&#xA;Clave&lt;/figcaption&gt;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;It‚Äôs a fast, slightly modified 3 ‚Äì 2¬†&lt;a&#xA;href=&#34;http://en.wikipedia.org/wiki/Clave_%28rhythm%29&#34;&gt;clave&lt;/a&gt;. After the&#xA;first phrase her steps got longer and slower, and the shopping bag dangled&#xA;arrythmically. Then the light turned green.&lt;/p&gt;&#xA;</description>
      <author>Chris Palmer</author>
      <guid>2004/01/24/this-place-is-heaven-if-youll-just-listen/index.html</guid>
      <pubDate>Sat, 24 Jan 2004 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>